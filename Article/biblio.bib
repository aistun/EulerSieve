
@book{taocp,
 author = {Knuth, Donald E.},
 title = {The Art of Computer Programming, volumes 1--4A},
 year = 1997,
 publisher = {Addison Wesley Professional},
}

@Misc{mapreuve,
  title =     {Preuve en Why3 du crible d'Euler},
  howpublished = {\url{bitbucket/c'estici}}}

@Misc{crible-euler-wiki,
  title =     {Crible d'{Euler}},
  howpublished = {\url{https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes#Euler's_sieve}}}

@Misc{crible-segmente,
  title =     {Crible d'{Ératosthène} segmenté},
  howpublished = {\url{https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes#Segmented_sieve}}}

@article{crible-euler,
author = {Gries, David and Misra, Jayadev},
title = {A Linear Sieve Algorithm for Finding Prime Numbers},
year = {1978},
issue_date = {Dec. 1978},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {21},
number = {12},
issn = {0001-0782},
url = {https://doi.org/10.1145/359657.359660},
doi = {10.1145/359657.359660},
abstract = {A new algorithm is presented for finding all primes between 2 and n. The algorithm executes in time proportional to n (assuming that multiplication of integers not larger than n can be performed in unit time). The method has the same arithmetic complexity as the algorithm presented by Mairson [6]; however, our version is perhaps simpler and more elegant. It is also easily extended to find the prime factorization of all integers between 2 and n in time proportional to n.},
journal = {Commun. ACM},
month = dec,
pages = {999–1003},
numpages = {5},
keywords = {data structures, algorithms, primes}
}

@misc{why3,
    author = {Bobot, François and Filliâtre, Jean-Christophe and Marché, Claude and Melquiond, Guillaume and Paskevich, Andrei},
    title = {The {W}hy3 platform},
    howpublished = {\url{http://why3.lri.fr/}}
}

@article{ghost-code,
  author = {Jean-Christophe Filli\^atre and L\'eon
            Gondelman and Andrei Paskevich},
  title = {The Spirit of Ghost Code},
  journal = {Formal Methods in System Design},
  publisher = {Springer},
  year = 2016,
  volume = 48,
  number = 3,
  pages = {152--174},
  issn = {1572-8102},
  doi = {10.1007/s10703-016-0243-x},
  topics = {team},
  hal = {https://hal.archives-ouvertes.fr/hal-01396864v1},
  keywords = {Why3},
  type_publi = {irevcomlec},
  x-international-audience = {yes},
  x-proceedings = {yes},
  x-type = {article},
  x-support = {revue},
  x-editorial-board = {yes},
  abstract = {
  In the context of deductive program verification, ghost code is part
  of the program that is added for the purpose of specification.
  Ghost code must not interfere with regular code, in the sense that
  it can be erased without observable difference in the program outcome.
  In particular, ghost data cannot participate in regular
  computations and ghost code cannot mutate regular data or diverge.
  The idea exists in the folklore since the early notion of auxiliary
  variables and is implemented in many state-of-the-art program
  verification tools. However, a rigorous definition and treatment of
  ghost code is surprisingly subtle and few formalizations exist.

  In this article, we describe a simple ML-style programming language
  with mutable state and ghost code.  Non-interference is ensured by a
  type system with effects, which allows, notably, the same data types
  and functions to be used in both regular and ghost code.
  We define the procedure of ghost code erasure and we prove its
  safety using bisimulation.
  A similar type system, with numerous extensions which we briefly discuss,
  is implemented in the program verification environment Why3.
  }
}

@techreport{filliatre20jlamp,
  author = {Jean-Christophe Filli\^atre},
  title = {Simpler Proofs with Decentralized Invariants},
  institution = {Universit{\'e} Paris-Saclay},
  year = 2020,
  topics = {team},
  type = {Technical Report},
  month = mar,
  note = {\url{http://why3.lri.fr/spdi/}},
  hal = {https://hal.inria.fr/hal-02518570}
}

@misc{sieve-eratosthene-why3,
  author = {Martin Clochard},
  title = {Sieve of Eratosthenes},
  howpublished = {\url{http://toccata.lri.fr/gallery/sieve.en.html}}
}

@misc{knuth-prime-numbers-why3,
  author = {Jean-Christophe Filliâtre},
  title = {Knuth's Prime Numbers},
  howpublished = {\url{http://toccata.lri.fr/gallery/knuth_prime_numbers.en.html}}
}

@inbook{knuth-prime-numbers,
 author = {Knuth, Donald E.},
 title = {The Art of Computer Programming},
 year = 1997,
 publisher = {Addison Wesley Professional},
 volume = 1,
 pages = {147}
}