module EulerSieve

use int.Int
use int.EuclideanDivision
use array.Array
use array.NumOf

predicate inv_remove_products (nexts: array int) (marked: array bool) =
  nexts.length = marked.length /\
  forall i. 0 <= i < nexts.length ->
            i < nexts[i] <= nexts.length

let rec remove_products (nexts: array int) (marked: array bool)
                        (max: int) (n: int) (p: int) : unit
  requires { 2 <= p <= max + 1 /\ 2 <= n <= max }
  requires { nexts.length = marked.length = max + 1 }
  requires { inv_remove_products nexts marked }
  = let rec loop p =
    requires { 0 <= p <= max }
    requires { 2 <= n <= max }
    requires { inv_remove_products nexts marked }
    ensures { inv_remove_products nexts marked }
    variant { max - nexts[p] }
    let next = nexts[p] in
    if 0 <= next < max + 1 then
      if n * next <= max then begin
        marked[n * next] <- true;
        if marked[next] then begin
          nexts[p] <- nexts[next];
          loop p
        end else
          loop next
      end in
    if n * n <= max then begin
      marked[n * n] <- true;
      loop n
    end

let euler_sieve (max: int) : array int
= let nexts = make (max + 1) 0 in
  let marked = make (max + 1) false in
  (* finalement, on ne met pas nexts[max] = -1, mais nexts[max] = max + 1,
     plus facile Ã  prouver pour la terminaison *)
  for i = 0 to max do
     nexts[i] <- i + 1
  done;
  let rec loop n =
    variant { max + 1 - n }
    if n <> max + 1 then begin
      remove_products nexts marked max n (-1);
      loop nexts[n]
    end in
  loop 2;
  let rec count p cnt =
    variant { max - p }
    let next = nexts[p] in
    if next = max + 1 then cnt
    else
      if marked[next] then begin
        nexts[p] <- nexts[next];
        count p cnt
      end else
        count next (cnt + 1) in
  let primes = make (count 1 0) 0 in
  let ref p = 0 in
  let ref i = 2 in
  while i <> max + 1 do
    if not marked[i] then begin
      primes[p] <- i;
      p <- p + 1
    end;
    i <- nexts[i]
  done;
  primes

end
