<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"http://why3.lri.fr/why3session.dtd">
<why3session shape_version="6">
<prover id="0" name="Alt-Ergo" version="2.0.0" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="1" name="Z3" version="4.8.6" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="2" name="CVC4" version="1.7" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="3" name="Vampire" version="4.4.0" timelimit="10" steplimit="0" memlimit="1000"/>
<prover id="4" name="Eprover" version="2.4" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="5" name="Alt-Ergo" version="2.3.2" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="6" name="CVC4" version="1.6" timelimit="5" steplimit="0" memlimit="1000"/>
<file format="whyml" proved="true">
<path name=".."/><path name="euler_sieve_V2.mlw"/>
<theory name="ArithmeticResults" proved="true">
 <goal name="mult_croissance_locale&#39;vc" expl="VC for mult_croissance_locale" proved="true">
 <proof prover="2"><result status="valid" time="0.02" steps="9108"/></proof>
 </goal>
 <goal name="mult_croissance&#39;vc" expl="VC for mult_croissance" proved="true">
 <proof prover="0" timelimit="10"><result status="valid" time="0.01" steps="24"/></proof>
 </goal>
 <goal name="comp_mult_2&#39;vc" expl="VC for comp_mult_2" proved="true">
 <proof prover="0" timelimit="10"><result status="valid" time="0.01" steps="15"/></proof>
 </goal>
 <goal name="div_croissance_locale1&#39;vc" expl="VC for div_croissance_locale1" proved="true">
 <proof prover="1" timelimit="10"><result status="valid" time="0.03" steps="32504"/></proof>
 </goal>
 <goal name="div_croissance1&#39;vc" expl="VC for div_croissance1" proved="true">
 <proof prover="5" timelimit="10"><result status="valid" time="0.02" steps="37"/></proof>
 </goal>
 <goal name="div_croissance_locale2&#39;vc" expl="VC for div_croissance_locale2" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="div_croissance_locale2&#39;vc.0" expl="variant decrease" proved="true">
  <proof prover="2"><result status="valid" time="0.03" steps="9833"/></proof>
  </goal>
  <goal name="div_croissance_locale2&#39;vc.1" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.04" steps="9828"/></proof>
  </goal>
  <goal name="div_croissance_locale2&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="6" timelimit="10"><result status="valid" time="0.69" steps="57988"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="div_croissance2&#39;vc" expl="VC for div_croissance2" proved="true">
 <proof prover="0" timelimit="10"><result status="valid" time="0.04" steps="41"/></proof>
 </goal>
 <goal name="div_mult_1&#39;vc" expl="VC for div_mult_1" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="div_mult_1&#39;vc.0" expl="postcondition" proved="true">
  <transf name="inline_all" proved="true" >
   <goal name="div_mult_1&#39;vc.0.0" expl="postcondition" proved="true">
   <proof prover="1" timelimit="10"><result status="valid" time="0.11" steps="387216"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="mult_borne_sous_exp&#39;vc" expl="VC for mult_borne_sous_exp" proved="true">
 <proof prover="0" timelimit="10"><result status="valid" time="6.79" steps="175"/></proof>
 </goal>
 <goal name="sq_ineq&#39;vc" expl="VC for sq_ineq" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="sq_ineq&#39;vc.0" expl="variant decrease" proved="true">
  <proof prover="2"><result status="valid" time="0.11" steps="17965"/></proof>
  </goal>
  <goal name="sq_ineq&#39;vc.1" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.11" steps="17928"/></proof>
  </goal>
  <goal name="sq_ineq&#39;vc.2" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.03" steps="10701"/></proof>
  </goal>
  <goal name="sq_ineq&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="6" timelimit="1"><result status="valid" time="0.16" steps="30796"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="DivisibilityResults" proved="true">
 <goal name="divides_div&#39;vc" expl="VC for divides_div" proved="true">
 <proof prover="5" timelimit="10"><result status="valid" time="0.05" steps="77"/></proof>
 </goal>
 <goal name="divides_inf&#39;vc" expl="VC for divides_inf" proved="true">
 <proof prover="5" timelimit="10"><result status="valid" time="0.03" steps="68"/></proof>
 </goal>
 <goal name="not_prime_divider_limits&#39;vc" expl="VC for not_prime_divider_limits" proved="true">
 <proof prover="1"><result status="valid" time="0.03" steps="31152"/></proof>
 </goal>
 <goal name="no_prod_impl_no_divider&#39;vc" expl="VC for no_prod_impl_no_divider" proved="true">
 <proof prover="0" timelimit="10"><result status="valid" time="8.28" steps="293"/></proof>
 </goal>
 <goal name="not_prime_impl_divisor_under_sqrt&#39;vc" expl="VC for not_prime_impl_divisor_under_sqrt" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="not_prime_impl_divisor_under_sqrt&#39;vc.0" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="not_prime_impl_divisor_under_sqrt&#39;vc.0.0" expl="postcondition" proved="true">
   <proof prover="6" timelimit="1"><result status="valid" time="0.20" steps="52303"/></proof>
   </goal>
   <goal name="not_prime_impl_divisor_under_sqrt&#39;vc.0.1" expl="VC for not_prime_impl_divisor_under_sqrt" proved="true">
   <proof prover="0"><result status="valid" time="0.04" steps="59"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="EulerSieveSpec" proved="true">
 <goal name="conservation_inv_marked_nexts_on_marked_change&#39;vc" expl="VC for conservation_inv_marked_nexts_on_marked_change" proved="true">
 <proof prover="5"><result status="valid" time="0.05" steps="177"/></proof>
 </goal>
 <goal name="conservation_inv_marked_nexts_on_nexts_change&#39;vc" expl="VC for conservation_inv_marked_nexts_on_nexts_change" proved="true">
 <transf name="inline_goal" proved="true" >
  <goal name="conservation_inv_marked_nexts_on_nexts_change&#39;vc.0" expl="VC for conservation_inv_marked_nexts_on_nexts_change" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="conservation_inv_marked_nexts_on_nexts_change&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="conservation_inv_marked_nexts_on_nexts_change&#39;vc.0.0.0" expl="postcondition" proved="true">
    <proof prover="5"><result status="valid" time="0.02" steps="51"/></proof>
    </goal>
    <goal name="conservation_inv_marked_nexts_on_nexts_change&#39;vc.0.0.1" expl="postcondition" proved="true">
    <proof prover="5"><result status="valid" time="0.48" steps="1741"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="EulerSieve" proved="true">
 <goal name="marked_impl_all_products_marked&#39;vc" expl="VC for marked_impl_all_products_marked" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="marked_impl_all_products_marked&#39;vc.0" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="marked_impl_all_products_marked&#39;vc.0.0" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.05" steps="19789"/></proof>
   </goal>
   <goal name="marked_impl_all_products_marked&#39;vc.0.1" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.01" steps="19789"/></proof>
   </goal>
   <goal name="marked_impl_all_products_marked&#39;vc.0.2" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.06" steps="19789"/></proof>
   </goal>
   <goal name="marked_impl_all_products_marked&#39;vc.0.3" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.05" steps="23090"/></proof>
   </goal>
   <goal name="marked_impl_all_products_marked&#39;vc.0.4" expl="VC for marked_impl_all_products_marked" proved="true">
   <proof prover="2"><result status="valid" time="0.43" steps="107890"/></proof>
   </goal>
   <goal name="marked_impl_all_products_marked&#39;vc.0.5" expl="VC for marked_impl_all_products_marked" proved="true">
   <proof prover="4"><result status="valid" time="0.31"/></proof>
   </goal>
   <goal name="marked_impl_all_products_marked&#39;vc.0.6" expl="VC for marked_impl_all_products_marked" proved="true">
   <transf name="inline_all" proved="true" >
    <goal name="marked_impl_all_products_marked&#39;vc.0.6.0" expl="VC for marked_impl_all_products_marked" proved="true">
    <proof prover="3"><result status="valid" time="2.53"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="prev_and_new_impl_all_products_marked&#39;vc" expl="VC for prev_and_new_impl_all_products_marked" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="prev_and_new_impl_all_products_marked&#39;vc.0" expl="assertion" proved="true">
  <transf name="inline_all" proved="true" >
   <goal name="prev_and_new_impl_all_products_marked&#39;vc.0.0" expl="assertion" proved="true">
   <proof prover="4" timelimit="10"><result status="valid" time="10.48"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="prev_and_new_impl_all_products_marked&#39;vc.1" expl="assertion" proved="true">
  <proof prover="0" timelimit="10"><result status="valid" time="0.06" steps="91"/></proof>
  </goal>
  <goal name="prev_and_new_impl_all_products_marked&#39;vc.2" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.06" steps="25965"/></proof>
  </goal>
  <goal name="prev_and_new_impl_all_products_marked&#39;vc.3" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.04" steps="20746"/></proof>
  </goal>
  <goal name="prev_and_new_impl_all_products_marked&#39;vc.4" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.15" steps="26251"/></proof>
  </goal>
  <goal name="prev_and_new_impl_all_products_marked&#39;vc.5" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.05" steps="21059"/></proof>
  </goal>
  <goal name="prev_and_new_impl_all_products_marked&#39;vc.6" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.07" steps="24626"/></proof>
  </goal>
  <goal name="prev_and_new_impl_all_products_marked&#39;vc.7" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="prev_and_new_impl_all_products_marked&#39;vc.7.0" expl="assertion" proved="true">
   <proof prover="5" timelimit="10"><result status="valid" time="1.26" steps="378"/></proof>
   </goal>
   <goal name="prev_and_new_impl_all_products_marked&#39;vc.7.1" expl="VC for prev_and_new_impl_all_products_marked" proved="true">
   <proof prover="0" timelimit="10"><result status="valid" time="0.04" steps="140"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="prev_and_new_impl_all_products_marked&#39;vc.8" expl="assertion" proved="true">
  <proof prover="0" timelimit="10"><result status="valid" time="0.01" steps="14"/></proof>
  </goal>
  <goal name="prev_and_new_impl_all_products_marked&#39;vc.9" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="prev_and_new_impl_all_products_marked&#39;vc.9.0" expl="assertion" proved="true">
   <proof prover="1"><result status="valid" time="0.05" steps="139556"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="prev_and_new_impl_all_products_marked&#39;vc.10" expl="postcondition" proved="true">
  <proof prover="0" timelimit="10"><result status="valid" time="0.02" steps="75"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="conservation_only_products_marked&#39;vc" expl="VC for conservation_only_products_marked" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="conservation_only_products_marked&#39;vc.0" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.02" steps="90"/></proof>
  </goal>
  <goal name="conservation_only_products_marked&#39;vc.1" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.10" steps="112"/></proof>
  </goal>
  <goal name="conservation_only_products_marked&#39;vc.2" expl="assertion" proved="true">
  <proof prover="0" timelimit="10"><result status="valid" time="0.01" steps="28"/></proof>
  </goal>
  <goal name="conservation_only_products_marked&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="0" timelimit="10"><result status="valid" time="0.02" steps="85"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="conservation_previously_marked_products&#39;vc" expl="VC for conservation_previously_marked_products" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="conservation_previously_marked_products&#39;vc.0" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="0.03" steps="114447"/></proof>
  </goal>
  <goal name="conservation_previously_marked_products&#39;vc.1" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="0.03" steps="130372"/></proof>
  </goal>
  <goal name="conservation_previously_marked_products&#39;vc.2" expl="assertion" proved="true">
  <transf name="inline_all" proved="true" >
   <goal name="conservation_previously_marked_products&#39;vc.2.0" expl="assertion" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="conservation_previously_marked_products&#39;vc.2.0.0" expl="assertion" proved="true">
    <proof prover="2"><result status="valid" time="0.34" steps="46497"/></proof>
    </goal>
    <goal name="conservation_previously_marked_products&#39;vc.2.0.1" expl="VC for conservation_previously_marked_products" proved="true">
    <proof prover="1" timelimit="10"><result status="valid" time="0.73" steps="1288384"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="conservation_previously_marked_products&#39;vc.3" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.07" steps="26426"/></proof>
  </goal>
  <goal name="conservation_previously_marked_products&#39;vc.4" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.04" steps="21093"/></proof>
  </goal>
  <goal name="conservation_previously_marked_products&#39;vc.5" expl="assertion" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="conservation_previously_marked_products&#39;vc.5.0" expl="assertion" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="conservation_previously_marked_products&#39;vc.5.0.0" expl="assertion" proved="true">
    <proof prover="3"><result status="valid" time="0.63"/></proof>
    </goal>
    <goal name="conservation_previously_marked_products&#39;vc.5.0.1" expl="VC for conservation_previously_marked_products" proved="true">
    <proof prover="5" timelimit="10"><result status="valid" time="0.10" steps="243"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="conservation_previously_marked_products&#39;vc.6" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="conservation_previously_marked_products&#39;vc.6.0" expl="assertion" proved="true">
   <transf name="inline_goal" proved="true" >
    <goal name="conservation_previously_marked_products&#39;vc.6.0.0" expl="assertion" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="conservation_previously_marked_products&#39;vc.6.0.0.0" expl="assertion" proved="true">
     <proof prover="2"><result status="valid" time="0.06" steps="23462"/></proof>
     </goal>
     <goal name="conservation_previously_marked_products&#39;vc.6.0.0.1" expl="assertion" proved="true">
     <proof prover="2" timelimit="10"><result status="valid" time="0.07" steps="27020"/></proof>
     </goal>
     <goal name="conservation_previously_marked_products&#39;vc.6.0.0.2" expl="assertion" proved="true">
     <proof prover="1"><result status="valid" time="0.04" steps="135519"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="conservation_previously_marked_products&#39;vc.7" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.03" steps="150537"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="conservation_previously_marked_products_on_marked_change" proved="true">
 <transf name="inline_goal" proved="true" >
  <goal name="conservation_previously_marked_products_on_marked_change.0" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="conservation_previously_marked_products_on_marked_change.0.0" proved="true">
   <transf name="inline_goal" proved="true" >
    <goal name="conservation_previously_marked_products_on_marked_change.0.0.0" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="conservation_previously_marked_products_on_marked_change.0.0.0.0" proved="true">
     <proof prover="2"><result status="valid" time="0.03" steps="21015"/></proof>
     </goal>
     <goal name="conservation_previously_marked_products_on_marked_change.0.0.0.1" proved="true">
     <proof prover="3"><result status="valid" time="0.93"/></proof>
     <proof prover="4" timelimit="10"><result status="valid" time="0.18"/></proof>
     </goal>
     <goal name="conservation_previously_marked_products_on_marked_change.0.0.0.2" proved="true">
     <transf name="inline_all" proved="true" >
      <goal name="conservation_previously_marked_products_on_marked_change.0.0.0.2.0" proved="true">
      <proof prover="1" timelimit="10"><result status="valid" time="0.27" steps="534034"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="conservation_inv_marked_old_nexts2&#39;vc" expl="VC for conservation_inv_marked_old_nexts2" proved="true">
 <proof prover="0" timelimit="10"><result status="valid" time="1.14" steps="146"/></proof>
 </goal>
 <goal name="unchanged_other_elements_seq&#39;vc" expl="VC for unchanged_other_elements_seq" proved="true">
 <proof prover="5"><result status="valid" time="0.02" steps="67"/></proof>
 </goal>
 <goal name="t&#39;vc" expl="VC for t" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="t&#39;vc.0" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.03" steps="21589"/></proof>
  </goal>
  <goal name="t&#39;vc.1" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.04" steps="22020"/></proof>
  </goal>
  <goal name="t&#39;vc.2" expl="type invariant" proved="true">
  <proof prover="5"><result status="valid" time="0.01" steps="14"/></proof>
  </goal>
  <goal name="t&#39;vc.3" expl="type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.07" steps="29555"/></proof>
  </goal>
  <goal name="t&#39;vc.4" expl="type invariant" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="t&#39;vc.4.0" expl="type invariant" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="t&#39;vc.4.0.0" expl="type invariant" proved="true">
    <proof prover="1"><result status="valid" time="0.05" steps="162053"/></proof>
    </goal>
    <goal name="t&#39;vc.4.0.1" expl="type invariant" proved="true">
    <proof prover="0"><result status="valid" time="0.09" steps="20"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="t&#39;vc.5" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="59"/></proof>
  </goal>
  <goal name="t&#39;vc.6" expl="type invariant" proved="true">
  <proof prover="6" timelimit="10"><result status="valid" time="0.12" steps="28468"/></proof>
  </goal>
  <goal name="t&#39;vc.7" expl="type invariant" proved="true">
  <proof prover="5"><result status="valid" time="0.01" steps="23"/></proof>
  </goal>
  <goal name="t&#39;vc.8" expl="type invariant" proved="true">
  <proof prover="5"><result status="valid" time="0.03" steps="95"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="remove_products&#39;vc" expl="VC for remove_products" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="remove_products&#39;vc.0" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="remove_products&#39;vc.0.0" expl="precondition" proved="true">
   <proof prover="5"><result status="valid" time="0.02" steps="54"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.0.1" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="0.15" steps="24553"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.1" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.04" steps="56"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.2" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.06" steps="156"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.3" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="40"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.4" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="remove_products&#39;vc.4.0" expl="precondition" proved="true">
   <proof prover="1"><result status="valid" time="0.04" steps="160133"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.4.1" expl="precondition" proved="true">
   <proof prover="1"><result status="valid" time="0.05" steps="9272"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.5" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.36" steps="244"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.6" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.04" steps="176"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.7" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.03" steps="78"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.8" expl="assertion" proved="true">
  <proof prover="5" timelimit="5"><result status="valid" time="0.08" steps="77"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.9" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="remove_products&#39;vc.9.0" expl="assertion" proved="true">
   <proof prover="1"><result status="valid" time="0.04" steps="149883"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.9.1" expl="assertion" proved="true">
   <proof prover="1"><result status="valid" time="0.05" steps="193862"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.9.2" expl="VC for remove_products" proved="true">
   <proof prover="5"><result status="valid" time="0.19" steps="303"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.10" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="remove_products&#39;vc.10.0" expl="assertion" proved="true">
   <proof prover="1"><result status="valid" time="0.04" steps="149479"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.10.1" expl="assertion" proved="true">
   <proof prover="1"><result status="valid" time="0.03" steps="80421"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.10.2" expl="assertion" proved="true">
   <proof prover="1" timelimit="10"><result status="valid" time="0.05" steps="166329"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.10.3" expl="VC for remove_products" proved="true">
   <proof prover="5" timelimit="5"><result status="valid" time="0.43" steps="332"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.11" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="remove_products&#39;vc.11.0" expl="assertion" proved="true">
   <transf name="inline_goal" proved="true" >
    <goal name="remove_products&#39;vc.11.0.0" expl="assertion" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="remove_products&#39;vc.11.0.0.0" expl="assertion" proved="true">
     <proof prover="1"><result status="valid" time="0.06" steps="201827"/></proof>
     </goal>
     <goal name="remove_products&#39;vc.11.0.0.1" expl="assertion" proved="true">
     <proof prover="1"><result status="valid" time="0.05" steps="171827"/></proof>
     </goal>
     <goal name="remove_products&#39;vc.11.0.0.2" expl="assertion" proved="true">
     <proof prover="1"><result status="valid" time="0.06" steps="221177"/></proof>
     </goal>
     <goal name="remove_products&#39;vc.11.0.0.3" expl="assertion" proved="true">
     <proof prover="5"><result status="valid" time="0.82" steps="718"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="remove_products&#39;vc.11.1" expl="VC for remove_products" proved="true">
   <proof prover="0"><result status="valid" time="0.82" steps="524"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.12" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="remove_products&#39;vc.12.0" expl="assertion" proved="true">
   <transf name="split_premise_right" proved="true" >
    <goal name="remove_products&#39;vc.12.0.0" expl="assertion" proved="true">
    <proof prover="6"><result status="valid" time="0.65" steps="80228"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="remove_products&#39;vc.12.1" expl="VC for remove_products" proved="true">
   <proof prover="1"><result status="valid" time="0.04" steps="199339"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.13" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.03" steps="83"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.14" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.04" steps="84"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.15" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="remove_products&#39;vc.15.0" expl="assertion" proved="true">
   <proof prover="1"><result status="valid" time="0.04" steps="222344"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.16" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="remove_products&#39;vc.16.0" expl="precondition" proved="true">
   <proof prover="6" timelimit="10"><result status="valid" time="0.11" steps="25533"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.16.1" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="0.02" steps="47"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.17" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.02" steps="88"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.18" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="remove_products&#39;vc.18.0" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="0.16" steps="25870"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.18.1" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="0.08" steps="25970"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.18.2" expl="precondition" proved="true">
   <proof prover="1" timelimit="10"><result status="valid" time="0.07" steps="223394"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.18.3" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="0.11" steps="26335"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.19" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.01" steps="95"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.20" expl="precondition" proved="true">
  <transf name="split_premise_right" proved="true" >
   <goal name="remove_products&#39;vc.20.0" expl="precondition" proved="true">
   <proof prover="6" timelimit="10"><result status="valid" time="5.79" steps="256393"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.21" expl="precondition" proved="true">
  <proof prover="5" timelimit="5"><result status="valid" time="0.13" steps="95"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.22" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.04" steps="95"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.23" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.21" steps="243"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.24" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.04" steps="102"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.25" expl="assertion" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="remove_products&#39;vc.25.0" expl="assertion" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="remove_products&#39;vc.25.0.0" expl="assertion" proved="true">
    <proof prover="2"><result status="valid" time="0.16" steps="26243"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.25.0.1" expl="assertion" proved="true">
    <proof prover="2"><result status="valid" time="0.17" steps="26120"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.25.0.2" expl="assertion" proved="true">
    <proof prover="5"><result status="valid" time="0.42" steps="379"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.25.0.3" expl="VC for remove_products" proved="true">
    <proof prover="1"><result status="valid" time="0.12" steps="242141"/></proof>
    <proof prover="5"><result status="valid" time="0.17" steps="104"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.25.0.4" expl="VC for remove_products" proved="true">
    <proof prover="6" timelimit="10"><result status="valid" time="0.56" steps="62414"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.26" expl="variant decrease" proved="true">
  <proof prover="6"><result status="valid" time="0.44" steps="45939"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.27" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="remove_products&#39;vc.27.0" expl="precondition" proved="true">
   <proof prover="5"><result status="valid" time="0.10" steps="99"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.27.1" expl="precondition" proved="true">
   <proof prover="5"><result status="valid" time="0.07" steps="99"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.27.2" expl="precondition" proved="true">
   <proof prover="5"><result status="valid" time="0.06" steps="99"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.27.3" expl="precondition" proved="true">
   <proof prover="5"><result status="valid" time="0.04" steps="99"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.27.4" expl="precondition" proved="true">
   <proof prover="5"><result status="valid" time="0.05" steps="99"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.27.5" expl="precondition" proved="true">
   <proof prover="5"><result status="valid" time="0.06" steps="99"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.27.6" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.44" steps="45881"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.27.7" expl="precondition" proved="true">
   <proof prover="6" timelimit="10"><result status="valid" time="0.20" steps="40233"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.27.8" expl="precondition" proved="true">
   <proof prover="5"><result status="valid" time="0.24" steps="376"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.28" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="remove_products&#39;vc.28.0" expl="precondition" proved="true">
   <transf name="inline_goal" proved="true" >
    <goal name="remove_products&#39;vc.28.0.0" expl="precondition" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="remove_products&#39;vc.28.0.0.0" expl="VC for remove_products" proved="true">
     <proof prover="2"><result status="valid" time="0.21" steps="39131"/></proof>
     </goal>
     <goal name="remove_products&#39;vc.28.0.0.1" expl="VC for remove_products" proved="true">
     <proof prover="0"><result status="valid" time="0.21" steps="109"/></proof>
     </goal>
     <goal name="remove_products&#39;vc.28.0.0.2" expl="VC for remove_products" proved="true">
     <transf name="unfold" proved="true" arg1="inv_remove_products" arg2="in" arg3="Requires8">
      <goal name="remove_products&#39;vc.28.0.0.2.0" expl="VC for remove_products" proved="true">
      <transf name="split_premise_right" proved="true" >
       <goal name="remove_products&#39;vc.28.0.0.2.0.0" expl="VC for remove_products" proved="true">
       <transf name="inline_goal" proved="true" >
        <goal name="remove_products&#39;vc.28.0.0.2.0.0.0" expl="VC for remove_products" proved="true">
        <transf name="unfold" proved="true" arg1="all_primes" arg2="in" arg3="Requires11">
         <goal name="remove_products&#39;vc.28.0.0.2.0.0.0.0" expl="VC for remove_products" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="remove_products&#39;vc.28.0.0.2.0.0.0.0.0" expl="VC for remove_products" proved="true">
          <transf name="instantiate" proved="true" arg1="Requires11" arg2="i">
           <goal name="remove_products&#39;vc.28.0.0.2.0.0.0.0.0.0" expl="VC for remove_products" proved="true">
           <proof prover="6"><result status="valid" time="0.29" steps="44370"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="remove_products&#39;vc.28.0.0.2.0.0.0.0.1" expl="VC for remove_products" proved="true">
          <transf name="instantiate" proved="true" arg1="Requires11" arg2="i">
           <goal name="remove_products&#39;vc.28.0.0.2.0.0.0.0.1.0" expl="VC for remove_products" proved="true">
           <proof prover="0" timelimit="5"><result status="valid" time="0.34" steps="132"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="remove_products&#39;vc.28.0.0.3" expl="VC for remove_products" proved="true">
     <proof prover="1"><result status="valid" time="0.04" steps="200953"/></proof>
     </goal>
     <goal name="remove_products&#39;vc.28.0.0.4" expl="VC for remove_products" proved="true">
     <proof prover="1"><result status="valid" time="0.15" steps="233556"/></proof>
     </goal>
     <goal name="remove_products&#39;vc.28.0.0.5" expl="VC for remove_products" proved="true">
     <proof prover="1"><result status="valid" time="0.04" steps="229265"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.29" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.06" steps="189016"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.30" expl="precondition" proved="true">
  <proof prover="2" timelimit="10"><result status="valid" time="0.11" steps="29525"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.31" expl="precondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="remove_products&#39;vc.31.0" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="remove_products&#39;vc.31.0.0" expl="precondition" proved="true">
    <proof prover="5"><result status="valid" time="0.24" steps="116"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.31.0.1" expl="precondition" proved="true">
    <proof prover="0" timelimit="10"><result status="valid" time="1.82" steps="466"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.32" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.22" steps="61"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.33" expl="precondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="remove_products&#39;vc.33.0" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="remove_products&#39;vc.33.0.0" expl="precondition" proved="true">
    <proof prover="1"><result status="valid" time="0.12" steps="245722"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.33.0.1" expl="precondition" proved="true">
    <proof prover="1"><result status="valid" time="0.04" steps="203524"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.33.0.2" expl="precondition" proved="true">
    <proof prover="2"><result status="valid" time="0.17" steps="26395"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.33.0.3" expl="precondition" proved="true">
    <transf name="case" proved="true" arg1="(i = p)">
     <goal name="remove_products&#39;vc.33.0.3.0" expl="true case (precondition)" proved="true">
     <transf name="remove" proved="true" arg1="H24,H23,H22">
      <goal name="remove_products&#39;vc.33.0.3.0.0" expl="true case (precondition)" proved="true">
      <proof prover="5" timelimit="5"><result status="valid" time="0.75" steps="422"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="remove_products&#39;vc.33.0.3.1" expl="false case (precondition)" proved="true">
     <transf name="assert" proved="true" arg1="(forall i. 0 &lt;= i &lt; div (length1 marked_old - 1) n -&gt; i &lt;&gt; p -&gt; (nexts t)[i]&#39;&#39; = (nexts t1)[i]&#39;&#39;)">
      <goal name="remove_products&#39;vc.33.0.3.1.0" expl="asserted formula" proved="true">
      <proof prover="5"><result status="valid" time="0.18" steps="134"/></proof>
      </goal>
      <goal name="remove_products&#39;vc.33.0.3.1.1" expl="false case (precondition)" proved="true">
      <transf name="inline_all" proved="true" >
       <goal name="remove_products&#39;vc.33.0.3.1.1.0" expl="false case (precondition)" proved="true">
       <proof prover="1" timelimit="10"><result status="valid" time="2.26" steps="1637638"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.34" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="remove_products&#39;vc.34.0" expl="precondition" proved="true">
   <transf name="inline_goal" proved="true" >
    <goal name="remove_products&#39;vc.34.0.0" expl="precondition" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="remove_products&#39;vc.34.0.0.0" expl="VC for remove_products" proved="true">
     <proof prover="1"><result status="valid" time="0.10" steps="248658"/></proof>
     </goal>
     <goal name="remove_products&#39;vc.34.0.0.1" expl="VC for remove_products" proved="true">
     <proof prover="0"><result status="valid" time="0.10" steps="62"/></proof>
     </goal>
     <goal name="remove_products&#39;vc.34.0.0.2" expl="VC for remove_products" proved="true">
     <proof prover="5"><result status="valid" time="0.29" steps="444"/></proof>
     </goal>
     <goal name="remove_products&#39;vc.34.0.0.3" expl="VC for remove_products" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="remove_products&#39;vc.34.0.0.3.0" expl="VC for remove_products" proved="true">
      <proof prover="6"><result status="valid" time="2.47" steps="146261"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.35" expl="precondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="remove_products&#39;vc.35.0" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="remove_products&#39;vc.35.0.0" expl="precondition" proved="true">
    <proof prover="2"><result status="valid" time="0.19" steps="35380"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.35.0.1" expl="precondition" proved="true">
    <proof prover="1"><result status="valid" time="0.05" steps="207640"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.35.0.2" expl="precondition" proved="true">
    <proof prover="2"><result status="valid" time="0.17" steps="26437"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.35.0.3" expl="precondition" proved="true">
    <proof prover="1"><result status="valid" time="0.14" steps="229054"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.35.0.4" expl="precondition" proved="true">
    <transf name="inline_all" proved="true" >
     <goal name="remove_products&#39;vc.35.0.4.0" expl="precondition" proved="true">
     <proof prover="6" timelimit="10"><result status="valid" time="1.61" steps="136922"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.36" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.09" steps="64"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.37" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.07" steps="23843"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.38" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.06" steps="29483"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.39" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.06" steps="23849"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.40" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.06" steps="23852"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.41" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.06" steps="27478"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.42" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.08" steps="23858"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.43" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="remove_products&#39;vc.43.0" expl="assertion" proved="true">
   <proof prover="1"><result status="valid" time="0.15" steps="308374"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.44" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="remove_products&#39;vc.44.0" expl="variant decrease" proved="true">
   <proof prover="2"><result status="valid" time="0.16" steps="28951"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.44.1" expl="variant decrease" proved="true">
   <proof prover="1"><result status="valid" time="0.05" steps="204423"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.45" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="remove_products&#39;vc.45.0" expl="precondition" proved="true">
   <proof prover="5"><result status="valid" time="0.06" steps="85"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.45.1" expl="precondition" proved="true">
   <proof prover="5"><result status="valid" time="0.05" steps="85"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.45.2" expl="precondition" proved="true">
   <proof prover="5"><result status="valid" time="0.04" steps="85"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.45.3" expl="precondition" proved="true">
   <proof prover="5"><result status="valid" time="0.04" steps="85"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.45.4" expl="precondition" proved="true">
   <proof prover="5"><result status="valid" time="0.04" steps="85"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.45.5" expl="precondition" proved="true">
   <proof prover="5"><result status="valid" time="0.05" steps="85"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.45.6" expl="precondition" proved="true">
   <proof prover="1"><result status="valid" time="0.07" steps="204335"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.45.7" expl="precondition" proved="true">
   <proof prover="5"><result status="valid" time="0.26" steps="322"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.46" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="remove_products&#39;vc.46.0" expl="precondition" proved="true">
   <transf name="inline_goal" proved="true" >
    <goal name="remove_products&#39;vc.46.0.0" expl="precondition" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="remove_products&#39;vc.46.0.0.0" expl="VC for remove_products" proved="true">
     <proof prover="2"><result status="valid" time="0.19" steps="38897"/></proof>
     </goal>
     <goal name="remove_products&#39;vc.46.0.0.1" expl="VC for remove_products" proved="true">
     <proof prover="0"><result status="valid" time="0.11" steps="102"/></proof>
     </goal>
     <goal name="remove_products&#39;vc.46.0.0.2" expl="VC for remove_products" proved="true">
     <transf name="unfold" proved="true" arg1="inv_remove_products" arg2="in" arg3="Requires8">
      <goal name="remove_products&#39;vc.46.0.0.2.0" expl="VC for remove_products" proved="true">
      <transf name="split_premise_right" proved="true" >
       <goal name="remove_products&#39;vc.46.0.0.2.0.0" expl="VC for remove_products" proved="true">
       <transf name="inline_goal" proved="true" >
        <goal name="remove_products&#39;vc.46.0.0.2.0.0.0" expl="VC for remove_products" proved="true">
        <transf name="unfold" proved="true" arg1="all_primes" arg2="in" arg3="Requires11">
         <goal name="remove_products&#39;vc.46.0.0.2.0.0.0.0" expl="VC for remove_products" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="remove_products&#39;vc.46.0.0.2.0.0.0.0.0" expl="VC for remove_products" proved="true">
          <transf name="instantiate" proved="true" arg1="Requires11" arg2="i">
           <goal name="remove_products&#39;vc.46.0.0.2.0.0.0.0.0.0" expl="VC for remove_products" proved="true">
           <proof prover="5" timelimit="5"><result status="valid" time="0.23" steps="367"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="remove_products&#39;vc.46.0.0.2.0.0.0.0.1" expl="VC for remove_products" proved="true">
          <transf name="instantiate" proved="true" arg1="Requires11" arg2="i">
           <goal name="remove_products&#39;vc.46.0.0.2.0.0.0.0.1.0" expl="VC for remove_products" proved="true">
           <proof prover="5" timelimit="5"><result status="valid" time="0.40" steps="364"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="remove_products&#39;vc.46.0.0.3" expl="VC for remove_products" proved="true">
     <proof prover="2"><result status="valid" time="0.14" steps="29809"/></proof>
     </goal>
     <goal name="remove_products&#39;vc.46.0.0.4" expl="VC for remove_products" proved="true">
     <proof prover="1"><result status="valid" time="0.15" steps="216797"/></proof>
     </goal>
     <goal name="remove_products&#39;vc.46.0.0.5" expl="VC for remove_products" proved="true">
     <proof prover="2"><result status="valid" time="0.18" steps="34990"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.47" expl="precondition" proved="true">
  <proof prover="5" timelimit="10"><result status="valid" time="0.34" steps="352"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.48" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.03" steps="26456"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.49" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.70" steps="362"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.50" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.06" steps="200717"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.51" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.16" steps="26091"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.52" expl="precondition" proved="true">
  <proof prover="5" timelimit="5"><result status="valid" time="0.04" steps="104"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.53" expl="precondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="remove_products&#39;vc.53.0" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="remove_products&#39;vc.53.0.0" expl="precondition" proved="true">
    <proof prover="2"><result status="valid" time="0.19" steps="35106"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.53.0.1" expl="precondition" proved="true">
    <proof prover="1"><result status="valid" time="0.05" steps="199764"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.53.0.2" expl="precondition" proved="true">
    <proof prover="2"><result status="valid" time="0.06" steps="26012"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.53.0.3" expl="precondition" proved="true">
    <proof prover="1"><result status="valid" time="0.05" steps="216702"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.53.0.4" expl="precondition" proved="true">
    <transf name="unfold" proved="true" arg1="inv_marked_old_nexts2_partial" arg2="in" arg3="Requires8">
     <goal name="remove_products&#39;vc.53.0.4.0" expl="precondition" proved="true">
     <proof prover="6" timelimit="10"><result status="valid" time="0.47" steps="72747"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.54" expl="precondition" proved="true">
  <proof prover="0" timelimit="10"><result status="valid" time="0.02" steps="58"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.55" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.09" steps="23654"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.56" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.12" steps="29295"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.57" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.10" steps="23660"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.58" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.10" steps="23663"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.59" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.09" steps="27289"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.60" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.10" steps="23669"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.61" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="remove_products&#39;vc.61.0" expl="precondition" proved="true">
   <transf name="inline_all" proved="true" >
    <goal name="remove_products&#39;vc.61.0.0" expl="precondition" proved="true">
    <proof prover="1" timelimit="10"><result status="valid" time="1.07" steps="1013540"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="remove_products&#39;vc.61.1" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="0.06" steps="22863"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.61.2" expl="VC for remove_products" proved="true">
   <proof prover="0" timelimit="5"><result status="valid" time="1.71" steps="306"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.61.3" expl="VC for remove_products" proved="true">
   <proof prover="1"><result status="valid" time="0.06" steps="186299"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.61.4" expl="VC for remove_products" proved="true">
   <proof prover="2"><result status="valid" time="0.09" steps="25039"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.61.5" expl="VC for remove_products" proved="true">
   <proof prover="1"><result status="valid" time="0.06" steps="211639"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.62" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.03" steps="22864"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.63" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.06" steps="28574"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.64" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.02" steps="36"/></proof>
  <proof prover="2"><result status="valid" time="0.05" steps="22870"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.65" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.04" steps="22873"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.66" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.98" steps="147"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.67" expl="postcondition" proved="true">
  <proof prover="0" timelimit="10"><result status="valid" time="0.01" steps="37"/></proof>
  <proof prover="2"><result status="valid" time="0.06" steps="22900"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.68" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="remove_products&#39;vc.68.0" expl="precondition" proved="true">
   <transf name="inline_all" proved="true" >
    <goal name="remove_products&#39;vc.68.0.0" expl="precondition" proved="true">
    <proof prover="1" timelimit="10"><result status="valid" time="1.01" steps="990417"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="remove_products&#39;vc.68.1" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="0.06" steps="22846"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.68.2" expl="VC for remove_products" proved="true">
   <proof prover="0" timelimit="5"><result status="valid" time="0.45" steps="177"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.68.3" expl="VC for remove_products" proved="true">
   <proof prover="1"><result status="valid" time="0.05" steps="175196"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.68.4" expl="VC for remove_products" proved="true">
   <proof prover="2"><result status="valid" time="0.09" steps="25012"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.68.5" expl="VC for remove_products" proved="true">
   <proof prover="1"><result status="valid" time="0.05" steps="199604"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.69" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.05" steps="22847"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.70" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.07" steps="28557"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.71" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.03" steps="9269"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.72" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.06" steps="22856"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.73" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="87"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.74" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.08" steps="22883"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.75" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.04" steps="56"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.76" expl="precondition" proved="true">
  <proof prover="5" timelimit="5"><result status="valid" time="0.14" steps="190"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.77" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.03" steps="123554"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.78" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.05" steps="100"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.79" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.02" steps="73"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.80" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.01" steps="33"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.81" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="remove_products&#39;vc.81.0" expl="assertion" proved="true">
   <proof prover="5" timelimit="5"><result status="valid" time="0.03" steps="115"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.81.1" expl="assertion" proved="true">
   <transf name="split_premise_right" proved="true" >
    <goal name="remove_products&#39;vc.81.1.0" expl="assertion" proved="true">
    <proof prover="6"><result status="valid" time="0.19" steps="43645"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="remove_products&#39;vc.81.2" expl="VC for remove_products" proved="true">
   <proof prover="1"><result status="valid" time="0.08" steps="154010"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.81.3" expl="VC for remove_products" proved="true">
   <proof prover="5"><result status="valid" time="0.05" steps="40"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.81.4" expl="VC for remove_products" proved="true">
   <proof prover="1"><result status="valid" time="0.08" steps="149429"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.82" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="remove_products&#39;vc.82.0" expl="precondition" proved="true">
   <proof prover="5"><result status="valid" time="0.03" steps="28"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.82.1" expl="precondition" proved="true">
   <proof prover="5"><result status="valid" time="0.02" steps="28"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.82.2" expl="precondition" proved="true">
   <proof prover="5"><result status="valid" time="0.03" steps="28"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.82.3" expl="precondition" proved="true">
   <proof prover="5"><result status="valid" time="0.03" steps="28"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.82.4" expl="precondition" proved="true">
   <proof prover="5"><result status="valid" time="0.05" steps="115"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.82.5" expl="precondition" proved="true">
   <proof prover="5"><result status="valid" time="0.02" steps="28"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.82.6" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="0.17" steps="184"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.82.7" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="0.22" steps="108"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.83" expl="precondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="remove_products&#39;vc.83.0" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="remove_products&#39;vc.83.0.0" expl="precondition" proved="true">
    <proof prover="1"><result status="valid" time="0.08" steps="183095"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.83.0.1" expl="precondition" proved="true">
    <proof prover="0"><result status="valid" time="0.04" steps="67"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.83.0.2" expl="precondition" proved="true">
    <transf name="assert" proved="true" arg1="(n * n &gt; n)">
     <goal name="remove_products&#39;vc.83.0.2.0" expl="asserted formula" proved="true">
     <proof prover="5"><result status="valid" time="0.03" steps="37"/></proof>
     </goal>
     <goal name="remove_products&#39;vc.83.0.2.1" expl="precondition" proved="true">
     <transf name="assert" proved="true" arg1="(forall i. 0 &lt;= i &lt; n -&gt; (marked t1)[i]&#39;&#39; = (marked t)[i]&#39;&#39;)">
      <goal name="remove_products&#39;vc.83.0.2.1.0" expl="asserted formula" proved="true">
      <proof prover="5"><result status="valid" time="0.03" steps="131"/></proof>
      </goal>
      <goal name="remove_products&#39;vc.83.0.2.1.1" expl="precondition" proved="true">
      <proof prover="6"><result status="valid" time="0.17" steps="35651"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="remove_products&#39;vc.83.0.3" expl="precondition" proved="true">
    <proof prover="2"><result status="valid" time="0.09" steps="25451"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.83.0.4" expl="precondition" proved="true">
    <transf name="inline_all" proved="true" >
     <goal name="remove_products&#39;vc.83.0.4.0" expl="precondition" proved="true">
     <proof prover="1" timelimit="10"><result status="valid" time="0.56" steps="945445"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="remove_products&#39;vc.83.0.5" expl="precondition" proved="true">
    <transf name="inline_goal" proved="true" >
     <goal name="remove_products&#39;vc.83.0.5.0" expl="precondition" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="remove_products&#39;vc.83.0.5.0.0" expl="precondition" proved="true">
      <transf name="inline_all" proved="true" >
       <goal name="remove_products&#39;vc.83.0.5.0.0.0" expl="precondition" proved="true">
       <proof prover="6" timelimit="10"><result status="valid" time="0.38" steps="56691"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="remove_products&#39;vc.83.0.5.0.1" expl="precondition" proved="true">
      <transf name="inline_all" proved="true" >
       <goal name="remove_products&#39;vc.83.0.5.0.1.0" expl="precondition" proved="true">
       <proof prover="1" timelimit="5"><result status="valid" time="0.09" steps="241489"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.84" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.15" steps="143"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.85" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.14" steps="28491"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.86" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="62"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.87" expl="precondition" proved="true">
  <transf name="inline_all" proved="true" >
   <goal name="remove_products&#39;vc.87.0" expl="precondition" proved="true">
   <proof prover="1" timelimit="10"><result status="valid" time="0.32" steps="854361"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.88" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.07" steps="24770"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.89" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="remove_products&#39;vc.89.0" expl="precondition" proved="true">
   <transf name="inline_goal" proved="true" >
    <goal name="remove_products&#39;vc.89.0.0" expl="precondition" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="remove_products&#39;vc.89.0.0.0" expl="VC for remove_products" proved="true">
     <proof prover="1"><result status="valid" time="0.08" steps="174047"/></proof>
     </goal>
     <goal name="remove_products&#39;vc.89.0.0.1" expl="VC for remove_products" proved="true">
     <proof prover="1"><result status="valid" time="0.05" steps="11415"/></proof>
     </goal>
     <goal name="remove_products&#39;vc.89.0.0.2" expl="VC for remove_products" proved="true">
     <proof prover="0"><result status="valid" time="0.16" steps="133"/></proof>
     </goal>
     <goal name="remove_products&#39;vc.89.0.0.3" expl="VC for remove_products" proved="true">
     <proof prover="6"><result status="valid" time="0.30" steps="46895"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.90" expl="precondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="remove_products&#39;vc.90.0" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="remove_products&#39;vc.90.0.0" expl="precondition" proved="true">
    <proof prover="2"><result status="valid" time="0.18" steps="33597"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.90.0.1" expl="precondition" proved="true">
    <proof prover="1"><result status="valid" time="0.08" steps="157031"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.90.0.2" expl="precondition" proved="true">
    <proof prover="2"><result status="valid" time="0.05" steps="24775"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.90.0.3" expl="precondition" proved="true">
    <proof prover="1"><result status="valid" time="0.06" steps="164797"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.90.0.4" expl="precondition" proved="true">
    <proof prover="0" timelimit="5"><result status="valid" time="2.15" steps="523"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.91" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.14" steps="24826"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.92" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.06" steps="156937"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.93" expl="precondition" proved="true">
  <proof prover="5" timelimit="10"><result status="valid" time="0.02" steps="50"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.94" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.05" steps="22896"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.95" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.03" steps="50"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.96" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.06" steps="22902"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.97" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.06" steps="26525"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.98" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.05" steps="190461"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.99" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.03" steps="51"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.100" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.15" steps="22911"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.101" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.04" steps="134641"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.102" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.08" steps="28643"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.103" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.06" steps="26551"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.104" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.08" steps="22846"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.105" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.11" steps="28563"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.106" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.11" steps="28566"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.107" expl="postcondition" proved="true">
  <proof prover="0" timelimit="10"><result status="valid" time="0.62" steps="214"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="previously_marked_products_impl_prime&#39;vc" expl="VC for previously_marked_products_impl_prime" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="previously_marked_products_impl_prime&#39;vc.0" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="previously_marked_products_impl_prime&#39;vc.0.0" expl="assertion" proved="true">
   <transf name="inline_all" proved="true" >
    <goal name="previously_marked_products_impl_prime&#39;vc.0.0.0" expl="assertion" proved="true">
    <proof prover="1"><result status="valid" time="0.18" steps="459285"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="previously_marked_products_impl_prime&#39;vc.0.1" expl="VC for previously_marked_products_impl_prime" proved="true">
   <proof prover="5" timelimit="10"><result status="valid" time="0.59" steps="618"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="previously_marked_products_impl_prime&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="0" timelimit="10"><result status="valid" time="0.00" steps="14"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="only_products_marked_impl_not_marked&#39;vc" expl="VC for only_products_marked_impl_not_marked" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="only_products_marked_impl_not_marked&#39;vc.0" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.02" steps="33"/></proof>
  </goal>
  <goal name="only_products_marked_impl_not_marked&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.01" steps="27"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="EulerSieveImpl" proved="true">
 <goal name="conservation_inv_arr_on_mark&#39;vc" expl="VC for conservation_inv_arr_on_mark" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="conservation_inv_arr_on_mark&#39;vc.0" expl="assertion" proved="true">
  <proof prover="5"><result status="valid" time="0.19" steps="124"/></proof>
  </goal>
  <goal name="conservation_inv_arr_on_mark&#39;vc.1" expl="assertion" proved="true">
  <proof prover="5"><result status="valid" time="0.10" steps="116"/></proof>
  </goal>
  <goal name="conservation_inv_arr_on_mark&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="5"><result status="valid" time="0.78" steps="612"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="conservation_inv_arr_on_jump&#39;vc" expl="VC for conservation_inv_arr_on_jump" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="conservation_inv_arr_on_jump&#39;vc.0" expl="index in array bounds" proved="true">
  <proof prover="5"><result status="valid" time="0.01" steps="18"/></proof>
  </goal>
  <goal name="conservation_inv_arr_on_jump&#39;vc.1" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.02" steps="18"/></proof>
  </goal>
  <goal name="conservation_inv_arr_on_jump&#39;vc.2" expl="index in array bounds" proved="true">
  <proof prover="5"><result status="valid" time="0.01" steps="18"/></proof>
  </goal>
  <goal name="conservation_inv_arr_on_jump&#39;vc.3" expl="assertion" proved="true">
  <proof prover="5"><result status="valid" time="0.10" steps="73"/></proof>
  </goal>
  <goal name="conservation_inv_arr_on_jump&#39;vc.4" expl="assertion" proved="true">
  <proof prover="5"><result status="valid" time="0.10" steps="73"/></proof>
  </goal>
  <goal name="conservation_inv_arr_on_jump&#39;vc.5" expl="postcondition" proved="true">
  <proof prover="5" timelimit="10"><result status="valid" time="5.43" steps="2728"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="t&#39;vc" expl="VC for t" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="t&#39;vc.0" expl="array creation size" proved="true">
  <proof prover="2"><result status="valid" time="0.06" steps="21178"/></proof>
  </goal>
  <goal name="t&#39;vc.1" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.06" steps="21579"/></proof>
  </goal>
  <goal name="t&#39;vc.2" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.06" steps="22010"/></proof>
  </goal>
  <goal name="t&#39;vc.3" expl="type invariant" proved="true">
  <proof prover="5"><result status="valid" time="0.01" steps="24"/></proof>
  </goal>
  <goal name="t&#39;vc.4" expl="type invariant" proved="true">
  <proof prover="5"><result status="valid" time="0.01" steps="25"/></proof>
  </goal>
  <goal name="t&#39;vc.5" expl="type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.06" steps="22330"/></proof>
  </goal>
  <goal name="t&#39;vc.6" expl="type invariant" proved="true">
  <proof prover="5"><result status="valid" time="0.01" steps="28"/></proof>
  </goal>
  <goal name="t&#39;vc.7" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="112"/></proof>
  </goal>
  <goal name="t&#39;vc.8" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="75"/></proof>
  </goal>
  <goal name="t&#39;vc.9" expl="type invariant" proved="true">
  <proof prover="5"><result status="valid" time="0.01" steps="37"/></proof>
  </goal>
  <goal name="t&#39;vc.10" expl="type invariant" proved="true">
  <proof prover="5"><result status="valid" time="0.01" steps="35"/></proof>
  </goal>
  <goal name="t&#39;vc.11" expl="type invariant" proved="true">
  <proof prover="5"><result status="valid" time="0.01" steps="123"/></proof>
  </goal>
  <goal name="t&#39;vc.12" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.02" steps="31"/></proof>
  </goal>
  <goal name="t&#39;vc.13" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.29" steps="226"/></proof>
  </goal>
  <goal name="t&#39;vc.14" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.02" steps="86"/></proof>
  </goal>
  <goal name="t&#39;vc.15" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.02" steps="125"/></proof>
  </goal>
  <goal name="t&#39;vc.16" expl="type invariant" proved="true">
  <proof prover="5"><result status="valid" time="0.13" steps="217"/></proof>
  </goal>
  <goal name="t&#39;vc.17" expl="type invariant" proved="true">
  <proof prover="5"><result status="valid" time="0.06" steps="121"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="create&#39;vc" expl="VC for create" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="create&#39;vc.0" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.01" steps="8"/></proof>
  </goal>
  <goal name="create&#39;vc.1" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.02" steps="12"/></proof>
  </goal>
  <goal name="create&#39;vc.2" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.03" steps="14"/></proof>
  </goal>
  <goal name="create&#39;vc.3" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.06" steps="8"/></proof>
  </goal>
  <goal name="create&#39;vc.4" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.02" steps="18"/></proof>
  </goal>
  <goal name="create&#39;vc.5" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.03" steps="12"/></proof>
  </goal>
  <goal name="create&#39;vc.6" expl="precondition" proved="true">
  <transf name="unfold" proved="true" arg1="inv_marked_nexts">
   <goal name="create&#39;vc.6.0" expl="precondition" proved="true">
   <proof prover="5" timelimit="5"><result status="valid" time="0.02" steps="16"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="create&#39;vc.7" expl="array creation size" proved="true">
  <proof prover="5"><result status="valid" time="0.02" steps="16"/></proof>
  </goal>
  <goal name="create&#39;vc.8" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.02" steps="18"/></proof>
  </goal>
  <goal name="create&#39;vc.9" expl="precondition" proved="true">
  <proof prover="5" timelimit="5"><result status="valid" time="0.03" steps="18"/></proof>
  </goal>
  <goal name="create&#39;vc.10" expl="precondition" proved="true">
  <proof prover="5" timelimit="5"><result status="valid" time="0.02" steps="19"/></proof>
  </goal>
  <goal name="create&#39;vc.11" expl="precondition" proved="true">
  <transf name="unfold" proved="true" arg1="inv_marked_nexts">
   <goal name="create&#39;vc.11.0" expl="precondition" proved="true">
   <proof prover="5" timelimit="5"><result status="valid" time="0.03" steps="19"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="create&#39;vc.12" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="create&#39;vc.12.0" expl="precondition" proved="true">
   <transf name="inline_goal" proved="true" >
    <goal name="create&#39;vc.12.0.0" expl="precondition" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="create&#39;vc.12.0.0.0" expl="precondition" proved="true">
     <proof prover="5"><result status="valid" time="0.28" steps="133"/></proof>
     </goal>
     <goal name="create&#39;vc.12.0.0.1" expl="precondition" proved="true">
     <proof prover="5"><result status="valid" time="0.46" steps="302"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="create&#39;vc.13" expl="precondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="create&#39;vc.13.0" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="create&#39;vc.13.0.0" expl="precondition" proved="true">
    <proof prover="5"><result status="valid" time="0.02" steps="21"/></proof>
    </goal>
    <goal name="create&#39;vc.13.0.1" expl="precondition" proved="true">
    <proof prover="5"><result status="valid" time="0.33" steps="242"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="create&#39;vc.14" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.04" steps="31"/></proof>
  </goal>
  <goal name="create&#39;vc.15" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.06" steps="108"/></proof>
  </goal>
  <goal name="create&#39;vc.16" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.33" steps="250"/></proof>
  </goal>
  <goal name="create&#39;vc.17" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.43" steps="577"/></proof>
  </goal>
  <goal name="create&#39;vc.18" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="create&#39;vc.18.0" expl="precondition" proved="true">
   <proof prover="5"><result status="valid" time="0.43" steps="431"/></proof>
   </goal>
   <goal name="create&#39;vc.18.1" expl="precondition" proved="true">
   <proof prover="5" timelimit="5"><result status="valid" time="0.41" steps="364"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="create&#39;vc.19" expl="precondition" proved="true">
  <transf name="case" proved="true" arg1="(i=0)">
   <goal name="create&#39;vc.19.0" expl="true case (precondition)" proved="true">
   <transf name="assert" proved="true" arg1="(o[i] = 2*i+3)">
    <goal name="create&#39;vc.19.0.0" expl="asserted formula" proved="true">
    <proof prover="5" timelimit="5"><result status="valid" time="0.06" steps="137"/></proof>
    </goal>
    <goal name="create&#39;vc.19.0.1" expl="true case (precondition)" proved="true">
    <proof prover="1"><result status="valid" time="0.12" steps="199662"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="create&#39;vc.19.1" expl="false case (precondition)" proved="true">
   <transf name="case" proved="true" arg1="(2*i+1 = max)">
    <goal name="create&#39;vc.19.1.0" expl="false case (true case. precondition)" proved="true">
    <proof prover="5"><result status="valid" time="0.05" steps="40"/></proof>
    </goal>
    <goal name="create&#39;vc.19.1.1" expl="false case (precondition)" proved="true">
    <proof prover="5"><result status="valid" time="0.64" steps="656"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="create&#39;vc.20" expl="precondition" proved="true">
  <proof prover="5" timelimit="5"><result status="valid" time="0.51" steps="587"/></proof>
  </goal>
  <goal name="create&#39;vc.21" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="create&#39;vc.21.0" expl="precondition" proved="true">
   <proof prover="5" timelimit="5"><result status="valid" time="2.11" steps="1149"/></proof>
   </goal>
   <goal name="create&#39;vc.21.1" expl="precondition" proved="true">
   <proof prover="5"><result status="valid" time="0.19" steps="128"/></proof>
   </goal>
   <goal name="create&#39;vc.21.2" expl="precondition" proved="true">
   <proof prover="5"><result status="valid" time="0.08" steps="120"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="create&#39;vc.22" expl="precondition" proved="true">
  <proof prover="5" timelimit="5"><result status="valid" time="3.07" steps="1376"/></proof>
  </goal>
  <goal name="create&#39;vc.23" expl="postcondition" proved="true">
  <proof prover="5"><result status="valid" time="0.02" steps="36"/></proof>
  </goal>
  <goal name="create&#39;vc.24" expl="postcondition" proved="true">
  <proof prover="5"><result status="valid" time="0.14" steps="158"/></proof>
  </goal>
  <goal name="create&#39;vc.25" expl="postcondition" proved="true">
  <proof prover="5"><result status="valid" time="0.13" steps="134"/></proof>
  </goal>
  <goal name="create&#39;vc.26" expl="postcondition" proved="true">
  <proof prover="5"><result status="valid" time="0.09" steps="50"/></proof>
  </goal>
  <goal name="create&#39;vc.27" expl="postcondition" proved="true">
  <proof prover="5"><result status="valid" time="0.38" steps="314"/></proof>
  </goal>
  <goal name="create&#39;vc.28" expl="postcondition" proved="true">
  <proof prover="5"><result status="valid" time="0.41" steps="558"/></proof>
  </goal>
  <goal name="create&#39;vc.29" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="create&#39;vc.29.0" expl="postcondition" proved="true">
   <proof prover="5"><result status="valid" time="0.36" steps="276"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="set_next&#39;vc" expl="VC for set_next" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="set_next&#39;vc.0" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.03" steps="31"/></proof>
  </goal>
  <goal name="set_next&#39;vc.1" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.03" steps="33"/></proof>
  </goal>
  <goal name="set_next&#39;vc.2" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.03" steps="35"/></proof>
  </goal>
  <goal name="set_next&#39;vc.3" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.02" steps="25"/></proof>
  </goal>
  <goal name="set_next&#39;vc.4" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.03" steps="39"/></proof>
  </goal>
  <goal name="set_next&#39;vc.5" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.03" steps="45"/></proof>
  </goal>
  <goal name="set_next&#39;vc.6" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.01" steps="30"/></proof>
  </goal>
  <goal name="set_next&#39;vc.7" expl="index in array bounds" proved="true">
  <proof prover="5"><result status="valid" time="0.03" steps="33"/></proof>
  </goal>
  <goal name="set_next&#39;vc.8" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.03" steps="37"/></proof>
  </goal>
  <goal name="set_next&#39;vc.9" expl="type invariant" proved="true">
  <proof prover="5"><result status="valid" time="0.03" steps="41"/></proof>
  </goal>
  <goal name="set_next&#39;vc.10" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="57"/></proof>
  </goal>
  <goal name="set_next&#39;vc.11" expl="type invariant" proved="true">
  <proof prover="2"><result status="valid" time="1.07" steps="191266"/></proof>
  <proof prover="5"><result status="valid" time="0.03" steps="47"/></proof>
  </goal>
  <goal name="set_next&#39;vc.12" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="32"/></proof>
  <proof prover="5"><result status="valid" time="0.03" steps="49"/></proof>
  </goal>
  <goal name="set_next&#39;vc.13" expl="type invariant" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="set_next&#39;vc.13.0" expl="type invariant" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="set_next&#39;vc.13.0.0" expl="type invariant" proved="true">
    <proof prover="0"><result status="valid" time="0.20" steps="99"/></proof>
    </goal>
    <goal name="set_next&#39;vc.13.0.1" expl="type invariant" proved="true">
    <proof prover="0"><result status="valid" time="0.19" steps="95"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="set_next&#39;vc.14" expl="type invariant" proved="true">
  <proof prover="5"><result status="valid" time="0.05" steps="53"/></proof>
  </goal>
  <goal name="set_next&#39;vc.15" expl="type invariant" proved="true">
  <proof prover="5"><result status="valid" time="0.05" steps="61"/></proof>
  </goal>
  <goal name="set_next&#39;vc.16" expl="type invariant" proved="true">
  <proof prover="5"><result status="valid" time="0.65" steps="742"/></proof>
  </goal>
  <goal name="set_next&#39;vc.17" expl="type invariant" proved="true">
  <proof prover="5"><result status="valid" time="0.42" steps="362"/></proof>
  </goal>
  <goal name="set_next&#39;vc.18" expl="type invariant" proved="true">
  <proof prover="0" timelimit="5"><result status="valid" time="5.86" steps="2438"/></proof>
  </goal>
  <goal name="set_next&#39;vc.19" expl="type invariant" proved="true">
  <proof prover="5" timelimit="5"><result status="valid" time="1.84" steps="2011"/></proof>
  </goal>
  <goal name="set_next&#39;vc.20" expl="type invariant" proved="true">
  <proof prover="5" timelimit="5"><result status="valid" time="2.71" steps="2591"/></proof>
  </goal>
  <goal name="set_next&#39;vc.21" expl="type invariant" proved="true">
  <proof prover="5" timelimit="5"><result status="valid" time="2.58" steps="4820"/></proof>
  </goal>
  <goal name="set_next&#39;vc.22" expl="type invariant" proved="true">
  <proof prover="6"><result status="valid" time="0.28" steps="37961"/></proof>
  </goal>
  <goal name="set_next&#39;vc.23" expl="type invariant" proved="true">
  <proof prover="6"><result status="valid" time="0.17" steps="39056"/></proof>
  </goal>
  <goal name="set_next&#39;vc.24" expl="postcondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="set_next&#39;vc.24.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="set_next&#39;vc.24.0.0" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.07" steps="24356"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="get_next&#39;vc" expl="VC for get_next" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="get_next&#39;vc.0" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.02" steps="22"/></proof>
  </goal>
  <goal name="get_next&#39;vc.1" expl="index in array bounds" proved="true">
  <proof prover="5"><result status="valid" time="0.03" steps="24"/></proof>
  </goal>
  <goal name="get_next&#39;vc.2" expl="index in array bounds" proved="true">
  <proof prover="5"><result status="valid" time="0.03" steps="26"/></proof>
  </goal>
  <goal name="get_next&#39;vc.3" expl="index in array bounds" proved="true">
  <proof prover="5"><result status="valid" time="0.03" steps="26"/></proof>
  </goal>
  <goal name="get_next&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="5"><result status="valid" time="0.50" steps="361"/></proof>
  </goal>
  <goal name="get_next&#39;vc.5" expl="postcondition" proved="true">
  <proof prover="5"><result status="valid" time="0.06" steps="105"/></proof>
  </goal>
  <goal name="get_next&#39;vc.6" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="(i &gt;= 3)">
   <goal name="get_next&#39;vc.6.0" expl="asserted formula" proved="true">
   <proof prover="5"><result status="valid" time="0.02" steps="28"/></proof>
   </goal>
   <goal name="get_next&#39;vc.6.1" expl="postcondition" proved="true">
   <transf name="case" proved="true" arg1="(i &lt; max t - 1)">
    <goal name="get_next&#39;vc.6.1.0" expl="true case (postcondition)" proved="true">
    <proof prover="5"><result status="valid" time="0.05" steps="36"/></proof>
    </goal>
    <goal name="get_next&#39;vc.6.1.1" expl="false case (postcondition)" proved="true">
    <transf name="case" proved="true" arg1="(i = max t)">
     <goal name="get_next&#39;vc.6.1.1.0" expl="false case (true case. postcondition)" proved="true">
     <proof prover="5"><result status="valid" time="0.07" steps="38"/></proof>
     </goal>
     <goal name="get_next&#39;vc.6.1.1.1" expl="false case (postcondition)" proved="true">
     <proof prover="5"><result status="valid" time="0.05" steps="38"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="set_mark&#39;vc" expl="VC for set_mark" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="set_mark&#39;vc.0" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.02" steps="22"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.1" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.02" steps="24"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.2" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.03" steps="26"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.3" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.02" steps="28"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.4" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.03" steps="30"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.5" expl="index in array bounds" proved="true">
  <proof prover="5"><result status="valid" time="0.06" steps="26"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.6" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.05" steps="36"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.7" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.11" steps="134"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.8" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.06" steps="28"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.9" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.03" steps="29"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.10" expl="index in array bounds" proved="true">
  <proof prover="5"><result status="valid" time="0.04" steps="28"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.11" expl="index in array bounds" proved="true">
  <proof prover="0" timelimit="10"><result status="valid" time="0.03" steps="24"/></proof>
  <proof prover="5"><result status="valid" time="0.04" steps="28"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.12" expl="precondition" proved="true">
  <proof prover="0" timelimit="10"><result status="valid" time="0.02" steps="25"/></proof>
  <proof prover="5"><result status="valid" time="0.05" steps="32"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.13" expl="type invariant" proved="true">
  <proof prover="0" timelimit="10"><result status="valid" time="0.03" steps="26"/></proof>
  <proof prover="5"><result status="valid" time="0.04" steps="36"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.14" expl="type invariant" proved="true">
  <proof prover="0" timelimit="10"><result status="valid" time="0.03" steps="54"/></proof>
  <proof prover="5"><result status="valid" time="0.06" steps="86"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.15" expl="type invariant" proved="true">
  <proof prover="5"><result status="valid" time="0.04" steps="42"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.16" expl="type invariant" proved="true">
  <proof prover="0" timelimit="10"><result status="valid" time="0.03" steps="31"/></proof>
  <proof prover="5"><result status="valid" time="0.07" steps="44"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.17" expl="type invariant" proved="true">
  <proof prover="0" timelimit="10"><result status="valid" time="0.03" steps="29"/></proof>
  <proof prover="5"><result status="valid" time="0.05" steps="46"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.18" expl="type invariant" proved="true">
  <transf name="inline_all" proved="true" >
   <goal name="set_mark&#39;vc.18.0" expl="type invariant" proved="true">
   <proof prover="1" timelimit="10"><result status="valid" time="1.14" steps="1831362"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="set_mark&#39;vc.19" expl="type invariant" proved="true">
  <proof prover="5"><result status="valid" time="0.45" steps="171"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.20" expl="type invariant" proved="true">
  <proof prover="5"><result status="valid" time="0.05" steps="58"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.21" expl="type invariant" proved="true">
  <proof prover="5"><result status="valid" time="0.05" steps="49"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.22" expl="type invariant" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="set_mark&#39;vc.22.0" expl="type invariant" proved="true">
   <proof prover="0" timelimit="5"><result status="valid" time="4.06" steps="1053"/></proof>
   </goal>
   <goal name="set_mark&#39;vc.22.1" expl="type invariant" proved="true">
   <proof prover="0" timelimit="5"><result status="valid" time="5.17" steps="1256"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="set_mark&#39;vc.23" expl="type invariant" proved="true">
  <proof prover="5" timelimit="5"><result status="valid" time="2.42" steps="1456"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.24" expl="type invariant" proved="true">
  <proof prover="5" timelimit="5"><result status="valid" time="5.93" steps="4514"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.25" expl="type invariant" proved="true">
  <proof prover="5" timelimit="5"><result status="valid" time="5.45" steps="3112"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.26" expl="type invariant" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="set_mark&#39;vc.26.0" expl="type invariant" proved="true">
   <proof prover="5" timelimit="5"><result status="valid" time="2.49" steps="1003"/></proof>
   </goal>
   <goal name="set_mark&#39;vc.26.1" expl="type invariant" proved="true">
   <proof prover="5"><result status="valid" time="0.19" steps="179"/></proof>
   </goal>
   <goal name="set_mark&#39;vc.26.2" expl="type invariant" proved="true">
   <proof prover="5"><result status="valid" time="0.14" steps="160"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="set_mark&#39;vc.27" expl="type invariant" proved="true">
  <proof prover="5"><result status="valid" time="0.09" steps="62"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.28" expl="postcondition" proved="true">
  <proof prover="5"><result status="valid" time="0.03" steps="44"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.29" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.03" steps="28"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.30" expl="type invariant" proved="true">
  <proof prover="5"><result status="valid" time="0.05" steps="32"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.31" expl="type invariant" proved="true">
  <proof prover="0" timelimit="10"><result status="valid" time="0.03" steps="46"/></proof>
  <proof prover="5"><result status="valid" time="0.07" steps="76"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.32" expl="type invariant" proved="true">
  <proof prover="5"><result status="valid" time="0.05" steps="38"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.33" expl="type invariant" proved="true">
  <proof prover="0" timelimit="10"><result status="valid" time="0.03" steps="30"/></proof>
  <proof prover="5"><result status="valid" time="0.08" steps="40"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.34" expl="type invariant" proved="true">
  <proof prover="0" timelimit="10"><result status="valid" time="0.03" steps="27"/></proof>
  <proof prover="5"><result status="valid" time="0.04" steps="42"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.35" expl="type invariant" proved="true">
  <proof prover="5"><result status="valid" time="0.05" steps="44"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.36" expl="type invariant" proved="true">
  <proof prover="5"><result status="valid" time="0.47" steps="157"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.37" expl="type invariant" proved="true">
  <proof prover="5"><result status="valid" time="0.05" steps="54"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.38" expl="type invariant" proved="true">
  <proof prover="5"><result status="valid" time="0.05" steps="45"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.39" expl="type invariant" proved="true">
  <proof prover="5"><result status="valid" time="0.08" steps="53"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.40" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.15" steps="74"/></proof>
  <proof prover="5"><result status="valid" time="0.37" steps="289"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.41" expl="type invariant" proved="true">
  <proof prover="0" timelimit="10"><result status="valid" time="0.13" steps="52"/></proof>
  <proof prover="5"><result status="valid" time="0.07" steps="56"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.42" expl="type invariant" proved="true">
  <proof prover="0" timelimit="10"><result status="valid" time="0.10" steps="52"/></proof>
  <proof prover="5"><result status="valid" time="0.06" steps="56"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.43" expl="type invariant" proved="true">
  <proof prover="5" timelimit="5"><result status="valid" time="0.09" steps="53"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.44" expl="type invariant" proved="true">
  <proof prover="5"><result status="valid" time="0.10" steps="58"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.45" expl="postcondition" proved="true">
  <proof prover="0" timelimit="10"><result status="valid" time="0.03" steps="21"/></proof>
  <proof prover="5"><result status="valid" time="0.02" steps="40"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="get_mark&#39;vc" expl="VC for get_mark" proved="true">
 <proof prover="0"><result status="valid" time="0.55" steps="205"/></proof>
 </goal>
 <goal name="get_max&#39;vc" expl="VC for get_max" proved="true">
 <proof prover="5"><result status="valid" time="0.02" steps="20"/></proof>
 </goal>
 <goal name="EulerSieve.t&#39;vc" expl="VC for t" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="t&#39;vc.0" expl="VC for t" proved="true">
  <proof prover="5"><result status="valid" time="0.02" steps="8"/></proof>
  </goal>
  <goal name="t&#39;vc.1" expl="VC for t" proved="true">
  <proof prover="1"><result status="valid" time="0.05" steps="180126"/></proof>
  <proof prover="5"><result status="valid" time="0.03" steps="8"/></proof>
  </goal>
  <goal name="t&#39;vc.2" expl="VC for t" proved="true">
  <proof prover="1"><result status="valid" time="0.05" steps="157371"/></proof>
  <proof prover="5"><result status="valid" time="0.02" steps="8"/></proof>
  </goal>
  <goal name="t&#39;vc.3" expl="VC for t" proved="true">
  <proof prover="1"><result status="valid" time="0.05" steps="158269"/></proof>
  <proof prover="5"><result status="valid" time="0.02" steps="8"/></proof>
  </goal>
  <goal name="t&#39;vc.4" expl="VC for t" proved="true">
  <proof prover="1"><result status="valid" time="0.05" steps="135782"/></proof>
  <proof prover="5"><result status="valid" time="0.01" steps="8"/></proof>
  </goal>
  <goal name="t&#39;vc.5" expl="VC for t" proved="true">
  <proof prover="5"><result status="valid" time="0.02" steps="14"/></proof>
  </goal>
  <goal name="t&#39;vc.6" expl="VC for t" proved="true">
  <proof prover="5"><result status="valid" time="0.03" steps="16"/></proof>
  </goal>
  <goal name="t&#39;vc.7" expl="VC for t" proved="true">
  <proof prover="5"><result status="valid" time="0.02" steps="8"/></proof>
  </goal>
  <goal name="t&#39;vc.8" expl="VC for t" proved="true">
  <proof prover="5"><result status="valid" time="0.02" steps="10"/></proof>
  </goal>
  <goal name="t&#39;vc.9" expl="VC for t" proved="true">
  <proof prover="5"><result status="valid" time="0.02" steps="10"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="EulerSieve.create&#39;refn&#39;vc" expl="VC for create&#39;refn" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="create&#39;refn&#39;vc.0" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.02" steps="8"/></proof>
  </goal>
  <goal name="create&#39;refn&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="5"><result status="valid" time="0.02" steps="26"/></proof>
  </goal>
  <goal name="create&#39;refn&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="5"><result status="valid" time="0.01" steps="26"/></proof>
  </goal>
  <goal name="create&#39;refn&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="5"><result status="valid" time="0.03" steps="32"/></proof>
  </goal>
  <goal name="create&#39;refn&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="5"><result status="valid" time="0.05" steps="82"/></proof>
  </goal>
  <goal name="create&#39;refn&#39;vc.5" expl="postcondition" proved="true">
  <proof prover="5"><result status="valid" time="0.05" steps="82"/></proof>
  </goal>
  <goal name="create&#39;refn&#39;vc.6" expl="postcondition" proved="true">
  <proof prover="5"><result status="valid" time="0.02" steps="36"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="EulerSieve.set_next&#39;refn&#39;vc" expl="VC for set_next&#39;refn" proved="true">
 <proof prover="5"><result status="valid" time="0.08" steps="145"/></proof>
 </goal>
 <goal name="EulerSieve.get_next&#39;refn&#39;vc" expl="VC for get_next&#39;refn" proved="true">
 <proof prover="5"><result status="valid" time="0.01" steps="22"/></proof>
 </goal>
 <goal name="EulerSieve.set_mark&#39;refn&#39;vc" expl="VC for set_mark&#39;refn" proved="true">
 <proof prover="1"><result status="valid" time="0.05" steps="160700"/></proof>
 <proof prover="5"><result status="valid" time="0.03" steps="36"/></proof>
 </goal>
 <goal name="EulerSieve.get_mark&#39;refn&#39;vc" expl="VC for get_mark&#39;refn" proved="true">
 <proof prover="2"><result status="valid" time="0.07" steps="27105"/></proof>
 <proof prover="5"><result status="valid" time="0.02" steps="22"/></proof>
 </goal>
 <goal name="EulerSieve.get_max&#39;refn&#39;vc" expl="VC for get_max&#39;refn" proved="true">
 <proof prover="2"><result status="valid" time="0.07" steps="25113"/></proof>
 <proof prover="5"><result status="valid" time="0.02" steps="16"/></proof>
 </goal>
 <goal name="unchanged_other_elements_arr&#39;vc" expl="VC for unchanged_other_elements_arr" proved="true">
 <proof prover="5" timelimit="5"><result status="valid" time="0.03" steps="45"/></proof>
 </goal>
 <goal name="euler_sieve&#39;vc" expl="VC for euler_sieve" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="euler_sieve&#39;vc.0" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.03" steps="8"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.1" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.02" steps="52"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.2" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.15" steps="27553"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.3" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.15" steps="27556"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.4" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.06" steps="11551"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.5" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.11" steps="27562"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.6" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.10" steps="30021"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.7" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.22" steps="212"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.8" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="0.07" steps="188807"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.9" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="euler_sieve&#39;vc.9.0" expl="precondition" proved="true">
   <proof prover="5"><result status="valid" time="0.02" steps="60"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.9.1" expl="precondition" proved="true">
   <proof prover="5"><result status="valid" time="0.06" steps="63"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.9.2" expl="precondition" proved="true">
   <proof prover="0" timelimit="10"><result status="valid" time="3.82" steps="386"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.10" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.10" steps="30624"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.11" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="euler_sieve&#39;vc.11.0" expl="assertion" proved="true">
   <proof prover="1" timelimit="10"><result status="valid" time="0.05" steps="238011"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.11.1" expl="VC for euler_sieve" proved="true">
   <proof prover="0" timelimit="5"><result status="timeout" time="5.00"/></proof>
   <proof prover="1" timelimit="10"><result status="timeout" time="10.00" steps="12106383"/></proof>
   <proof prover="2" timelimit="5"><result status="valid" time="0.68" steps="73759"/></proof>
   <proof prover="5" timelimit="5"><result status="timeout" time="5.00"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.11.2" expl="VC for euler_sieve" proved="true">
   <proof prover="3" timelimit="5"><result status="valid" time="3.54"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.12" expl="variant decrease" proved="true">
  <proof prover="1"><result status="valid" time="0.07" steps="210120"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.13" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.08" steps="188473"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.14" expl="precondition" proved="true">
  <proof prover="0" timelimit="10"><result status="valid" time="0.02" steps="44"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.15" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.10" steps="30713"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.16" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.10" steps="30725"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.17" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="euler_sieve&#39;vc.17.0" expl="precondition" proved="true">
   <transf name="inline_goal" proved="true" >
    <goal name="euler_sieve&#39;vc.17.0.0" expl="precondition" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="euler_sieve&#39;vc.17.0.0.0" expl="VC for euler_sieve" proved="true">
     <transf name="inline_goal" proved="true" >
      <goal name="euler_sieve&#39;vc.17.0.0.0.0" expl="VC for euler_sieve" proved="true">
      <transf name="split_all_full" proved="true" >
       <goal name="euler_sieve&#39;vc.17.0.0.0.0.0" expl="VC for euler_sieve" proved="true">
       <proof prover="3"><result status="valid" time="0.04"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="euler_sieve&#39;vc.17.0.0.1" expl="VC for euler_sieve" proved="true">
     <proof prover="5"><result status="valid" time="0.09" steps="70"/></proof>
     </goal>
     <goal name="euler_sieve&#39;vc.17.0.0.2" expl="VC for euler_sieve" proved="true">
     <proof prover="2"><result status="valid" time="0.14" steps="35240"/></proof>
     </goal>
     <goal name="euler_sieve&#39;vc.17.0.0.3" expl="VC for euler_sieve" proved="true">
     <proof prover="5" timelimit="5"><result status="valid" time="2.35" steps="280"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.18" expl="precondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="euler_sieve&#39;vc.18.0" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="euler_sieve&#39;vc.18.0.0" expl="precondition" proved="true">
    <proof prover="5"><result status="valid" time="0.09" steps="71"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.18.0.1" expl="precondition" proved="true">
    <proof prover="5"><result status="valid" time="0.08" steps="71"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.18.0.2" expl="precondition" proved="true">
    <transf name="inline_goal" proved="true" >
     <goal name="euler_sieve&#39;vc.18.0.2.0" expl="precondition" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="euler_sieve&#39;vc.18.0.2.0.0" expl="precondition" proved="true">
      <proof prover="1" timelimit="5"><result status="valid" time="0.25" steps="386105"/></proof>
      </goal>
      <goal name="euler_sieve&#39;vc.18.0.2.0.1" expl="precondition" proved="true">
      <proof prover="0" timelimit="5"><result status="valid" time="3.55" steps="328"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="euler_sieve&#39;vc.18.0.3" expl="precondition" proved="true">
    <proof prover="5" timelimit="10"><result status="valid" time="0.02" steps="67"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.18.0.4" expl="precondition" proved="true">
    <proof prover="0" timelimit="10"><result status="valid" time="4.62" steps="355"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.18.0.5" expl="precondition" proved="true">
    <proof prover="5"><result status="valid" time="0.09" steps="71"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.19" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.15" steps="92"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.20" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.07" steps="171622"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.21" expl="assertion" proved="true">
  <transf name="inline_all" proved="true" >
   <goal name="euler_sieve&#39;vc.21.0" expl="assertion" proved="true">
   <proof prover="3"><result status="valid" time="13.01"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.22" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.09" steps="174622"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.23" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="euler_sieve&#39;vc.23.0" expl="assertion" proved="true">
   <proof prover="5"><result status="valid" time="0.09" steps="73"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.23.1" expl="assertion" proved="true">
   <proof prover="5"><result status="valid" time="0.32" steps="356"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.23.2" expl="assertion" proved="true">
   <proof prover="5"><result status="valid" time="0.64" steps="258"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.23.3" expl="VC for euler_sieve" proved="true">
   <proof prover="5"><result status="valid" time="0.49" steps="258"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.23.4" expl="VC for euler_sieve" proved="true">
   <proof prover="5"><result status="valid" time="0.05" steps="83"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.23.5" expl="VC for euler_sieve" proved="true">
   <proof prover="0" timelimit="5" obsolete="true"><result status="timeout" time="5.00"/></proof>
   <proof prover="1" timelimit="5" obsolete="true"><result status="timeout" time="5.00" steps="8740713"/></proof>
   <proof prover="2" timelimit="5" obsolete="true"><result status="timeout" time="5.00" steps="393601"/></proof>
   <proof prover="3"><result status="valid" time="1.24"/></proof>
   <proof prover="4" obsolete="true"><result status="timeout" time="5.00"/></proof>
   <proof prover="5" timelimit="5" obsolete="true"><result status="timeout" time="5.00"/></proof>
   <proof prover="6" obsolete="true"><result status="timeout" time="5.00" steps="246754"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.23.6" expl="VC for euler_sieve" proved="true">
   <proof prover="5"><result status="valid" time="0.28" steps="243"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.24" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="euler_sieve&#39;vc.24.0" expl="postcondition" proved="true">
   <proof prover="0" timelimit="10"><result status="valid" time="0.17" steps="117"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.24.1" expl="postcondition" proved="true">
   <transf name="assert" proved="true" arg1="(forall j k. 2 &lt;= j &lt; get1 (nexts t) n -&gt; 2 &lt;= k &lt; length1 (marked t) -&gt; j * k &lt;&gt; i)">
    <goal name="euler_sieve&#39;vc.24.1.0" expl="asserted formula" proved="true">
    <proof prover="5" timelimit="5"><result status="valid" time="0.38" steps="235"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.24.1.1" expl="postcondition" proved="true">
    <proof prover="0" timelimit="5"><result status="valid" time="0.03" steps="78"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.25" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.03" steps="28"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.26" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.03" steps="29"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.27" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.16" steps="132"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.28" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.50" steps="359"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.29" expl="precondition" proved="true">
  <proof prover="5" timelimit="5"><result status="valid" time="3.05" steps="2029"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.30" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="83"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.31" expl="assertion" proved="true">
  <proof prover="5" timelimit="5"><result status="valid" time="0.07" steps="170"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.32" expl="assertion" proved="true">
  <transf name="case" proved="true" arg1="(mod i 2 = 0)">
   <goal name="euler_sieve&#39;vc.32.0" expl="true case (assertion)" proved="true">
   <proof prover="5"><result status="valid" time="0.04" steps="52"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.32.1" expl="false case (assertion)" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="euler_sieve&#39;vc.32.1.0" expl="VC for euler_sieve" proved="true">
    <proof prover="5"><result status="valid" time="0.06" steps="54"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.32.1.1" expl="VC for euler_sieve" proved="true">
    <proof prover="5"><result status="valid" time="0.06" steps="56"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.32.1.2" expl="VC for euler_sieve" proved="true">
    <proof prover="5" timelimit="10"><result status="valid" time="0.80" steps="906"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.33" expl="assertion" proved="true">
  <proof prover="5" timelimit="5"><result status="valid" time="0.34" steps="249"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.34" expl="index in array bounds" proved="true">
  <proof prover="5"><result status="valid" time="0.03" steps="42"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.35" expl="loop invariant init" proved="true">
  <proof prover="5"><result status="valid" time="0.03" steps="46"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.36" expl="loop invariant init" proved="true">
  <proof prover="5"><result status="valid" time="0.02" steps="47"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.37" expl="loop invariant init" proved="true">
  <proof prover="5"><result status="valid" time="0.12" steps="176"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.38" expl="loop invariant init" proved="true">
  <proof prover="5"><result status="valid" time="0.03" steps="49"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.39" expl="loop invariant init" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="euler_sieve&#39;vc.39.0" expl="loop invariant init" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="euler_sieve&#39;vc.39.0.0" expl="loop invariant init" proved="true">
    <transf name="assert" proved="true" arg1="(forall i. 1 &lt;= i &lt; length (arr t)[0 &lt;- 2] -&gt; (arr t)[i] = (arr t)[0 &lt;- 2][i])">
     <goal name="euler_sieve&#39;vc.39.0.0.0" expl="asserted formula" proved="true">
     <proof prover="5"><result status="valid" time="0.03" steps="44"/></proof>
     </goal>
     <goal name="euler_sieve&#39;vc.39.0.0.1" expl="loop invariant init" proved="true">
     <proof prover="5"><result status="valid" time="0.42" steps="134"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="euler_sieve&#39;vc.39.0.1" expl="loop invariant init" proved="true">
    <proof prover="0" timelimit="5"><result status="valid" time="0.38" steps="140"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.39.0.2" expl="loop invariant init" proved="true">
    <transf name="assert" proved="true" arg1="(forall i. 1 &lt;= i &lt; length (arr t)[0 &lt;- 2] -&gt; (arr t)[i] = (arr t)[0 &lt;- 2][i])">
     <goal name="euler_sieve&#39;vc.39.0.2.0" expl="asserted formula" proved="true">
     <proof prover="5"><result status="valid" time="0.09" steps="48"/></proof>
     </goal>
     <goal name="euler_sieve&#39;vc.39.0.2.1" expl="loop invariant init" proved="true">
     <proof prover="5" timelimit="5"><result status="valid" time="1.01" steps="560"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="euler_sieve&#39;vc.39.0.3" expl="loop invariant init" proved="true">
    <proof prover="5" timelimit="5"><result status="valid" time="0.44" steps="353"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.40" expl="loop invariant init" proved="true">
  <proof prover="5"><result status="valid" time="0.06" steps="120"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.41" expl="loop invariant init" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="euler_sieve&#39;vc.41.0" expl="loop invariant init" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="euler_sieve&#39;vc.41.0.0" expl="loop invariant init" proved="true">
    <proof prover="5"><result status="valid" time="0.02" steps="44"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.42" expl="loop invariant init" proved="true">
  <proof prover="5"><result status="valid" time="0.06" steps="172"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.43" expl="loop invariant init" proved="true">
  <proof prover="5"><result status="valid" time="0.04" steps="62"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.44" expl="loop invariant init" proved="true">
  <proof prover="5"><result status="valid" time="0.09" steps="157"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.45" expl="index in array bounds" proved="true">
  <proof prover="5"><result status="valid" time="0.04" steps="68"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.46" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.03" steps="66"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.47" expl="assertion" proved="true">
  <proof prover="5"><result status="valid" time="0.04" steps="70"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.48" expl="index in array bounds" proved="true">
  <proof prover="5"><result status="valid" time="0.05" steps="72"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.49" expl="index in array bounds" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="euler_sieve&#39;vc.49.0" expl="index in array bounds" proved="true">
   <proof prover="5"><result status="valid" time="0.01" steps="56"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.49.1" expl="index in array bounds" proved="true">
   <transf name="assert" proved="true" arg1="(forall i. cnt &lt;= i &lt; length (arr t) -&gt; i &lt; div (abs (arr t)[i]) 2 &lt;= length (arr t))">
    <goal name="euler_sieve&#39;vc.49.1.0" expl="asserted formula" proved="true">
    <proof prover="5"><result status="valid" time="0.20" steps="219"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.49.1.1" expl="index in array bounds" proved="true">
    <proof prover="5"><result status="valid" time="0.04" steps="58"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.50" expl="index in array bounds" proved="true">
  <proof prover="5"><result status="valid" time="0.06" steps="74"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.51" expl="index in array bounds" proved="true">
  <proof prover="5"><result status="valid" time="0.10" steps="78"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.52" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.08" steps="78"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.53" expl="precondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="euler_sieve&#39;vc.53.0" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="euler_sieve&#39;vc.53.0.0" expl="precondition" proved="true">
    <proof prover="5"><result status="valid" time="0.03" steps="178"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.54" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="euler_sieve&#39;vc.54.0" expl="assertion" proved="true">
   <proof prover="5"><result status="timeout" time="1.00"/></proof>
   <transf name="unfold" proved="true" arg1="inv_count" arg2="in" arg3="LoopInvariant5">
    <goal name="euler_sieve&#39;vc.54.0.0" expl="assertion" proved="true">
    <transf name="instantiate" proved="true" arg1="LoopInvariant5" arg2="p">
     <goal name="euler_sieve&#39;vc.54.0.0.0" expl="assertion" proved="true">
     <transf name="instantiate" proved="true" arg1="LoopInvariant5" arg2="next">
      <goal name="euler_sieve&#39;vc.54.0.0.0.0" expl="assertion" proved="true">
      <proof prover="0" timelimit="5"><result status="valid" time="1.22" steps="325"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="euler_sieve&#39;vc.54.1" expl="assertion">
   <proof prover="1"><result status="valid" time="0.08" steps="282314"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.54.2" expl="assertion">
   <proof prover="1"><result status="valid" time="0.08" steps="237444"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.54.0" expl="assertion">
   <proof prover="1"><result status="valid" time="0.08" steps="270805"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.54.1" expl="VC for euler_sieve">
   <transf name="unfold" arg1="inv_count" arg2="in" arg3="LoopInvariant5">
    <goal name="euler_sieve&#39;vc.54.1.0" expl="VC for euler_sieve">
    <transf name="instantiate" arg1="LoopInvariant5" arg2="p">
     <goal name="euler_sieve&#39;vc.54.1.0.0" expl="VC for euler_sieve">
     <transf name="instantiate" arg1="LoopInvariant5" arg2="next">
      <goal name="euler_sieve&#39;vc.54.1.0.0.0" expl="VC for euler_sieve">
      <proof prover="0" timelimit="5"><result status="valid" time="0.81" steps="275"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="euler_sieve&#39;vc.54.4" expl="VC for euler_sieve">
   <proof prover="1" timelimit="5"><result status="valid" time="0.06" steps="268767"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.51.0" expl="assertion">
   <proof prover="5"><result status="valid" time="0.11" steps="68"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.55" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="euler_sieve&#39;vc.55.0" expl="assertion" proved="true">
   <proof prover="5" timelimit="5"><result status="valid" time="0.06" steps="62"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.55.1" expl="assertion" proved="true">
   <proof prover="5" timelimit="5"><result status="valid" time="1.41" steps="472"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.55.2" expl="assertion" proved="true">
   <proof prover="0" timelimit="5"><result status="valid" time="1.46" steps="356"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.56" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.03" steps="82"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.57" expl="precondition" proved="true">
  <proof prover="1" timelimit="5"><result status="valid" time="0.06" steps="261314"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.58" expl="precondition" proved="true">
  <proof prover="5" timelimit="5"><result status="valid" time="2.37" steps="298"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.59" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.09" steps="85"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.60" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.09" steps="87"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.61" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.02" steps="88"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.62" expl="assertion" proved="true">
  <proof prover="5" timelimit="5"><result status="valid" time="0.57" steps="235"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.63" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="euler_sieve&#39;vc.63.0" expl="assertion" proved="true">
   <proof prover="1" timelimit="10"><result status="valid" time="0.07" steps="246508"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.63.1" expl="assertion" proved="true">
   <proof prover="1" timelimit="5"><result status="valid" time="0.07" steps="240278"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.11.1" expl="assertion">
   <proof prover="5"><result status="valid" time="0.02" steps="66"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.11.2" expl="VC for euler_sieve">
   <proof prover="3" timelimit="5"><result status="valid" time="5.85"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.11.2" expl="VC for euler_sieve">
   <proof prover="5"><result status="valid" time="0.05" steps="70"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.11.3" expl="VC for euler_sieve">
   <proof prover="5"><result status="valid" time="0.03" steps="67"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.64" expl="loop variant decrease" proved="true">
  <proof prover="5" timelimit="5"><result status="valid" time="0.13" steps="89"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.65" expl="loop invariant preservation" proved="true">
  <proof prover="5"><result status="valid" time="0.03" steps="86"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.66" expl="loop invariant preservation" proved="true">
  <proof prover="1"><result status="valid" time="0.08" steps="19351"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.67" expl="loop invariant preservation" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="euler_sieve&#39;vc.67.0" expl="loop invariant preservation" proved="true">
   <proof prover="5"><result status="valid" time="0.06" steps="70"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.68" expl="loop invariant preservation" proved="true">
  <proof prover="5"><result status="valid" time="0.04" steps="87"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.69" expl="loop invariant preservation" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="euler_sieve&#39;vc.69.0" expl="loop invariant preservation" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="euler_sieve&#39;vc.69.0.0" expl="loop invariant preservation" proved="true">
    <transf name="case" proved="true" arg1="(i &lt;&gt; p)">
     <goal name="euler_sieve&#39;vc.69.0.0.0" expl="true case (loop invariant preservation)" proved="true">
     <proof prover="5" timelimit="5"><result status="valid" time="2.36" steps="259"/></proof>
     </goal>
     <goal name="euler_sieve&#39;vc.69.0.0.1" expl="false case (loop invariant preservation)" proved="true">
     <proof prover="0" timelimit="10"><result status="valid" time="5.20" steps="287"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="euler_sieve&#39;vc.69.0.1" expl="loop invariant preservation" proved="true">
    <transf name="case" proved="true" arg1="(i &lt;&gt; p)">
     <goal name="euler_sieve&#39;vc.69.0.1.0" expl="true case (loop invariant preservation)" proved="true">
     <proof prover="5" timelimit="5"><result status="valid" time="1.91" steps="254"/></proof>
     </goal>
     <goal name="euler_sieve&#39;vc.69.0.1.1" expl="false case (loop invariant preservation)" proved="true">
     <proof prover="5" timelimit="10"><result status="valid" time="1.72" steps="257"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="euler_sieve&#39;vc.69.0.2" expl="loop invariant preservation" proved="true">
    <proof prover="5"><result status="valid" time="0.11" steps="81"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.69.0.3" expl="loop invariant preservation" proved="true">
    <transf name="case" proved="true" arg1="(i &lt;&gt; p)">
     <goal name="euler_sieve&#39;vc.69.0.3.0" expl="true case (loop invariant preservation)" proved="true">
     <proof prover="4"><result status="valid" time="2.06"/></proof>
     </goal>
     <goal name="euler_sieve&#39;vc.69.0.3.1" expl="false case (loop invariant preservation)" proved="true">
     <proof prover="5" timelimit="10"><result status="valid" time="1.31" steps="692"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.70" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="0.23" steps="155"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.71" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="0.22" steps="107"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.72" expl="loop invariant preservation" proved="true">
  <proof prover="5"><result status="valid" time="0.31" steps="408"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.73" expl="loop invariant preservation" proved="true">
  <proof prover="5"><result status="valid" time="1.52" steps="491"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.74" expl="loop invariant preservation" proved="true">
  <transf name="instantiate" proved="true" arg1="LoopInvariant9" arg2="i">
   <goal name="euler_sieve&#39;vc.74.0" expl="loop invariant preservation" proved="true">
   <proof prover="5" timelimit="5"><result status="valid" time="0.72" steps="291"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.75" expl="index in array bounds" proved="true">
  <proof prover="5" timelimit="5"><result status="valid" time="0.05" steps="74"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.76" expl="precondition" proved="true">
  <proof prover="5" timelimit="5"><result status="valid" time="0.07" steps="78"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.77" expl="precondition" proved="true">
  <proof prover="5" timelimit="5"><result status="valid" time="0.06" steps="79"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.78" expl="assertion" proved="true">
  <proof prover="5" timelimit="5"><result status="valid" time="0.08" steps="86"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.79" expl="loop variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="euler_sieve&#39;vc.79.0" expl="loop variant decrease" proved="true">
   <proof prover="1" timelimit="10"><result status="valid" time="0.08" steps="253581"/></proof>
   <proof prover="5" timelimit="5" obsolete="true"><result status="timeout" time="5.00"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.80" expl="loop invariant preservation" proved="true">
  <proof prover="1" timelimit="10"><result status="valid" time="0.08" steps="237549"/></proof>
  <proof prover="5" timelimit="5" obsolete="true"><result status="timeout" time="5.00"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.81" expl="loop invariant preservation" proved="true">
  <proof prover="1" timelimit="10"><result status="valid" time="0.08" steps="238298"/></proof>
  <proof prover="5" timelimit="5" obsolete="true"><result status="timeout" time="5.00"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.82" expl="loop invariant preservation" proved="true">
  <proof prover="5"><result status="valid" time="0.13" steps="227"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.83" expl="loop invariant preservation" proved="true">
  <proof prover="5" timelimit="5"><result status="valid" time="0.11" steps="92"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.84" expl="loop invariant preservation" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="euler_sieve&#39;vc.84.0" expl="loop invariant preservation" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="euler_sieve&#39;vc.84.0.0" expl="loop invariant preservation" proved="true">
    <proof prover="5" timelimit="5"><result status="valid" time="1.73" steps="343"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.84.0.1" expl="loop invariant preservation" proved="true">
    <proof prover="5" timelimit="5"><result status="valid" time="1.60" steps="338"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.84.0.2" expl="loop invariant preservation" proved="true">
    <transf name="unfold" proved="true" arg1="inv_count" arg2="in" arg3="LoopInvariant7">
     <goal name="euler_sieve&#39;vc.84.0.2.0" expl="loop invariant preservation" proved="true">
     <transf name="split_premise_right" proved="true" >
      <goal name="euler_sieve&#39;vc.84.0.2.0.0" expl="loop invariant preservation" proved="true">
      <transf name="assert" proved="true" arg1="(t_arr[cnt1 &lt;- ((2 * p1) + 1)][i] = t_arr[i])">
       <goal name="euler_sieve&#39;vc.84.0.2.0.0.0" expl="asserted formula" proved="true">
       <proof prover="5" timelimit="5"><result status="valid" time="0.22" steps="79"/></proof>
       </goal>
       <goal name="euler_sieve&#39;vc.84.0.2.0.0.1" expl="loop invariant preservation" proved="true">
       <proof prover="5" timelimit="10"><result status="valid" time="2.37" steps="785"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="euler_sieve&#39;vc.84.0.3" expl="loop invariant preservation" proved="true">
    <proof prover="1" timelimit="10"><result status="valid" time="0.10" steps="300949"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.85" expl="loop invariant preservation" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="euler_sieve&#39;vc.85.0" expl="loop invariant preservation" proved="true">
   <proof prover="0" timelimit="5"><result status="valid" time="0.80" steps="275"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.86" expl="loop invariant preservation" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="euler_sieve&#39;vc.86.0" expl="loop invariant preservation" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="euler_sieve&#39;vc.86.0.0" expl="loop invariant preservation" proved="true">
    <transf name="unfold" proved="true" arg1="all_inf_or_eq" arg2="in" arg3="LoopInvariant7">
     <goal name="euler_sieve&#39;vc.86.0.0.0" expl="loop invariant preservation" proved="true">
     <transf name="instantiate" proved="true" arg1="LoopInvariant7" arg2="i">
      <goal name="euler_sieve&#39;vc.86.0.0.0.0" expl="loop invariant preservation" proved="true">
      <proof prover="5" timelimit="10" obsolete="true"><result status="timeout" time="10.00"/></proof>
      <transf name="unfold" proved="true" arg1="inv_count" arg2="in" arg3="LoopInvariant1">
       <goal name="euler_sieve&#39;vc.86.0.0.0.0.0" expl="loop invariant preservation" proved="true">
       <transf name="split_premise_right" proved="true" >
        <goal name="euler_sieve&#39;vc.86.0.0.0.0.0.0" expl="loop invariant preservation" proved="true">
        <transf name="instantiate" proved="true" arg1="LoopInvariant4" arg2="p1">
         <goal name="euler_sieve&#39;vc.86.0.0.0.0.0.0.0" expl="loop invariant preservation" proved="true">
         <proof prover="5" timelimit="5"><result status="valid" time="0.82" steps="725"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.87" expl="loop invariant preservation" proved="true">
  <proof prover="5"><result status="valid" time="0.38" steps="437"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.88" expl="loop invariant preservation" proved="true">
  <proof prover="5" obsolete="true"><result status="timeout" time="1.00"/></proof>
  <transf name="instantiate" proved="true" arg1="LoopInvariant9" arg2="i">
   <goal name="euler_sieve&#39;vc.88.0" expl="loop invariant preservation" proved="true">
   <proof prover="5" timelimit="5"><result status="valid" time="0.28" steps="314"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.89" expl="loop invariant preservation" proved="true">
  <transf name="case" proved="true" arg1="(i &lt; 2 * p1 + 1)">
   <goal name="euler_sieve&#39;vc.89.0" expl="true case (loop invariant preservation)" proved="true">
   <transf name="instantiate" proved="true" arg1="LoopInvariant9" arg2="i">
    <goal name="euler_sieve&#39;vc.89.0.0" expl="true case (loop invariant preservation)" proved="true">
    <proof prover="5" timelimit="5"><result status="valid" time="0.69" steps="380"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="euler_sieve&#39;vc.89.1" expl="false case (loop invariant preservation)" proved="true">
   <transf name="case" proved="true" arg1="(i = 2 * p1 + 1)">
    <goal name="euler_sieve&#39;vc.89.1.0" expl="false case (true case. loop invariant preservation)" proved="true">
    <proof prover="5" timelimit="5"><result status="valid" time="0.77" steps="365"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.89.1.1" expl="false case (loop invariant preservation)" proved="true">
    <proof prover="5" timelimit="10"><result status="timeout" time="10.00"/></proof>
    <transf name="unfold" proved="true" arg1="inv_count" arg2="in" arg3="LoopInvariant14">
     <goal name="euler_sieve&#39;vc.89.1.1.0" expl="false case (loop invariant preservation)" proved="true">
     <transf name="split_premise_right" proved="true" >
      <goal name="euler_sieve&#39;vc.89.1.1.0.0" expl="false case (loop invariant preservation)" proved="true">
      <proof prover="5" timelimit="5"><result status="valid" time="3.32" steps="1427"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.90" expl="index in array bounds" proved="true">
  <proof prover="5"><result status="valid" time="0.09" steps="70"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.91" expl="precondition" proved="true">
  <proof prover="5" timelimit="5"><result status="valid" time="0.06" steps="74"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.92" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.07" steps="75"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.93" expl="assertion" proved="true">
  <proof prover="5" timelimit="5"><result status="valid" time="0.14" steps="82"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.94" expl="loop variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="euler_sieve&#39;vc.94.0" expl="loop variant decrease" proved="true">
   <proof prover="5" timelimit="5"><result status="valid" time="0.14" steps="63"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.95" expl="loop invariant preservation" proved="true">
  <proof prover="5"><result status="valid" time="0.05" steps="76"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.96" expl="loop invariant preservation" proved="true">
  <proof prover="5" timelimit="5"><result status="valid" time="0.16" steps="80"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.97" expl="loop invariant preservation" proved="true">
  <proof prover="5" timelimit="5"><result status="valid" time="0.13" steps="85"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.98" expl="loop invariant preservation" proved="true">
  <proof prover="5" timelimit="5"><result status="valid" time="0.12" steps="87"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.99" expl="loop invariant preservation" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="euler_sieve&#39;vc.99.0" expl="loop invariant preservation" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="euler_sieve&#39;vc.99.0.0" expl="loop invariant preservation" proved="true">
    <proof prover="5" timelimit="5"><result status="valid" time="1.51" steps="249"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.99.0.1" expl="loop invariant preservation" proved="true">
    <proof prover="5" timelimit="5"><result status="valid" time="1.14" steps="247"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.99.0.2" expl="loop invariant preservation" proved="true">
    <transf name="unfold" proved="true" arg1="inv_count" arg2="in" arg3="LoopInvariant7">
     <goal name="euler_sieve&#39;vc.99.0.2.0" expl="loop invariant preservation" proved="true">
     <transf name="split_premise_right" proved="true" >
      <goal name="euler_sieve&#39;vc.99.0.2.0.0" expl="loop invariant preservation" proved="true">
      <transf name="assert" proved="true" arg1="(t_arr[cnt1 &lt;- ((2 * p1) + 1)][i] = t_arr[i])">
       <goal name="euler_sieve&#39;vc.99.0.2.0.0.0" expl="asserted formula" proved="true">
       <proof prover="5" timelimit="5"><result status="valid" time="0.22" steps="74"/></proof>
       </goal>
       <goal name="euler_sieve&#39;vc.99.0.2.0.0.1" expl="loop invariant preservation" proved="true">
       <proof prover="5" timelimit="10"><result status="valid" time="1.80" steps="622"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="euler_sieve&#39;vc.99.0.3" expl="loop invariant preservation" proved="true">
    <proof prover="1" timelimit="10"><result status="valid" time="0.10" steps="283649"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.100" expl="loop invariant preservation" proved="true">
  <proof prover="0" timelimit="5"><result status="valid" time="1.65" steps="518"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.101" expl="loop invariant preservation" proved="true">
  <proof prover="0" timelimit="5"><result status="valid" time="2.04" steps="559"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.102" expl="loop invariant preservation" proved="true">
  <proof prover="5" timelimit="5"><result status="valid" time="0.33" steps="339"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.103" expl="loop invariant preservation" proved="true">
  <proof prover="5" timelimit="5"><result status="valid" time="0.70" steps="286"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.104" expl="loop invariant preservation" proved="true">
  <transf name="case" proved="true" arg1="(i &lt; 2 * p1 + 1)">
   <goal name="euler_sieve&#39;vc.104.0" expl="true case (loop invariant preservation)" proved="true">
   <transf name="instantiate" proved="true" arg1="LoopInvariant9" arg2="i">
    <goal name="euler_sieve&#39;vc.104.0.0" expl="true case (loop invariant preservation)" proved="true">
    <proof prover="5" timelimit="5"><result status="valid" time="0.61" steps="285"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="euler_sieve&#39;vc.104.1" expl="false case (loop invariant preservation)" proved="true">
   <transf name="case" proved="true" arg1="(i = 2 * p1 + 1)">
    <goal name="euler_sieve&#39;vc.104.1.0" expl="false case (true case. loop invariant preservation)" proved="true">
    <proof prover="5" timelimit="5"><result status="valid" time="0.60" steps="270"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.104.1.1" expl="false case (loop invariant preservation)" proved="true">
    <proof prover="5" timelimit="5"><result status="timeout" time="5.00"/></proof>
    <transf name="unfold" proved="true" arg1="inv_count" arg2="in" arg3="LoopInvariant14">
     <goal name="euler_sieve&#39;vc.104.1.1.0" expl="false case (loop invariant preservation)" proved="true">
     <transf name="split_premise_right" proved="true" >
      <goal name="euler_sieve&#39;vc.104.1.1.0.0" expl="false case (loop invariant preservation)" proved="true">
      <proof prover="5" timelimit="5"><result status="valid" time="0.90" steps="604"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.105" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.04" steps="64"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.106" expl="postcondition" proved="true">
  <proof prover="5" timelimit="5"><result status="valid" time="0.83" steps="335"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.107" expl="postcondition" proved="true">
  <proof prover="5"><result status="valid" time="0.14" steps="191"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.108" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.96" steps="93839"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.109" expl="assertion" proved="true">
  <proof prover="5"><result status="valid" time="0.24" steps="166"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.110" expl="assertion" proved="true">
  <transf name="case" proved="true" arg1="(mod i 2 = 0)">
   <goal name="euler_sieve&#39;vc.110.0" expl="true case (assertion)" proved="true">
   <proof prover="5"><result status="valid" time="0.04" steps="40"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.110.1" expl="false case (assertion)" proved="true">
   <transf name="assert" proved="true" arg1="(get1 (nexts t) (2 * p + 1) = (arr t)[p])">
    <goal name="euler_sieve&#39;vc.110.1.0" expl="asserted formula" proved="true">
    <proof prover="5"><result status="valid" time="0.04" steps="40"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.110.1.1" expl="false case (assertion)" proved="true">
    <transf name="assert" proved="true" arg1="(get1 (marked t) i = True)">
     <goal name="euler_sieve&#39;vc.110.1.1.0" expl="asserted formula" proved="true">
     <proof prover="0" timelimit="5"><result status="valid" time="0.58" steps="225"/></proof>
     </goal>
     <goal name="euler_sieve&#39;vc.110.1.1.1" expl="false case (assertion)" proved="true">
     <proof prover="5"><result status="valid" time="0.05" steps="44"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.111" expl="assertion" proved="true">
  <proof prover="5" timelimit="5"><result status="valid" time="0.25" steps="104"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.112" expl="index in array bounds" proved="true">
  <proof prover="5"><result status="valid" time="0.04" steps="30"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.113" expl="loop invariant init" proved="true">
  <proof prover="5"><result status="valid" time="0.02" steps="34"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.114" expl="loop invariant init" proved="true">
  <proof prover="5"><result status="valid" time="0.02" steps="35"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.115" expl="loop invariant init" proved="true">
  <proof prover="5"><result status="valid" time="0.12" steps="123"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.116" expl="loop invariant init" proved="true">
  <proof prover="5"><result status="valid" time="0.02" steps="37"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.117" expl="loop invariant init" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="euler_sieve&#39;vc.117.0" expl="loop invariant init" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="euler_sieve&#39;vc.117.0.0" expl="loop invariant init" proved="true">
    <proof prover="5" timelimit="5"><result status="valid" time="0.95" steps="342"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.117.0.1" expl="loop invariant init" proved="true">
    <proof prover="5" timelimit="5"><result status="valid" time="0.57" steps="257"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.117.0.2" expl="loop invariant init" proved="true">
    <proof prover="5" timelimit="5"><result status="valid" time="0.75" steps="323"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.117.0.3" expl="loop invariant init" proved="true">
    <proof prover="5" timelimit="5"><result status="valid" time="0.13" steps="205"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.118" expl="loop invariant init" proved="true">
  <proof prover="5"><result status="valid" time="0.05" steps="89"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.119" expl="loop invariant init" proved="true">
  <proof prover="5"><result status="valid" time="0.04" steps="107"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.120" expl="loop invariant init" proved="true">
  <proof prover="5" timelimit="5"><result status="valid" time="0.07" steps="139"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.121" expl="loop invariant init" proved="true">
  <proof prover="5"><result status="valid" time="0.04" steps="50"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.122" expl="loop invariant init" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="euler_sieve&#39;vc.122.0" expl="loop invariant init" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="euler_sieve&#39;vc.122.0.0" expl="loop invariant init" proved="true">
    <proof prover="5"><result status="valid" time="0.04" steps="39"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.123" expl="index in array bounds" proved="true">
  <proof prover="5"><result status="valid" time="0.03" steps="56"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.124" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.02" steps="54"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.125" expl="assertion" proved="true">
  <proof prover="5"><result status="valid" time="0.05" steps="58"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.126" expl="index in array bounds" proved="true">
  <proof prover="5"><result status="valid" time="0.09" steps="60"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.127" expl="index in array bounds" proved="true">
  <proof prover="5"><result status="valid" time="0.07" steps="62"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.128" expl="index in array bounds" proved="true">
  <proof prover="5"><result status="valid" time="0.06" steps="62"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.129" expl="index in array bounds" proved="true">
  <proof prover="5"><result status="valid" time="0.07" steps="66"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.130" expl="precondition" proved="true">
  <proof prover="5" timelimit="5"><result status="valid" time="0.15" steps="66"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.131" expl="precondition" proved="true">
  <proof prover="5" timelimit="5"><result status="valid" time="0.04" steps="168"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.132" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="euler_sieve&#39;vc.132.0" expl="assertion" proved="true">
   <proof prover="5" timelimit="5"><result status="timeout" time="5.00"/></proof>
   <transf name="unfold" proved="true" arg1="inv_count" arg2="in" arg3="LoopInvariant5">
    <goal name="euler_sieve&#39;vc.132.0.0" expl="assertion" proved="true">
    <transf name="instantiate" proved="true" arg1="LoopInvariant5" arg2="p">
     <goal name="euler_sieve&#39;vc.132.0.0.0" expl="assertion" proved="true">
     <transf name="instantiate" proved="true" arg1="LoopInvariant5" arg2="next">
      <goal name="euler_sieve&#39;vc.132.0.0.0.0" expl="assertion" proved="true">
      <proof prover="0" timelimit="5"><result status="valid" time="0.94" steps="271"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="euler_sieve&#39;vc.141.4" expl="VC for euler_sieve">
   <proof prover="0" timelimit="5"><result status="valid" time="4.12" steps="664"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.141.1" expl="assertion">
   <proof prover="5" timelimit="5"><result status="valid" time="3.12" steps="593"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.141.1" expl="VC for euler_sieve">
   <transf name="unfold" arg1="inv_count" arg2="in" arg3="LoopInvariant5">
    <goal name="euler_sieve&#39;vc.141.1.0" expl="VC for euler_sieve">
    <transf name="instantiate" arg1="LoopInvariant5" arg2="p">
     <goal name="euler_sieve&#39;vc.141.1.0.0" expl="VC for euler_sieve">
     <transf name="instantiate" arg1="LoopInvariant5" arg2="next">
      <goal name="euler_sieve&#39;vc.141.1.0.0.0" expl="VC for euler_sieve">
      <proof prover="0" timelimit="5"><result status="valid" time="0.80" steps="229"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="euler_sieve&#39;vc.135.0" expl="assertion">
   <proof prover="5" timelimit="5"><result status="valid" time="0.05" steps="62"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.141.0" expl="assertion">
   <proof prover="1" timelimit="5"><result status="valid" time="0.07" steps="251031"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.141.2" expl="assertion">
   <proof prover="5" timelimit="5"><result status="valid" time="0.10" steps="64"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.133" expl="assertion" proved="true">
  <proof prover="5" timelimit="10"><result status="valid" time="1.17" steps="592"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.134" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.04" steps="70"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.135" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.08" steps="249495"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.136" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="55"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.137" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.14" steps="73"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.138" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.13" steps="75"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.139" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.05" steps="76"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.140" expl="assertion" proved="true">
  <proof prover="5" timelimit="5"><result status="valid" time="0.62" steps="195"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.141" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="euler_sieve&#39;vc.141.0" expl="assertion" proved="true">
   <proof prover="1" timelimit="10"><result status="valid" time="0.07" steps="228959"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.141.1" expl="assertion" proved="true">
   <proof prover="5" timelimit="5"><result status="valid" time="1.42" steps="517"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.142" expl="loop variant decrease" proved="true">
  <proof prover="5" timelimit="5"><result status="valid" time="0.13" steps="77"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.143" expl="loop invariant preservation" proved="true">
  <proof prover="5"><result status="valid" time="0.03" steps="74"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.144" expl="loop invariant preservation" proved="true">
  <proof prover="1"><result status="valid" time="0.11" steps="19098"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.145" expl="loop invariant preservation" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="euler_sieve&#39;vc.145.0" expl="loop invariant preservation" proved="true">
   <proof prover="5"><result status="valid" time="0.05" steps="64"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.146" expl="loop invariant preservation" proved="true">
  <proof prover="5"><result status="valid" time="0.04" steps="75"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.147" expl="loop invariant preservation" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="euler_sieve&#39;vc.147.0" expl="loop invariant preservation" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="euler_sieve&#39;vc.147.0.0" expl="loop invariant preservation" proved="true">
    <transf name="case" proved="true" arg1="(i = p)">
     <goal name="euler_sieve&#39;vc.147.0.0.0" expl="true case (loop invariant preservation)" proved="true">
     <proof prover="1" timelimit="10"><result status="valid" time="0.31" steps="738055"/></proof>
     </goal>
     <goal name="euler_sieve&#39;vc.147.0.0.1" expl="false case (loop invariant preservation)" proved="true">
     <proof prover="5" timelimit="5"><result status="valid" time="2.26" steps="228"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="euler_sieve&#39;vc.147.0.1" expl="loop invariant preservation" proved="true">
    <proof prover="5" timelimit="10"><result status="valid" time="3.56" steps="1093"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.147.0.2" expl="loop invariant preservation" proved="true">
    <proof prover="5" timelimit="5"><result status="valid" time="0.11" steps="75"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.147.0.3" expl="loop invariant preservation" proved="true">
    <proof prover="5" timelimit="10"><result status="valid" time="4.42" steps="1601"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.148" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="0.29" steps="129"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.149" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="0.13" steps="91"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.150" expl="loop invariant preservation" proved="true">
  <proof prover="5"><result status="valid" time="0.23" steps="351"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.151" expl="loop invariant preservation" proved="true">
  <proof prover="5"><result status="valid" time="1.08" steps="418"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.152" expl="loop invariant preservation" proved="true">
  <transf name="instantiate" proved="true" arg1="LoopInvariant9" arg2="i">
   <goal name="euler_sieve&#39;vc.152.0" expl="loop invariant preservation" proved="true">
   <proof prover="5" timelimit="5"><result status="valid" time="0.90" steps="414"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.153" expl="index in array bounds" proved="true">
  <proof prover="5" timelimit="5"><result status="valid" time="0.06" steps="62"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.154" expl="precondition" proved="true">
  <proof prover="5" timelimit="5"><result status="valid" time="0.06" steps="66"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.155" expl="precondition" proved="true">
  <proof prover="5" timelimit="5"><result status="valid" time="0.07" steps="67"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.156" expl="assertion" proved="true">
  <proof prover="5" timelimit="5"><result status="valid" time="0.11" steps="74"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.157" expl="loop variant decrease" proved="true">
  <proof prover="1" timelimit="10"><result status="valid" time="0.06" steps="240466"/></proof>
  <proof prover="5" timelimit="5" obsolete="true"><result status="timeout" time="5.00"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.158" expl="loop invariant preservation" proved="true">
  <proof prover="5" timelimit="5"><result status="valid" time="2.34" steps="420"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.159" expl="loop invariant preservation" proved="true">
  <proof prover="1"><result status="valid" time="0.07" steps="227093"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.160" expl="loop invariant preservation" proved="true">
  <proof prover="5"><result status="valid" time="0.11" steps="195"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.161" expl="loop invariant preservation" proved="true">
  <proof prover="5"><result status="valid" time="0.08" steps="80"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.162" expl="loop invariant preservation" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="euler_sieve&#39;vc.162.0" expl="loop invariant preservation" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="euler_sieve&#39;vc.162.0.0" expl="loop invariant preservation" proved="true">
    <proof prover="5" timelimit="5"><result status="valid" time="1.56" steps="303"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.162.0.1" expl="loop invariant preservation" proved="true">
    <proof prover="5" timelimit="5"><result status="valid" time="1.20" steps="298"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.162.0.2" expl="loop invariant preservation" proved="true">
    <transf name="unfold" proved="true" arg1="inv_count" arg2="in" arg3="LoopInvariant7">
     <goal name="euler_sieve&#39;vc.162.0.2.0" expl="loop invariant preservation" proved="true">
     <transf name="split_premise_right" proved="true" >
      <goal name="euler_sieve&#39;vc.162.0.2.0.0" expl="loop invariant preservation" proved="true">
      <transf name="assert" proved="true" arg1="(t_arr[cnt1 &lt;- ((2 * p1) + 1)][i] = t_arr[i])">
       <goal name="euler_sieve&#39;vc.162.0.2.0.0.0" expl="asserted formula" proved="true">
       <proof prover="5" timelimit="5"><result status="valid" time="0.13" steps="73"/></proof>
       </goal>
       <goal name="euler_sieve&#39;vc.162.0.2.0.0.1" expl="loop invariant preservation" proved="true">
       <proof prover="5" timelimit="5"><result status="valid" time="1.20" steps="328"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="euler_sieve&#39;vc.162.0.3" expl="loop invariant preservation" proved="true">
    <proof prover="1" timelimit="10"><result status="valid" time="0.10" steps="282115"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.163" expl="loop invariant preservation" proved="true">
  <proof prover="0" timelimit="5"><result status="valid" time="0.81" steps="427"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.164" expl="loop invariant preservation" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="euler_sieve&#39;vc.164.0" expl="loop invariant preservation" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="euler_sieve&#39;vc.164.0.0" expl="loop invariant preservation" proved="true">
    <transf name="unfold" proved="true" arg1="all_inf_or_eq" arg2="in" arg3="LoopInvariant7">
     <goal name="euler_sieve&#39;vc.164.0.0.0" expl="loop invariant preservation" proved="true">
     <transf name="instantiate" proved="true" arg1="LoopInvariant7" arg2="i">
      <goal name="euler_sieve&#39;vc.164.0.0.0.0" expl="loop invariant preservation" proved="true">
      <transf name="unfold" proved="true" arg1="inv_count" arg2="in" arg3="LoopInvariant1">
       <goal name="euler_sieve&#39;vc.164.0.0.0.0.0" expl="loop invariant preservation" proved="true">
       <transf name="split_premise_right" proved="true" >
        <goal name="euler_sieve&#39;vc.164.0.0.0.0.0.0" expl="loop invariant preservation" proved="true">
        <transf name="instantiate" proved="true" arg1="LoopInvariant4" arg2="p1">
         <goal name="euler_sieve&#39;vc.164.0.0.0.0.0.0.0" expl="loop invariant preservation" proved="true">
         <proof prover="5" timelimit="5"><result status="valid" time="0.73" steps="511"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.165" expl="loop invariant preservation" proved="true">
  <proof prover="5"><result status="valid" time="0.33" steps="448"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.166" expl="loop invariant preservation" proved="true">
  <proof prover="5" obsolete="true"><result status="timeout" time="2.00"/></proof>
  <transf name="instantiate" proved="true" arg1="LoopInvariant9" arg2="i">
   <goal name="euler_sieve&#39;vc.166.0" expl="loop invariant preservation" proved="true">
   <proof prover="5" timelimit="5"><result status="valid" time="0.17" steps="274"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.167" expl="loop invariant preservation" proved="true">
  <transf name="case" proved="true" arg1="(i &lt; 2 * p1 + 1)">
   <goal name="euler_sieve&#39;vc.167.0" expl="true case (loop invariant preservation)" proved="true">
   <transf name="instantiate" proved="true" arg1="LoopInvariant9" arg2="i">
    <goal name="euler_sieve&#39;vc.167.0.0" expl="true case (loop invariant preservation)" proved="true">
    <proof prover="5" timelimit="5"><result status="valid" time="0.98" steps="539"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="euler_sieve&#39;vc.167.1" expl="false case (loop invariant preservation)" proved="true">
   <transf name="case" proved="true" arg1="(i = 2 * p1 + 1)">
    <goal name="euler_sieve&#39;vc.167.1.0" expl="false case (true case. loop invariant preservation)" proved="true">
    <proof prover="5" timelimit="5"><result status="valid" time="0.47" steps="314"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.167.1.1" expl="false case (loop invariant preservation)" proved="true">
    <proof prover="5" timelimit="10"><result status="valid" time="7.48" steps="5572"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.168" expl="index in array bounds" proved="true">
  <proof prover="5"><result status="valid" time="0.09" steps="58"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.169" expl="precondition" proved="true">
  <proof prover="5" timelimit="5"><result status="valid" time="0.05" steps="62"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.170" expl="precondition" proved="true">
  <proof prover="5" timelimit="5"><result status="valid" time="0.05" steps="63"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.171" expl="assertion" proved="true">
  <proof prover="5" timelimit="5"><result status="valid" time="0.07" steps="70"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.172" expl="loop variant decrease" proved="true">
  <proof prover="5" timelimit="5"><result status="valid" time="0.07" steps="67"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.173" expl="loop invariant preservation" proved="true">
  <proof prover="5" timelimit="5"><result status="valid" time="0.11" steps="64"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.174" expl="loop invariant preservation" proved="true">
  <proof prover="5"><result status="valid" time="0.10" steps="68"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.175" expl="loop invariant preservation" proved="true">
  <proof prover="5" timelimit="5"><result status="valid" time="0.11" steps="73"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.176" expl="loop invariant preservation" proved="true">
  <proof prover="5" timelimit="5"><result status="valid" time="0.07" steps="75"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.177" expl="loop invariant preservation" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="euler_sieve&#39;vc.177.0" expl="loop invariant preservation" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="euler_sieve&#39;vc.177.0.0" expl="loop invariant preservation" proved="true">
    <proof prover="5" timelimit="5"><result status="valid" time="0.87" steps="221"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.177.0.1" expl="loop invariant preservation" proved="true">
    <proof prover="5" timelimit="5"><result status="valid" time="0.74" steps="219"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.177.0.2" expl="loop invariant preservation" proved="true">
    <transf name="unfold" proved="true" arg1="inv_count" arg2="in" arg3="LoopInvariant7">
     <goal name="euler_sieve&#39;vc.177.0.2.0" expl="loop invariant preservation" proved="true">
     <transf name="split_premise_right" proved="true" >
      <goal name="euler_sieve&#39;vc.177.0.2.0.0" expl="loop invariant preservation" proved="true">
      <transf name="assert" proved="true" arg1="(t_arr[cnt1 &lt;- ((2 * p1) + 1)][i] = t_arr[i])">
       <goal name="euler_sieve&#39;vc.177.0.2.0.0.0" expl="asserted formula" proved="true">
       <proof prover="5" timelimit="5"><result status="valid" time="0.15" steps="68"/></proof>
       </goal>
       <goal name="euler_sieve&#39;vc.177.0.2.0.0.1" expl="loop invariant preservation" proved="true">
       <proof prover="5" timelimit="5"><result status="valid" time="0.81" steps="238"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="euler_sieve&#39;vc.177.0.3" expl="loop invariant preservation" proved="true">
    <proof prover="1" timelimit="10"><result status="valid" time="0.09" steps="264834"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.178" expl="loop invariant preservation" proved="true">
  <proof prover="0" timelimit="5"><result status="valid" time="0.84" steps="427"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.179" expl="loop invariant preservation" proved="true">
  <proof prover="0" timelimit="5"><result status="valid" time="1.72" steps="420"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.180" expl="loop invariant preservation" proved="true">
  <proof prover="5" timelimit="5"><result status="valid" time="0.35" steps="301"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.181" expl="loop invariant preservation" proved="true">
  <proof prover="5" timelimit="5"><result status="valid" time="0.44" steps="242"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.182" expl="loop invariant preservation" proved="true">
  <transf name="case" proved="true" arg1="(i &lt; 2 * p1 + 1)">
   <goal name="euler_sieve&#39;vc.182.0" expl="true case (loop invariant preservation)" proved="true">
   <transf name="instantiate" proved="true" arg1="LoopInvariant9" arg2="i">
    <goal name="euler_sieve&#39;vc.182.0.0" expl="true case (loop invariant preservation)" proved="true">
    <proof prover="5" timelimit="5"><result status="valid" time="0.41" steps="246"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="euler_sieve&#39;vc.182.1" expl="false case (loop invariant preservation)" proved="true">
   <transf name="case" proved="true" arg1="(i = 2 * p1 + 1)">
    <goal name="euler_sieve&#39;vc.182.1.0" expl="false case (true case. loop invariant preservation)" proved="true">
    <proof prover="5" timelimit="5"><result status="valid" time="0.31" steps="231"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.182.1.1" expl="false case (loop invariant preservation)" proved="true">
    <proof prover="5" timelimit="5"><result status="timeout" time="5.00"/></proof>
    <transf name="unfold" proved="true" arg1="inv_count" arg2="in" arg3="LoopInvariant14">
     <goal name="euler_sieve&#39;vc.182.1.1.0" expl="false case (loop invariant preservation)" proved="true">
     <transf name="split_premise_right" proved="true" >
      <goal name="euler_sieve&#39;vc.182.1.1.0.0" expl="false case (loop invariant preservation)" proved="true">
      <proof prover="5" timelimit="5"><result status="valid" time="0.68" steps="525"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.183" expl="precondition" proved="true">
  <proof prover="5" timelimit="5"><result status="valid" time="0.05" steps="52"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.184" expl="postcondition" proved="true">
  <proof prover="5" timelimit="5"><result status="valid" time="0.80" steps="709"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.185" expl="postcondition" proved="true">
  <proof prover="5" timelimit="5"><result status="valid" time="0.13" steps="154"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.186" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.32" steps="62094"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.94" expl="assertion">
  <proof prover="0" timelimit="10"><result status="valid" time="3.30" steps="714"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.166" expl="assertion">
  <proof prover="5"><result status="valid" time="0.06" steps="66"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.97" expl="assertion">
  <proof prover="5" timelimit="5"><result status="valid" time="0.47" steps="211"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.157" expl="assertion">
  <proof prover="0" timelimit="10"><result status="valid" time="0.43" steps="332"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.161" expl="assertion">
  <proof prover="1" timelimit="5"><result status="valid" time="0.31" steps="544428"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.78" expl="assertion">
  <proof prover="5"><result status="valid" time="0.53" steps="474"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.159" expl="assertion">
  <transf name="split_vc" >
   <goal name="euler_sieve&#39;vc.159.0" expl="assertion">
   <proof prover="1" timelimit="10"><result status="valid" time="0.07" steps="228679"/></proof>
   <proof prover="5" timelimit="5"><result status="timeout" time="5.00"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.159.1" expl="assertion">
   <proof prover="5" timelimit="5"><result status="valid" time="0.09" steps="60"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.159.2" expl="VC for euler_sieve">
   <proof prover="5" timelimit="5"><result status="valid" time="0.96" steps="202"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.174" expl="assertion">
  <proof prover="1" timelimit="10" obsolete="true"><result status="timeout" time="10.00" steps="14251312"/></proof>
  <proof prover="5" timelimit="5"><result status="valid" time="3.32" steps="584"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.160" expl="assertion">
  <proof prover="5" timelimit="5"><result status="valid" time="0.57" steps="255"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.98" expl="assertion">
  <proof prover="5" timelimit="5"><result status="valid" time="0.53" steps="245"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.78" expl="assertion">
  <transf name="split_vc" >
   <goal name="euler_sieve&#39;vc.78.0" expl="assertion">
   <proof prover="0" timelimit="5"><result status="timeout" time="5.00"/></proof>
   <proof prover="1" timelimit="5"><result status="valid" time="0.06" steps="242037"/></proof>
   <proof prover="2" timelimit="5"><result status="highfailure" time="0.85" steps="309561"/></proof>
   <proof prover="5" timelimit="5"><result status="timeout" time="5.00"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.78.1" expl="assertion">
   <proof prover="5" timelimit="5"><result status="valid" time="0.10" steps="66"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.78.2" expl="VC for euler_sieve">
   <proof prover="5" timelimit="5"><result status="valid" time="1.35" steps="233"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.78" expl="assertion">
  <proof prover="5" timelimit="5"><result status="valid" time="1.17" steps="303"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.163" expl="assertion">
  <proof prover="5" timelimit="5"><result status="valid" time="0.37" steps="182"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.78" expl="assertion">
  <proof prover="5"><result status="valid" time="0.06" steps="78"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.98" expl="assertion">
  <proof prover="5" timelimit="5"><result status="valid" time="0.05" steps="74"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.78" expl="assertion">
  <transf name="split_vc" >
   <goal name="euler_sieve&#39;vc.78.0" expl="assertion">
   <proof prover="0" timelimit="5"><result status="valid" time="0.93" steps="227"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.78.1" expl="assertion">
   <proof prover="5" timelimit="5"><result status="valid" time="0.09" steps="70"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.78.2" expl="VC for euler_sieve">
   <proof prover="1" timelimit="5"><result status="valid" time="0.06" steps="226573"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.167" expl="assertion">
  <proof prover="5"><result status="valid" time="0.80" steps="393"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.78" expl="assertion">
  <proof prover="5" timelimit="5"><result status="valid" time="0.38" steps="221"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.181" expl="assertion">
  <proof prover="5" timelimit="5"><result status="valid" time="0.36" steps="171"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.185" expl="assertion">
  <proof prover="5" timelimit="5"><result status="valid" time="0.46" steps="198"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.184" expl="assertion">
  <proof prover="5" timelimit="5"><result status="valid" time="0.05" steps="62"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.78" expl="assertion">
  <proof prover="0" timelimit="5" obsolete="true"><result status="timeout" time="5.00"/></proof>
  <proof prover="1" timelimit="5"><result status="valid" time="0.07" steps="226646"/></proof>
  <proof prover="2" timelimit="5" obsolete="true"><result status="highfailure" time="2.34" steps="783141"/></proof>
  <proof prover="5" timelimit="5" obsolete="true"><result status="timeout" time="5.00"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
</file>
</why3session>
