<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"http://why3.lri.fr/why3session.dtd">
<why3session shape_version="6">
<prover id="0" name="Alt-Ergo" version="2.0.0" timelimit="10" steplimit="0" memlimit="1000"/>
<prover id="1" name="Z3" version="4.8.6" timelimit="10" steplimit="0" memlimit="1000"/>
<prover id="2" name="CVC4" version="1.7" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="3" name="Vampire" version="4.4.0" timelimit="10" steplimit="0" memlimit="1000"/>
<prover id="4" name="Eprover" version="2.4" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="5" name="Alt-Ergo" version="2.3.2" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="6" name="CVC4" version="1.6" timelimit="10" steplimit="0" memlimit="1000"/>
<file format="whyml">
<path name=".."/><path name="euler_sieve_V2.mlw"/>
<theory name="ArithmeticResults" proved="true">
 <goal name="mult_croissance_locale&#39;vc" expl="VC for mult_croissance_locale" proved="true">
 <proof prover="2"><result status="valid" time="0.02" steps="9108"/></proof>
 </goal>
 <goal name="mult_croissance&#39;vc" expl="VC for mult_croissance" proved="true">
 <proof prover="0"><result status="valid" time="0.01" steps="24"/></proof>
 </goal>
 <goal name="comp_mult_2&#39;vc" expl="VC for comp_mult_2" proved="true">
 <proof prover="0"><result status="valid" time="0.01" steps="15"/></proof>
 </goal>
 <goal name="div_croissance_locale1&#39;vc" expl="VC for div_croissance_locale1" proved="true">
 <proof prover="1"><result status="valid" time="0.03" steps="32504"/></proof>
 </goal>
 <goal name="div_croissance1&#39;vc" expl="VC for div_croissance1" proved="true">
 <proof prover="5" timelimit="10"><result status="valid" time="0.02" steps="37"/></proof>
 </goal>
 <goal name="div_croissance_locale2&#39;vc" expl="VC for div_croissance_locale2" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="div_croissance_locale2&#39;vc.0" expl="variant decrease" proved="true">
  <proof prover="2"><result status="valid" time="0.03" steps="9833"/></proof>
  </goal>
  <goal name="div_croissance_locale2&#39;vc.1" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.04" steps="9828"/></proof>
  </goal>
  <goal name="div_croissance_locale2&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.69" steps="57988"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="div_croissance2&#39;vc" expl="VC for div_croissance2" proved="true">
 <proof prover="0"><result status="valid" time="0.04" steps="41"/></proof>
 </goal>
 <goal name="div_mult_1&#39;vc" expl="VC for div_mult_1" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="div_mult_1&#39;vc.0" expl="postcondition" proved="true">
  <transf name="inline_all" proved="true" >
   <goal name="div_mult_1&#39;vc.0.0" expl="postcondition" proved="true">
   <proof prover="1"><result status="valid" time="0.11" steps="387216"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="mult_borne_sous_exp&#39;vc" expl="VC for mult_borne_sous_exp" proved="true">
 <proof prover="0"><result status="valid" time="6.79" steps="175"/></proof>
 </goal>
 <goal name="sq_ineq&#39;vc" expl="VC for sq_ineq" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="sq_ineq&#39;vc.0" expl="variant decrease" proved="true">
  <proof prover="2"><result status="valid" time="0.11" steps="17965"/></proof>
  </goal>
  <goal name="sq_ineq&#39;vc.1" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.11" steps="17928"/></proof>
  </goal>
  <goal name="sq_ineq&#39;vc.2" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.03" steps="10701"/></proof>
  </goal>
  <goal name="sq_ineq&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="6" timelimit="1"><result status="valid" time="0.16" steps="30796"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="DivisibilityResults" proved="true">
 <goal name="divides_div&#39;vc" expl="VC for divides_div" proved="true">
 <proof prover="5" timelimit="10"><result status="valid" time="0.05" steps="77"/></proof>
 </goal>
 <goal name="divides_inf&#39;vc" expl="VC for divides_inf" proved="true">
 <proof prover="5" timelimit="10"><result status="valid" time="0.03" steps="68"/></proof>
 </goal>
 <goal name="not_prime_divider_limits&#39;vc" expl="VC for not_prime_divider_limits" proved="true">
 <proof prover="1" timelimit="1"><result status="valid" time="0.03" steps="31152"/></proof>
 </goal>
 <goal name="no_prod_impl_no_divider&#39;vc" expl="VC for no_prod_impl_no_divider" proved="true">
 <proof prover="0"><result status="valid" time="8.28" steps="293"/></proof>
 </goal>
 <goal name="not_prime_impl_divisor_under_sqrt&#39;vc" expl="VC for not_prime_impl_divisor_under_sqrt" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="not_prime_impl_divisor_under_sqrt&#39;vc.0" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="not_prime_impl_divisor_under_sqrt&#39;vc.0.0" expl="postcondition" proved="true">
   <proof prover="6" timelimit="1"><result status="valid" time="0.20" steps="52303"/></proof>
   </goal>
   <goal name="not_prime_impl_divisor_under_sqrt&#39;vc.0.1" expl="VC for not_prime_impl_divisor_under_sqrt" proved="true">
   <proof prover="0" timelimit="1"><result status="valid" time="0.04" steps="59"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="EulerSieveSpec" proved="true">
 <goal name="conservation_inv_marked_nexts_on_marked_change&#39;vc" expl="VC for conservation_inv_marked_nexts_on_marked_change" proved="true">
 <proof prover="5" timelimit="1"><result status="valid" time="0.05" steps="177"/></proof>
 </goal>
 <goal name="conservation_inv_marked_nexts_on_nexts_change&#39;vc" expl="VC for conservation_inv_marked_nexts_on_nexts_change" proved="true">
 <transf name="inline_goal" proved="true" >
  <goal name="conservation_inv_marked_nexts_on_nexts_change&#39;vc.0" expl="VC for conservation_inv_marked_nexts_on_nexts_change" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="conservation_inv_marked_nexts_on_nexts_change&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="conservation_inv_marked_nexts_on_nexts_change&#39;vc.0.0.0" expl="postcondition" proved="true">
    <proof prover="5" timelimit="1"><result status="valid" time="0.02" steps="51"/></proof>
    </goal>
    <goal name="conservation_inv_marked_nexts_on_nexts_change&#39;vc.0.0.1" expl="postcondition" proved="true">
    <proof prover="5" timelimit="1"><result status="valid" time="0.48" steps="1741"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="EulerSieve" proved="true">
 <goal name="marked_impl_all_products_marked&#39;vc" expl="VC for marked_impl_all_products_marked" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="marked_impl_all_products_marked&#39;vc.0" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="marked_impl_all_products_marked&#39;vc.0.0" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.05" steps="18943"/></proof>
   </goal>
   <goal name="marked_impl_all_products_marked&#39;vc.0.1" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.06" steps="18943"/></proof>
   </goal>
   <goal name="marked_impl_all_products_marked&#39;vc.0.2" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.01" steps="18943"/></proof>
   </goal>
   <goal name="marked_impl_all_products_marked&#39;vc.0.3" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.05" steps="22244"/></proof>
   </goal>
   <goal name="marked_impl_all_products_marked&#39;vc.0.4" expl="VC for marked_impl_all_products_marked" proved="true">
   <transf name="inline_all" proved="true" >
    <goal name="marked_impl_all_products_marked&#39;vc.0.4.0" expl="VC for marked_impl_all_products_marked" proved="true">
    <proof prover="3"><result status="valid" time="1.34"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="marked_impl_all_products_marked&#39;vc.0.5" expl="VC for marked_impl_all_products_marked" proved="true">
   <proof prover="4"><result status="valid" time="0.31"/></proof>
   </goal>
   <goal name="marked_impl_all_products_marked&#39;vc.0.6" expl="VC for marked_impl_all_products_marked" proved="true">
   <transf name="unfold" proved="true" arg1="previously_marked_products" arg2="in" arg3="Requires">
    <goal name="marked_impl_all_products_marked&#39;vc.0.6.0" expl="VC for marked_impl_all_products_marked" proved="true">
    <transf name="unfold" proved="true" arg1="all_products_marked" arg2="in" arg3="Requires">
     <goal name="marked_impl_all_products_marked&#39;vc.0.6.0.0" expl="VC for marked_impl_all_products_marked" proved="true">
     <proof prover="3" timelimit="5"><result status="valid" time="1.27"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="prev_and_new_impl_all_products_marked&#39;vc" expl="VC for prev_and_new_impl_all_products_marked" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="prev_and_new_impl_all_products_marked&#39;vc.0" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="prev_and_new_impl_all_products_marked&#39;vc.0.0" expl="assertion" proved="true">
   <transf name="unfold" proved="true" arg1="previously_marked_products" arg2="in" arg3="Requires2">
    <goal name="prev_and_new_impl_all_products_marked&#39;vc.0.0.0" expl="assertion" proved="true">
    <transf name="unfold" proved="true" arg1="all_products_marked" arg2="in" arg3="Requires2">
     <goal name="prev_and_new_impl_all_products_marked&#39;vc.0.0.0.0" expl="assertion" proved="true">
     <proof prover="5"><result status="valid" time="0.03" steps="77"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="prev_and_new_impl_all_products_marked&#39;vc.1" expl="assertion" proved="true">
  <transf name="inline_all" proved="true" >
   <goal name="prev_and_new_impl_all_products_marked&#39;vc.1.0" expl="assertion" proved="true">
   <proof prover="4" timelimit="10"><result status="valid" time="15.11"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="prev_and_new_impl_all_products_marked&#39;vc.2" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.06" steps="25074"/></proof>
  </goal>
  <goal name="prev_and_new_impl_all_products_marked&#39;vc.3" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.04" steps="19900"/></proof>
  </goal>
  <goal name="prev_and_new_impl_all_products_marked&#39;vc.4" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.15" steps="25360"/></proof>
  </goal>
  <goal name="prev_and_new_impl_all_products_marked&#39;vc.5" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.05" steps="20213"/></proof>
  </goal>
  <goal name="prev_and_new_impl_all_products_marked&#39;vc.6" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.07" steps="23780"/></proof>
  </goal>
  <goal name="prev_and_new_impl_all_products_marked&#39;vc.7" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="prev_and_new_impl_all_products_marked&#39;vc.7.0" expl="assertion" proved="true">
   <proof prover="5" timelimit="10"><result status="valid" time="1.03" steps="378"/></proof>
   </goal>
   <goal name="prev_and_new_impl_all_products_marked&#39;vc.7.1" expl="VC for prev_and_new_impl_all_products_marked" proved="true">
   <proof prover="0"><result status="valid" time="0.04" steps="140"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="prev_and_new_impl_all_products_marked&#39;vc.8" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="prev_and_new_impl_all_products_marked&#39;vc.8.0" expl="assertion" proved="true">
   <proof prover="1" timelimit="1"><result status="valid" time="0.05" steps="9909"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="prev_and_new_impl_all_products_marked&#39;vc.9" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="44"/></proof>
  </goal>
  <goal name="prev_and_new_impl_all_products_marked&#39;vc.10" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.02" steps="75"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="conservation_only_products_marked&#39;vc" expl="VC for conservation_only_products_marked" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="conservation_only_products_marked&#39;vc.0" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.01" steps="90"/></proof>
  </goal>
  <goal name="conservation_only_products_marked&#39;vc.1" expl="assertion" proved="true">
  <proof prover="0" timelimit="1"><result status="valid" time="0.10" steps="112"/></proof>
  </goal>
  <goal name="conservation_only_products_marked&#39;vc.2" expl="assertion" proved="true">
  <proof prover="0" timelimit="1"><result status="valid" time="0.02" steps="28"/></proof>
  </goal>
  <goal name="conservation_only_products_marked&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.02" steps="85"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="conservation_previously_marked_products&#39;vc" expl="VC for conservation_previously_marked_products" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="conservation_previously_marked_products&#39;vc.0" expl="assertion" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="conservation_previously_marked_products&#39;vc.0.0" expl="assertion" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="conservation_previously_marked_products&#39;vc.0.0.0" expl="assertion" proved="true">
    <proof prover="5" timelimit="10"><result status="valid" time="0.03" steps="65"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="conservation_previously_marked_products&#39;vc.1" expl="assertion" proved="true">
  <proof prover="1" timelimit="1"><result status="valid" time="0.03" steps="127524"/></proof>
  </goal>
  <goal name="conservation_previously_marked_products&#39;vc.2" expl="assertion" proved="true">
  <transf name="inline_all" proved="true" >
   <goal name="conservation_previously_marked_products&#39;vc.2.0" expl="assertion" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="conservation_previously_marked_products&#39;vc.2.0.0" expl="assertion" proved="true">
    <proof prover="2"><result status="valid" time="0.34" steps="45757"/></proof>
    </goal>
    <goal name="conservation_previously_marked_products&#39;vc.2.0.1" expl="VC for conservation_previously_marked_products" proved="true">
    <proof prover="1"><result status="valid" time="0.73" steps="1284598"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="conservation_previously_marked_products&#39;vc.3" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.07" steps="25535"/></proof>
  </goal>
  <goal name="conservation_previously_marked_products&#39;vc.4" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.04" steps="20247"/></proof>
  </goal>
  <goal name="conservation_previously_marked_products&#39;vc.5" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="conservation_previously_marked_products&#39;vc.5.0" expl="assertion" proved="true">
   <proof prover="4"><result status="valid" time="0.13"/></proof>
   </goal>
   <goal name="conservation_previously_marked_products&#39;vc.5.1" expl="VC for conservation_previously_marked_products" proved="true">
   <proof prover="5"><result status="valid" time="0.04" steps="109"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="conservation_previously_marked_products&#39;vc.6" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="conservation_previously_marked_products&#39;vc.6.0" expl="assertion" proved="true">
   <transf name="inline_goal" proved="true" >
    <goal name="conservation_previously_marked_products&#39;vc.6.0.0" expl="assertion" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="conservation_previously_marked_products&#39;vc.6.0.0.0" expl="assertion" proved="true">
     <proof prover="1" timelimit="1"><result status="valid" time="0.04" steps="110244"/></proof>
     </goal>
     <goal name="conservation_previously_marked_products&#39;vc.6.0.0.1" expl="assertion" proved="true">
     <proof prover="2" timelimit="10"><result status="valid" time="0.07" steps="26129"/></proof>
     </goal>
     <goal name="conservation_previously_marked_products&#39;vc.6.0.0.2" expl="assertion" proved="true">
     <proof prover="5"><result status="valid" time="0.02" steps="38"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="conservation_previously_marked_products&#39;vc.7" expl="postcondition" proved="true">
  <proof prover="1" timelimit="1"><result status="valid" time="0.03" steps="149155"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="conservation_previously_marked_products_on_marked_change" proved="true">
 <transf name="inline_goal" proved="true" >
  <goal name="conservation_previously_marked_products_on_marked_change.0" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="conservation_previously_marked_products_on_marked_change.0.0" proved="true">
   <transf name="inline_goal" proved="true" >
    <goal name="conservation_previously_marked_products_on_marked_change.0.0.0" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="conservation_previously_marked_products_on_marked_change.0.0.0.0" proved="true">
     <proof prover="3"><result status="valid" time="0.06"/></proof>
     <proof prover="4" timelimit="10"><result status="valid" time="0.04"/></proof>
     </goal>
     <goal name="conservation_previously_marked_products_on_marked_change.0.0.0.1" proved="true">
     <proof prover="4"><result status="valid" time="0.13"/></proof>
     </goal>
     <goal name="conservation_previously_marked_products_on_marked_change.0.0.0.2" proved="true">
     <transf name="inline_all" proved="true" >
      <goal name="conservation_previously_marked_products_on_marked_change.0.0.0.2.0" proved="true">
      <proof prover="1"><result status="valid" time="0.27" steps="530184"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="conservation_inv_marked_old_nexts2&#39;vc" expl="VC for conservation_inv_marked_old_nexts2" proved="true">
 <proof prover="0"><result status="valid" time="1.14" steps="156"/></proof>
 </goal>
 <goal name="unchanged_other_elements&#39;vc" expl="VC for unchanged_other_elements" proved="true">
 <proof prover="5" timelimit="1"><result status="valid" time="0.02" steps="67"/></proof>
 </goal>
 <goal name="t&#39;vc" expl="VC for t" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="t&#39;vc.0" expl="precondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="t&#39;vc.0.0" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="t&#39;vc.0.0.0" expl="precondition" proved="true">
    <proof prover="0" timelimit="1"><result status="valid" time="0.09" steps="6"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="t&#39;vc.1" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.07" steps="21423"/></proof>
  </goal>
  <goal name="t&#39;vc.2" expl="type invariant" proved="true">
  <proof prover="6"><result status="valid" time="0.12" steps="23054"/></proof>
  </goal>
  <goal name="t&#39;vc.3" expl="type invariant" proved="true">
  <proof prover="5" timelimit="1"><result status="valid" time="0.01" steps="20"/></proof>
  </goal>
  <goal name="t&#39;vc.4" expl="type invariant" proved="true">
  <proof prover="5"><result status="valid" time="0.04" steps="141"/></proof>
  </goal>
  <goal name="t&#39;vc.5" expl="type invariant" proved="true">
  <proof prover="5"><result status="valid" time="0.04" steps="108"/></proof>
  </goal>
  <goal name="t&#39;vc.6" expl="type invariant" proved="true">
  <proof prover="0" timelimit="1"><result status="valid" time="0.03" steps="18"/></proof>
  </goal>
  <goal name="t&#39;vc.7" expl="type invariant" proved="true">
  <proof prover="5" timelimit="1"><result status="valid" time="0.01" steps="28"/></proof>
  </goal>
  <goal name="t&#39;vc.8" expl="type invariant" proved="true">
  <proof prover="5" timelimit="1"><result status="valid" time="0.03" steps="109"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="remove_products&#39;vc" expl="VC for remove_products" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="remove_products&#39;vc.0" expl="division by zero" proved="true">
  <proof prover="5"><result status="valid" time="0.02" steps="25"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.1" expl="integer overflow" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="43"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.2" expl="precondition" proved="true">
  <proof prover="5" timelimit="1"><result status="valid" time="0.02" steps="61"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.3" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.04" steps="63"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.4" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="remove_products&#39;vc.4.0" expl="assertion" proved="true">
   <proof prover="5"><result status="valid" time="0.02" steps="72"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.4.1" expl="VC for remove_products" proved="true">
   <proof prover="5"><result status="valid" time="0.07" steps="76"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.4.2" expl="VC for remove_products" proved="true">
   <proof prover="5"><result status="valid" time="0.42" steps="444"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.5" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.07" steps="200"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.6" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.13" steps="81"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.7" expl="integer overflow" proved="true">
  <proof prover="5"><result status="valid" time="0.07" steps="80"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.8" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.01" steps="78"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.9" expl="precondition" proved="true">
  <transf name="assert" proved="true" arg1="(mod (int63&#39;int n) 2 = 1)">
   <goal name="remove_products&#39;vc.9.0" expl="asserted formula" proved="true">
   <proof prover="1" timelimit="5"><result status="valid" time="0.03" steps="155719"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.9.1" expl="precondition" proved="true">
   <proof prover="5"><result status="valid" time="0.07" steps="84"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.10" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="remove_products&#39;vc.10.0" expl="precondition" proved="true">
   <proof prover="1" timelimit="1"><result status="valid" time="0.05" steps="153195"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.10.1" expl="precondition" proved="true">
   <proof prover="1" timelimit="1"><result status="valid" time="0.05" steps="181417"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.10.2" expl="precondition" proved="true">
   <proof prover="0" timelimit="5"><result status="valid" time="0.06" steps="92"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.11" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.03" steps="89"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.12" expl="assertion" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="remove_products&#39;vc.12.0" expl="assertion" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="remove_products&#39;vc.12.0.0" expl="assertion" proved="true">
    <proof prover="1" timelimit="1"><result status="valid" time="0.12" steps="129549"/></proof>
    <proof prover="5" timelimit="1"><result status="valid" time="0.03" steps="84"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.12.0.1" expl="assertion" proved="true">
    <proof prover="6"><result status="valid" time="0.10" steps="30045"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.12.0.2" expl="assertion" proved="true">
    <proof prover="5" timelimit="1"><result status="valid" time="0.11" steps="90"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.12.0.3" expl="assertion" proved="true">
    <proof prover="5"><result status="valid" time="0.03" steps="84"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.13" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="remove_products&#39;vc.13.0" expl="assertion" proved="true">
   <proof prover="5"><result status="valid" time="0.03" steps="89"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.13.1" expl="assertion" proved="true">
   <proof prover="1"><result status="valid" time="0.05" steps="187917"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.13.2" expl="VC for remove_products" proved="true">
   <proof prover="5"><result status="valid" time="0.41" steps="395"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.14" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="remove_products&#39;vc.14.0" expl="assertion" proved="true">
   <proof prover="1" timelimit="1"><result status="valid" time="0.04" steps="130595"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.14.1" expl="assertion" proved="true">
   <proof prover="5"><result status="valid" time="0.02" steps="91"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.14.2" expl="assertion" proved="true">
   <proof prover="1" timelimit="1"><result status="valid" time="0.05" steps="149638"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.14.3" expl="VC for remove_products" proved="true">
   <proof prover="5"><result status="valid" time="3.17" steps="429"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.15" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="remove_products&#39;vc.15.0" expl="assertion" proved="true">
   <transf name="inline_goal" proved="true" >
    <goal name="remove_products&#39;vc.15.0.0" expl="assertion" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="remove_products&#39;vc.15.0.0.0" expl="assertion" proved="true">
     <proof prover="5"><result status="valid" time="0.12" steps="97"/></proof>
     </goal>
     <goal name="remove_products&#39;vc.15.0.0.1" expl="assertion" proved="true">
     <proof prover="5"><result status="valid" time="0.03" steps="93"/></proof>
     </goal>
     <goal name="remove_products&#39;vc.15.0.0.2" expl="assertion" proved="true">
     <proof prover="5"><result status="valid" time="0.23" steps="97"/></proof>
     </goal>
     <goal name="remove_products&#39;vc.15.0.0.3" expl="assertion" proved="true">
     <proof prover="5"><result status="valid" time="1.30" steps="436"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="remove_products&#39;vc.15.1" expl="VC for remove_products" proved="true">
   <proof prover="0"><result status="valid" time="2.12" steps="740"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.16" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="remove_products&#39;vc.16.0" expl="assertion" proved="true">
   <transf name="split_premise_right" proved="true" >
    <goal name="remove_products&#39;vc.16.0.0" expl="assertion" proved="true">
    <proof prover="6"><result status="valid" time="1.43" steps="87955"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="remove_products&#39;vc.16.1" expl="VC for remove_products" proved="true">
   <proof prover="1" timelimit="1"><result status="valid" time="0.04" steps="183975"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.17" expl="precondition" proved="true">
  <proof prover="1" timelimit="1"><result status="valid" time="0.04" steps="63417"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.18" expl="precondition" proved="true">
  <proof prover="5" timelimit="1"><result status="valid" time="0.03" steps="96"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.19" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="remove_products&#39;vc.19.0" expl="assertion" proved="true">
   <proof prover="5"><result status="valid" time="0.12" steps="101"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.20" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.15" steps="25419"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.21" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.14" steps="25283"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.22" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="remove_products&#39;vc.22.0" expl="precondition" proved="true">
   <proof prover="5"><result status="valid" time="0.04" steps="105"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.22.1" expl="precondition" proved="true">
   <proof prover="5"><result status="valid" time="0.03" steps="105"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.22.2" expl="precondition" proved="true">
   <proof prover="1" timelimit="5"><result status="valid" time="0.07" steps="203365"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.22.3" expl="precondition" proved="true">
   <proof prover="5"><result status="valid" time="0.04" steps="105"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.23" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.04" steps="109"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.24" expl="precondition" proved="true">
  <transf name="split_premise_right" proved="true" >
   <goal name="remove_products&#39;vc.24.0" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="2.04" steps="102763"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.25" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.05" steps="109"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.26" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.04" steps="109"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.27" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="remove_products&#39;vc.27.0" expl="precondition" proved="true">
   <proof prover="1" timelimit="1"><result status="valid" time="0.06" steps="133301"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.27.1" expl="precondition" proved="true">
   <proof prover="1" timelimit="1"><result status="valid" time="0.06" steps="203351"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.27.2" expl="precondition" proved="true">
   <proof prover="0" timelimit="5"><result status="valid" time="0.13" steps="113"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.28" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.04" steps="116"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.29" expl="assertion" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="remove_products&#39;vc.29.0" expl="assertion" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="remove_products&#39;vc.29.0.0" expl="assertion" proved="true">
    <proof prover="5"><result status="valid" time="0.04" steps="111"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.29.0.1" expl="assertion" proved="true">
    <proof prover="5"><result status="valid" time="0.04" steps="111"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.29.0.2" expl="assertion" proved="true">
    <proof prover="5"><result status="valid" time="1.06" steps="636"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.29.0.3" expl="VC for remove_products" proved="true">
    <proof prover="5"><result status="valid" time="0.14" steps="117"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.29.0.4" expl="VC for remove_products" proved="true">
    <transf name="case" proved="true" arg1="(j &lt; x)">
     <goal name="remove_products&#39;vc.29.0.4.0" expl="true case" proved="true">
     <proof prover="5"><result status="valid" time="0.03" steps="120"/></proof>
     </goal>
     <goal name="remove_products&#39;vc.29.0.4.1" expl="false case" proved="true">
     <transf name="unfold" proved="true" arg1="inv_marked_old_nexts1" arg2="in" arg3="Requires4">
      <goal name="remove_products&#39;vc.29.0.4.1.0" expl="false case" proved="true">
      <proof prover="6" timelimit="5"><result status="valid" time="3.09" steps="192007"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.30" expl="variant decrease" proved="true">
  <proof prover="6"><result status="valid" time="0.47" steps="48590"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.31" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="remove_products&#39;vc.31.0" expl="precondition" proved="true">
   <proof prover="5"><result status="valid" time="0.04" steps="113"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.31.1" expl="precondition" proved="true">
   <proof prover="5"><result status="valid" time="0.04" steps="113"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.31.2" expl="precondition" proved="true">
   <proof prover="5"><result status="valid" time="0.04" steps="113"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.31.3" expl="precondition" proved="true">
   <proof prover="5"><result status="valid" time="0.04" steps="113"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.31.4" expl="precondition" proved="true">
   <proof prover="5"><result status="valid" time="0.04" steps="113"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.31.5" expl="precondition" proved="true">
   <proof prover="5" timelimit="1"><result status="valid" time="0.04" steps="113"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.31.6" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.46" steps="48475"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.31.7" expl="precondition" proved="true">
   <proof prover="1" timelimit="1"><result status="valid" time="0.08" steps="251122"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.31.8" expl="precondition" proved="true">
   <proof prover="0" timelimit="1"><result status="valid" time="0.38" steps="120"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.32" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="remove_products&#39;vc.32.0" expl="precondition" proved="true">
   <transf name="inline_goal" proved="true" >
    <goal name="remove_products&#39;vc.32.0.0" expl="precondition" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="remove_products&#39;vc.32.0.0.0" expl="VC for remove_products" proved="true">
     <proof prover="2"><result status="valid" time="0.16" steps="38693"/></proof>
     </goal>
     <goal name="remove_products&#39;vc.32.0.0.1" expl="VC for remove_products" proved="true">
     <proof prover="0" timelimit="1"><result status="valid" time="0.12" steps="116"/></proof>
     </goal>
     <goal name="remove_products&#39;vc.32.0.0.2" expl="VC for remove_products" proved="true">
     <transf name="unfold" proved="true" arg1="inv_remove_products" arg2="in" arg3="Requires8">
      <goal name="remove_products&#39;vc.32.0.0.2.0" expl="VC for remove_products" proved="true">
      <transf name="split_premise_right" proved="true" >
       <goal name="remove_products&#39;vc.32.0.0.2.0.0" expl="VC for remove_products" proved="true">
       <transf name="inline_goal" proved="true" >
        <goal name="remove_products&#39;vc.32.0.0.2.0.0.0" expl="VC for remove_products" proved="true">
        <transf name="unfold" proved="true" arg1="all_primes" arg2="in" arg3="Requires11">
         <goal name="remove_products&#39;vc.32.0.0.2.0.0.0.0" expl="VC for remove_products" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="remove_products&#39;vc.32.0.0.2.0.0.0.0.0" expl="VC for remove_products" proved="true">
          <transf name="instantiate" proved="true" arg1="Requires11" arg2="i">
           <goal name="remove_products&#39;vc.32.0.0.2.0.0.0.0.0.0" expl="VC for remove_products" proved="true">
           <proof prover="5"><result status="valid" time="0.67" steps="642"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="remove_products&#39;vc.32.0.0.2.0.0.0.0.1" expl="VC for remove_products" proved="true">
          <transf name="instantiate" proved="true" arg1="Requires11" arg2="i">
           <goal name="remove_products&#39;vc.32.0.0.2.0.0.0.0.1.0" expl="VC for remove_products" proved="true">
           <proof prover="5"><result status="valid" time="0.70" steps="659"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="remove_products&#39;vc.32.0.0.3" expl="VC for remove_products" proved="true">
     <proof prover="2"><result status="valid" time="0.12" steps="29658"/></proof>
     </goal>
     <goal name="remove_products&#39;vc.32.0.0.4" expl="VC for remove_products" proved="true">
     <proof prover="1"><result status="valid" time="0.10" steps="231627"/></proof>
     </goal>
     <goal name="remove_products&#39;vc.32.0.0.5" expl="VC for remove_products" proved="true">
     <proof prover="1" timelimit="1"><result status="valid" time="0.07" steps="214112"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.33" expl="precondition" proved="true">
  <proof prover="1" timelimit="5"><result status="valid" time="0.05" steps="175107"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.34" expl="precondition" proved="true">
  <proof prover="1" timelimit="1"><result status="valid" time="0.05" steps="74695"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.35" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.62" steps="390"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.36" expl="precondition" proved="true">
  <proof prover="0" timelimit="1"><result status="valid" time="0.11" steps="68"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.37" expl="precondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="remove_products&#39;vc.37.0" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="remove_products&#39;vc.37.0.0" expl="precondition" proved="true">
    <proof prover="1" timelimit="1"><result status="valid" time="0.09" steps="242318"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.37.0.1" expl="precondition" proved="true">
    <proof prover="1" timelimit="1"><result status="valid" time="0.10" steps="185811"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.37.0.2" expl="precondition" proved="true">
    <proof prover="2"><result status="valid" time="0.14" steps="25940"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.37.0.3" expl="precondition" proved="true">
    <transf name="case" proved="true" arg1="(i = p)">
     <goal name="remove_products&#39;vc.37.0.3.0" expl="true case (precondition)" proved="true">
     <transf name="remove" proved="true" arg1="H24,H23,H22">
      <goal name="remove_products&#39;vc.37.0.3.0.0" expl="true case (precondition)" proved="true">
      <proof prover="5"><result status="valid" time="4.43" steps="683"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="remove_products&#39;vc.37.0.3.1" expl="false case (precondition)" proved="true">
     <transf name="assert" proved="true" arg1="(forall i. 0 &lt;= i &lt; div (length marked_old - 1) n -&gt; i &lt;&gt; p -&gt; (nexts t)[i] = (nexts t1)[i])">
      <goal name="remove_products&#39;vc.37.0.3.1.0" expl="asserted formula" proved="true">
      <proof prover="5"><result status="valid" time="0.38" steps="147"/></proof>
      </goal>
      <goal name="remove_products&#39;vc.37.0.3.1.1" expl="false case (precondition)" proved="true">
      <transf name="inline_all" proved="true" >
       <goal name="remove_products&#39;vc.37.0.3.1.1.0" expl="false case (precondition)" proved="true">
       <proof prover="1"><result status="valid" time="1.84" steps="1500474"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.38" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.65" steps="631"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.39" expl="precondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="remove_products&#39;vc.39.0" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="remove_products&#39;vc.39.0.0" expl="precondition" proved="true">
    <proof prover="2" timelimit="10"><result status="valid" time="0.13" steps="34962"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.39.0.1" expl="precondition" proved="true">
    <proof prover="1"><result status="valid" time="0.05" steps="189928"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.39.0.2" expl="precondition" proved="true">
    <proof prover="2" timelimit="10"><result status="valid" time="0.10" steps="25973"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.39.0.3" expl="precondition" proved="true">
    <proof prover="1"><result status="valid" time="0.08" steps="240976"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.39.0.4" expl="precondition" proved="true">
    <transf name="unfold" proved="true" arg1="inv_marked_old_nexts2_partial" arg2="in" arg3="Requires8">
     <goal name="remove_products&#39;vc.39.0.4.0" expl="precondition" proved="true">
     <transf name="split_premise_right" proved="true" >
      <goal name="remove_products&#39;vc.39.0.4.0.0" expl="precondition" proved="true">
      <transf name="instantiate" proved="true" arg1="Requires8" arg2="i">
       <goal name="remove_products&#39;vc.39.0.4.0.0.0" expl="precondition" proved="true">
       <proof prover="6"><result status="valid" time="0.74" steps="69042"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.40" expl="precondition" proved="true">
  <proof prover="0" timelimit="5"><result status="valid" time="0.20" steps="71"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.41" expl="postcondition" proved="true">
  <proof prover="5"><result status="valid" time="0.02" steps="127"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.42" expl="postcondition" proved="true">
  <proof prover="5"><result status="valid" time="0.02" steps="127"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.43" expl="postcondition" proved="true">
  <proof prover="5"><result status="valid" time="0.02" steps="127"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.44" expl="postcondition" proved="true">
  <proof prover="5"><result status="valid" time="0.02" steps="127"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.45" expl="postcondition" proved="true">
  <proof prover="5"><result status="valid" time="0.04" steps="127"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.46" expl="postcondition" proved="true">
  <proof prover="0" timelimit="1"><result status="valid" time="0.15" steps="67"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.47" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="0.08" steps="205987"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.48" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="remove_products&#39;vc.48.0" expl="variant decrease" proved="true">
   <proof prover="2" timelimit="10"><result status="valid" time="0.09" steps="28732"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.48.1" expl="variant decrease" proved="true">
   <proof prover="1"><result status="valid" time="0.07" steps="210613"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.49" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="remove_products&#39;vc.49.0" expl="precondition" proved="true">
   <proof prover="5" timelimit="1"><result status="valid" time="0.04" steps="97"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.49.1" expl="precondition" proved="true">
   <proof prover="5" timelimit="1"><result status="valid" time="0.04" steps="97"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.49.2" expl="precondition" proved="true">
   <proof prover="5" timelimit="1"><result status="valid" time="0.04" steps="97"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.49.3" expl="precondition" proved="true">
   <proof prover="5" timelimit="1"><result status="valid" time="0.05" steps="97"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.49.4" expl="precondition" proved="true">
   <proof prover="5" timelimit="1"><result status="valid" time="0.05" steps="97"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.49.5" expl="precondition" proved="true">
   <proof prover="5" timelimit="1"><result status="valid" time="0.04" steps="97"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.49.6" expl="precondition" proved="true">
   <proof prover="1" timelimit="1"><result status="valid" time="0.07" steps="193594"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.49.7" expl="precondition" proved="true">
   <proof prover="5" timelimit="1"><result status="valid" time="0.03" steps="97"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.49.8" expl="precondition" proved="true">
   <proof prover="0" timelimit="1"><result status="valid" time="0.26" steps="112"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.50" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="remove_products&#39;vc.50.0" expl="precondition" proved="true">
   <transf name="inline_goal" proved="true" >
    <goal name="remove_products&#39;vc.50.0.0" expl="precondition" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="remove_products&#39;vc.50.0.0.0" expl="VC for remove_products" proved="true">
     <proof prover="2"><result status="valid" time="0.15" steps="38653"/></proof>
     </goal>
     <goal name="remove_products&#39;vc.50.0.0.1" expl="VC for remove_products" proved="true">
     <proof prover="0" timelimit="1"><result status="valid" time="0.11" steps="108"/></proof>
     </goal>
     <goal name="remove_products&#39;vc.50.0.0.2" expl="VC for remove_products" proved="true">
     <transf name="unfold" proved="true" arg1="inv_remove_products" arg2="in" arg3="Requires8">
      <goal name="remove_products&#39;vc.50.0.0.2.0" expl="VC for remove_products" proved="true">
      <transf name="split_premise_right" proved="true" >
       <goal name="remove_products&#39;vc.50.0.0.2.0.0" expl="VC for remove_products" proved="true">
       <transf name="inline_goal" proved="true" >
        <goal name="remove_products&#39;vc.50.0.0.2.0.0.0" expl="VC for remove_products" proved="true">
        <transf name="unfold" proved="true" arg1="all_primes" arg2="in" arg3="Requires11">
         <goal name="remove_products&#39;vc.50.0.0.2.0.0.0.0" expl="VC for remove_products" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="remove_products&#39;vc.50.0.0.2.0.0.0.0.0" expl="VC for remove_products" proved="true">
          <transf name="instantiate" proved="true" arg1="Requires11" arg2="i">
           <goal name="remove_products&#39;vc.50.0.0.2.0.0.0.0.0.0" expl="VC for remove_products" proved="true">
           <proof prover="5"><result status="valid" time="0.63" steps="469"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="remove_products&#39;vc.50.0.0.2.0.0.0.0.1" expl="VC for remove_products" proved="true">
          <transf name="instantiate" proved="true" arg1="Requires11" arg2="i">
           <goal name="remove_products&#39;vc.50.0.0.2.0.0.0.0.1.0" expl="VC for remove_products" proved="true">
           <proof prover="5"><result status="valid" time="0.50" steps="462"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="remove_products&#39;vc.50.0.0.3" expl="VC for remove_products" proved="true">
     <proof prover="2"><result status="valid" time="0.12" steps="29531"/></proof>
     </goal>
     <goal name="remove_products&#39;vc.50.0.0.4" expl="VC for remove_products" proved="true">
     <proof prover="1"><result status="valid" time="0.11" steps="217296"/></proof>
     </goal>
     <goal name="remove_products&#39;vc.50.0.0.5" expl="VC for remove_products" proved="true">
     <proof prover="1" timelimit="1"><result status="valid" time="0.06" steps="205061"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.51" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.05" steps="169027"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.52" expl="precondition" proved="true">
  <proof prover="5" timelimit="1"><result status="valid" time="0.02" steps="111"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.53" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.56" steps="325"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.54" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.07" steps="200375"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.55" expl="precondition" proved="true">
  <proof prover="5" timelimit="1"><result status="valid" time="0.04" steps="115"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.56" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="remove_products&#39;vc.56.0" expl="precondition" proved="true">
   <transf name="inline_goal" proved="true" >
    <goal name="remove_products&#39;vc.56.0.0" expl="precondition" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="remove_products&#39;vc.56.0.0.0" expl="VC for remove_products" proved="true">
     <proof prover="5" timelimit="1"><result status="valid" time="0.25" steps="118"/></proof>
     </goal>
     <goal name="remove_products&#39;vc.56.0.0.1" expl="VC for remove_products" proved="true">
     <proof prover="0"><result status="valid" time="0.11" steps="63"/></proof>
     </goal>
     <goal name="remove_products&#39;vc.56.0.0.2" expl="VC for remove_products" proved="true">
     <proof prover="5"><result status="valid" time="0.20" steps="118"/></proof>
     </goal>
     <goal name="remove_products&#39;vc.56.0.0.3" expl="VC for remove_products" proved="true">
     <proof prover="1" timelimit="1"><result status="valid" time="0.15" steps="268970"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.57" expl="precondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="remove_products&#39;vc.57.0" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="remove_products&#39;vc.57.0.0" expl="precondition" proved="true">
    <proof prover="2" timelimit="10"><result status="valid" time="0.13" steps="34871"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.57.0.1" expl="precondition" proved="true">
    <proof prover="1"><result status="valid" time="0.10" steps="187418"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.57.0.2" expl="precondition" proved="true">
    <proof prover="2" timelimit="10"><result status="valid" time="0.12" steps="25539"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.57.0.3" expl="precondition" proved="true">
    <proof prover="1"><result status="valid" time="0.09" steps="227471"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.57.0.4" expl="precondition" proved="true">
    <transf name="unfold" proved="true" arg1="inv_marked_old_nexts2_partial" arg2="in" arg3="Requires8">
     <goal name="remove_products&#39;vc.57.0.4.0" expl="precondition" proved="true">
     <transf name="split_premise_right" proved="true" >
      <goal name="remove_products&#39;vc.57.0.4.0.0" expl="precondition" proved="true">
      <transf name="instantiate" proved="true" arg1="Requires8" arg2="i">
       <goal name="remove_products&#39;vc.57.0.4.0.0.0" expl="precondition" proved="true">
       <proof prover="6"><result status="valid" time="0.67" steps="65337"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.58" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.02" steps="118"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.59" expl="postcondition" proved="true">
  <proof prover="5"><result status="valid" time="0.03" steps="111"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.60" expl="postcondition" proved="true">
  <proof prover="5"><result status="valid" time="0.03" steps="111"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.61" expl="postcondition" proved="true">
  <proof prover="5"><result status="valid" time="0.02" steps="111"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.62" expl="postcondition" proved="true">
  <proof prover="5"><result status="valid" time="0.03" steps="111"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.63" expl="postcondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="remove_products&#39;vc.63.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="remove_products&#39;vc.63.0.0" expl="postcondition" proved="true">
    <proof prover="5"><result status="valid" time="0.21" steps="115"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.63.0.1" expl="postcondition" proved="true">
    <proof prover="5"><result status="valid" time="0.22" steps="115"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.63.0.2" expl="postcondition" proved="true">
    <proof prover="5"><result status="valid" time="0.03" steps="111"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.63.0.3" expl="postcondition" proved="true">
    <proof prover="5"><result status="valid" time="0.97" steps="510"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.64" expl="postcondition" proved="true">
  <proof prover="5"><result status="valid" time="0.02" steps="111"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.65" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="remove_products&#39;vc.65.0" expl="assertion" proved="true">
   <proof prover="5"><result status="valid" time="0.03" steps="72"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.65.1" expl="VC for remove_products" proved="true">
   <proof prover="1" timelimit="5"><result status="valid" time="0.06" steps="157121"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.65.2" expl="VC for remove_products" proved="true">
   <proof prover="5"><result status="valid" time="1.00" steps="529"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.65.3" expl="VC for remove_products" proved="true">
   <proof prover="5"><result status="valid" time="0.09" steps="283"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.65.4" expl="VC for remove_products" proved="true">
   <proof prover="5"><result status="valid" time="0.10" steps="82"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.66" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="remove_products&#39;vc.66.0" expl="precondition" proved="true">
   <transf name="inline_all" proved="true" >
    <goal name="remove_products&#39;vc.66.0.0" expl="precondition" proved="true">
    <proof prover="1"><result status="valid" time="1.06" steps="993472"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="remove_products&#39;vc.66.1" expl="precondition" proved="true">
   <proof prover="5"><result status="valid" time="0.03" steps="78"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.66.2" expl="VC for remove_products" proved="true">
   <transf name="inline_goal" proved="true" >
    <goal name="remove_products&#39;vc.66.2.0" expl="VC for remove_products" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="remove_products&#39;vc.66.2.0.0" expl="VC for remove_products" proved="true">
     <proof prover="5"><result status="valid" time="0.04" steps="78"/></proof>
     </goal>
     <goal name="remove_products&#39;vc.66.2.0.1" expl="VC for remove_products" proved="true">
     <proof prover="5"><result status="valid" time="0.04" steps="78"/></proof>
     </goal>
     <goal name="remove_products&#39;vc.66.2.0.2" expl="VC for remove_products" proved="true">
     <proof prover="5"><result status="valid" time="0.03" steps="74"/></proof>
     </goal>
     <goal name="remove_products&#39;vc.66.2.0.3" expl="VC for remove_products" proved="true">
     <transf name="unfold" proved="true" arg1="inv_marked_old_nexts2_partial" arg2="in" arg3="Requires1">
      <goal name="remove_products&#39;vc.66.2.0.3.0" expl="VC for remove_products" proved="true">
      <proof prover="5"><result status="valid" time="0.46" steps="324"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="remove_products&#39;vc.66.3" expl="VC for remove_products" proved="true">
   <proof prover="1" timelimit="5"><result status="valid" time="0.07" steps="177541"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.66.4" expl="VC for remove_products" proved="true">
   <proof prover="5"><result status="valid" time="0.03" steps="74"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.66.5" expl="VC for remove_products" proved="true">
   <proof prover="1"><result status="valid" time="0.09" steps="201001"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.67" expl="postcondition" proved="true">
  <proof prover="5"><result status="valid" time="0.03" steps="76"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.68" expl="postcondition" proved="true">
  <proof prover="5"><result status="valid" time="0.02" steps="76"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.69" expl="postcondition" proved="true">
  <proof prover="5"><result status="valid" time="0.03" steps="76"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.70" expl="postcondition" proved="true">
  <proof prover="5"><result status="valid" time="0.03" steps="76"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.71" expl="postcondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="remove_products&#39;vc.71.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="remove_products&#39;vc.71.0.0" expl="postcondition" proved="true">
    <proof prover="5"><result status="valid" time="0.07" steps="80"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.71.0.1" expl="postcondition" proved="true">
    <proof prover="5"><result status="valid" time="0.10" steps="80"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.71.0.2" expl="postcondition" proved="true">
    <proof prover="5"><result status="valid" time="0.03" steps="76"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.71.0.3" expl="postcondition" proved="true">
    <transf name="unfold" proved="true" arg1="prime_products_marked" arg2="in" arg3="Requires2">
     <goal name="remove_products&#39;vc.71.0.3.0" expl="postcondition" proved="true">
     <transf name="split_all_right" proved="true" >
      <goal name="remove_products&#39;vc.71.0.3.0.0" expl="postcondition" proved="true">
      <transf name="case" proved="true" arg1="(i &lt; (nexts t)[x])">
       <goal name="remove_products&#39;vc.71.0.3.0.0.0" expl="true case (postcondition)" proved="true">
       <proof prover="5"><result status="valid" time="0.13" steps="94"/></proof>
       </goal>
       <goal name="remove_products&#39;vc.71.0.3.0.0.1" expl="false case (postcondition)" proved="true">
       <proof prover="5"><result status="valid" time="0.26" steps="313"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.72" expl="postcondition" proved="true">
  <proof prover="5"><result status="valid" time="0.03" steps="78"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.73" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="remove_products&#39;vc.73.0" expl="precondition" proved="true">
   <transf name="inline_all" proved="true" >
    <goal name="remove_products&#39;vc.73.0.0" expl="precondition" proved="true">
    <proof prover="1"><result status="valid" time="1.18" steps="976975"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="remove_products&#39;vc.73.1" expl="precondition" proved="true">
   <proof prover="5"><result status="valid" time="0.03" steps="74"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.73.2" expl="VC for remove_products" proved="true">
   <proof prover="5"><result status="valid" time="3.57" steps="1007"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.73.3" expl="VC for remove_products" proved="true">
   <proof prover="1" timelimit="5"><result status="valid" time="0.06" steps="169369"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.73.4" expl="VC for remove_products" proved="true">
   <proof prover="5"><result status="valid" time="0.02" steps="70"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.73.5" expl="VC for remove_products" proved="true">
   <proof prover="1"><result status="valid" time="0.07" steps="190267"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.74" expl="postcondition" proved="true">
  <proof prover="5"><result status="valid" time="0.03" steps="72"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.75" expl="postcondition" proved="true">
  <proof prover="5"><result status="valid" time="0.04" steps="72"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.76" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.09" steps="22320"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.77" expl="postcondition" proved="true">
  <proof prover="0" timelimit="1"><result status="valid" time="0.06" steps="37"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.78" expl="postcondition" proved="true">
  <proof prover="5" timelimit="1"><result status="valid" time="0.05" steps="75"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.79" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.06" steps="22350"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.80" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.03" steps="86"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.81" expl="precondition" proved="true">
  <proof prover="0" timelimit="5"><result status="valid" time="0.04" steps="79"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.82" expl="integer overflow" proved="true">
  <proof prover="5"><result status="valid" time="0.02" steps="31"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.83" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.03" steps="31"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.84" expl="precondition" proved="true">
  <transf name="assert" proved="true" arg1="(mod (int63&#39;int n) 2 = 1)">
   <goal name="remove_products&#39;vc.84.0" expl="asserted formula" proved="true">
   <proof prover="1" timelimit="5"><result status="valid" time="0.06" steps="125506"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.84.1" expl="precondition" proved="true">
   <proof prover="5"><result status="valid" time="0.10" steps="37"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.85" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.04" steps="109"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.86" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.02" steps="42"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.87" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="remove_products&#39;vc.87.0" expl="assertion" proved="true">
   <proof prover="5"><result status="valid" time="0.06" steps="179"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.87.1" expl="assertion" proved="true">
   <transf name="split_premise_right" proved="true" >
    <goal name="remove_products&#39;vc.87.1.0" expl="assertion" proved="true">
    <proof prover="6"><result status="valid" time="0.22" steps="45096"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="remove_products&#39;vc.87.2" expl="VC for remove_products" proved="true">
   <proof prover="0" timelimit="5"><result status="valid" time="0.05" steps="83"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.87.3" expl="VC for remove_products" proved="true">
   <proof prover="5"><result status="valid" time="0.04" steps="49"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.87.4" expl="VC for remove_products" proved="true">
   <proof prover="1"><result status="valid" time="0.05" steps="151233"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.88" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="remove_products&#39;vc.88.0" expl="precondition" proved="true">
   <proof prover="5" timelimit="1"><result status="valid" time="0.05" steps="37"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.88.1" expl="precondition" proved="true">
   <proof prover="5" timelimit="1"><result status="valid" time="0.02" steps="37"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.88.2" expl="precondition" proved="true">
   <proof prover="5" timelimit="1"><result status="valid" time="0.06" steps="37"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.88.3" expl="precondition" proved="true">
   <proof prover="1" timelimit="1"><result status="valid" time="0.07" steps="9028"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.88.4" expl="precondition" proved="true">
   <proof prover="1" timelimit="5"><result status="valid" time="0.05" steps="133964"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.88.5" expl="precondition" proved="true">
   <proof prover="5" timelimit="1"><result status="valid" time="0.05" steps="37"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.88.6" expl="precondition" proved="true">
   <proof prover="1"><result status="valid" time="0.06" steps="157052"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.88.7" expl="precondition" proved="true">
   <proof prover="5"><result status="valid" time="0.04" steps="37"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.88.8" expl="precondition" proved="true">
   <proof prover="1" timelimit="5"><result status="valid" time="0.05" steps="177413"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.89" expl="precondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="remove_products&#39;vc.89.0" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="remove_products&#39;vc.89.0.0" expl="precondition" proved="true">
    <proof prover="0" timelimit="5"><result status="valid" time="0.02" steps="48"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.89.0.1" expl="precondition" proved="true">
    <proof prover="1" timelimit="5"><result status="valid" time="0.09" steps="157571"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.89.0.2" expl="precondition" proved="true">
    <transf name="assert" proved="true" arg1="(n * n &gt; n)">
     <goal name="remove_products&#39;vc.89.0.2.0" expl="asserted formula" proved="true">
     <proof prover="1" timelimit="5"><result status="valid" time="0.06" steps="139575"/></proof>
     </goal>
     <goal name="remove_products&#39;vc.89.0.2.1" expl="precondition" proved="true">
     <transf name="inline_goal" proved="true" >
      <goal name="remove_products&#39;vc.89.0.2.1.0" expl="precondition" proved="true">
      <transf name="unfold" proved="true" arg1="inv_remove_products" arg2="in" arg3="Requires3">
       <goal name="remove_products&#39;vc.89.0.2.1.0.0" expl="precondition" proved="true">
       <transf name="split_premise_right" proved="true" >
        <goal name="remove_products&#39;vc.89.0.2.1.0.0.0" expl="precondition" proved="true">
        <proof prover="6" timelimit="5"><result status="valid" time="0.31" steps="42379"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="remove_products&#39;vc.89.0.3" expl="precondition" proved="true">
    <proof prover="1" timelimit="1"><result status="valid" time="0.06" steps="131567"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.89.0.4" expl="precondition" proved="true">
    <proof prover="1"><result status="valid" time="0.10" steps="164844"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.89.0.5" expl="precondition" proved="true">
    <proof prover="0" timelimit="1"><result status="valid" time="0.03" steps="25"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.90" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.07" steps="147771"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.91" expl="precondition" proved="true">
  <proof prover="0" timelimit="5"><result status="valid" time="0.02" steps="27"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.92" expl="precondition" proved="true">
  <proof prover="0" timelimit="1"><result status="valid" time="0.05" steps="67"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.93" expl="precondition" proved="true">
  <transf name="split_premise_right" proved="true" >
   <goal name="remove_products&#39;vc.93.0" expl="precondition" proved="true">
   <proof prover="6" timelimit="5"><result status="valid" time="0.34" steps="42217"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.94" expl="precondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="remove_products&#39;vc.94.0" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="remove_products&#39;vc.94.0.0" expl="precondition" proved="true">
    <proof prover="1" timelimit="1"><result status="valid" time="0.06" steps="180733"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.94.0.1" expl="precondition" proved="true">
    <proof prover="1" timelimit="1"><result status="valid" time="0.10" steps="156330"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.94.0.2" expl="precondition" proved="true">
    <proof prover="2"><result status="valid" time="0.07" steps="24354"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.94.0.3" expl="precondition" proved="true">
    <proof prover="1" timelimit="5"><result status="valid" time="0.06" steps="185866"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.95" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="remove_products&#39;vc.95.0" expl="precondition" proved="true">
   <transf name="inline_goal" proved="true" >
    <goal name="remove_products&#39;vc.95.0.0" expl="precondition" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="remove_products&#39;vc.95.0.0.0" expl="VC for remove_products" proved="true">
     <proof prover="1"><result status="valid" time="0.06" steps="187860"/></proof>
     </goal>
     <goal name="remove_products&#39;vc.95.0.0.1" expl="VC for remove_products" proved="true">
     <proof prover="1"><result status="valid" time="0.03" steps="11354"/></proof>
     </goal>
     <goal name="remove_products&#39;vc.95.0.0.2" expl="VC for remove_products" proved="true">
     <proof prover="1" timelimit="5"><result status="valid" time="0.07" steps="215006"/></proof>
     </goal>
     <goal name="remove_products&#39;vc.95.0.0.3" expl="VC for remove_products" proved="true">
     <proof prover="6"><result status="valid" time="0.19" steps="47958"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.96" expl="precondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="remove_products&#39;vc.96.0" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="remove_products&#39;vc.96.0.0" expl="precondition" proved="true">
    <proof prover="0" timelimit="5"><result status="valid" time="0.00" steps="32"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.96.0.1" expl="precondition" proved="true">
    <proof prover="1"><result status="valid" time="0.07" steps="157731"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.96.0.2" expl="precondition" proved="true">
    <proof prover="5"><result status="valid" time="0.02" steps="57"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.96.0.3" expl="precondition" proved="true">
    <proof prover="1" timelimit="5"><result status="valid" time="0.05" steps="175141"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.96.0.4" expl="precondition" proved="true">
    <transf name="inline_all" proved="true" >
     <goal name="remove_products&#39;vc.96.0.4.0" expl="precondition" proved="true">
     <proof prover="1"><result status="valid" time="0.46" steps="877428"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.97" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.04" steps="59"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.98" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.05" steps="54"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.99" expl="precondition" proved="true">
  <proof prover="5" timelimit="1"><result status="valid" time="0.03" steps="58"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.100" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.04" steps="58"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.101" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.03" steps="58"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.102" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.02" steps="58"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.103" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.02" steps="58"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.104" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.05" steps="193599"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.105" expl="precondition" proved="true">
  <proof prover="5" timelimit="1"><result status="valid" time="0.03" steps="60"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.106" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="32"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.107" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.04" steps="62"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.108" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.04" steps="62"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.109" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.02" steps="62"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.110" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.06" steps="22351"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.111" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.10" steps="28415"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.112" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.01" steps="29"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.113" expl="postcondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="remove_products&#39;vc.113.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="remove_products&#39;vc.113.0.0" expl="postcondition" proved="true">
    <transf name="unfold" proved="true" arg1="only_products_marked" arg2="in" arg3="Ensures5">
     <goal name="remove_products&#39;vc.113.0.0.0" expl="postcondition" proved="true">
     <transf name="instantiate" proved="true" arg1="Ensures5" arg2="k">
      <goal name="remove_products&#39;vc.113.0.0.0.0" expl="postcondition" proved="true">
      <proof prover="0" timelimit="5"><result status="valid" time="0.80" steps="295"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="previously_marked_products_impl_prime&#39;vc" expl="VC for previously_marked_products_impl_prime" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="previously_marked_products_impl_prime&#39;vc.0" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="previously_marked_products_impl_prime&#39;vc.0.0" expl="assertion" proved="true">
   <transf name="inline_all" proved="true" >
    <goal name="previously_marked_products_impl_prime&#39;vc.0.0.0" expl="assertion" proved="true">
    <proof prover="1" timelimit="1"><result status="valid" time="0.18" steps="457653"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="previously_marked_products_impl_prime&#39;vc.0.1" expl="VC for previously_marked_products_impl_prime" proved="true">
   <proof prover="5" timelimit="10"><result status="valid" time="0.59" steps="631"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="previously_marked_products_impl_prime&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.00" steps="16"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="only_products_marked_impl_not_marked&#39;vc" expl="VC for only_products_marked_impl_not_marked" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="only_products_marked_impl_not_marked&#39;vc.0" expl="assertion" proved="true">
  <proof prover="0" timelimit="1"><result status="valid" time="0.02" steps="41"/></proof>
  </goal>
  <goal name="only_products_marked_impl_not_marked&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="0" timelimit="1"><result status="valid" time="0.01" steps="35"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="EulerSieveImpl">
 <goal name="conservation_inv_arr_on_mark&#39;vc" expl="VC for conservation_inv_arr_on_mark" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="conservation_inv_arr_on_mark&#39;vc.0" expl="assertion" proved="true">
  <proof prover="5" timelimit="1"><result status="valid" time="0.30" steps="144"/></proof>
  </goal>
  <goal name="conservation_inv_arr_on_mark&#39;vc.1" expl="assertion" proved="true">
  <proof prover="5" timelimit="1"><result status="valid" time="0.33" steps="179"/></proof>
  </goal>
  <goal name="conservation_inv_arr_on_mark&#39;vc.2" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="(abs arr[i] = abs arr[i &lt;- - arr[i]][i])">
   <goal name="conservation_inv_arr_on_mark&#39;vc.2.0" expl="asserted formula" proved="true">
   <proof prover="5"><result status="valid" time="0.20" steps="141"/></proof>
   </goal>
   <goal name="conservation_inv_arr_on_mark&#39;vc.2.1" expl="postcondition" proved="true">
   <transf name="case" proved="true" arg1="(j = i)">
    <goal name="conservation_inv_arr_on_mark&#39;vc.2.1.0" expl="true case (postcondition)" proved="true">
    <proof prover="5"><result status="valid" time="0.24" steps="181"/></proof>
    </goal>
    <goal name="conservation_inv_arr_on_mark&#39;vc.2.1.1" expl="false case (postcondition)" proved="true">
    <proof prover="5"><result status="valid" time="2.24" steps="722"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="conservation_inv_arr_on_jump&#39;vc" expl="VC for conservation_inv_arr_on_jump" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="conservation_inv_arr_on_jump&#39;vc.0" expl="precondition" proved="true">
  <proof prover="5" timelimit="1"><result status="valid" time="0.10" steps="22"/></proof>
  </goal>
  <goal name="conservation_inv_arr_on_jump&#39;vc.1" expl="precondition" proved="true">
  <proof prover="5" timelimit="10"><result status="valid" time="0.02" steps="22"/></proof>
  </goal>
  <goal name="conservation_inv_arr_on_jump&#39;vc.2" expl="assertion" proved="true">
  <proof prover="5"><result status="valid" time="2.11" steps="347"/></proof>
  </goal>
  <goal name="conservation_inv_arr_on_jump&#39;vc.3" expl="assertion" proved="true">
  <proof prover="5"><result status="valid" time="3.57" steps="336"/></proof>
  </goal>
  <goal name="conservation_inv_arr_on_jump&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="5" timelimit="10"><result status="valid" time="5.33" steps="2778"/></proof>
  <transf name="remove" proved="true" arg1="zero1,one1,(-),(&gt;),(&lt;=),(&gt;=),int63&#39;maxInt,int63&#39;minInt,min_int63,max_int63,to_int,in_bounds,zero,one,even,odd,divides,prime,cons,snoc,(++),exchange,inv_nexts,inv_marked_nexts,inv_marked_old_nexts1,inv_marked_old_nexts2,inv_marked_marked_old,inv_marked_old_nexts2_partial,all_primes,all_products_marked,previously_marked_products,only_products_marked,prime_products_marked,inv_remove_products,all_differents,all_inf_or_eq,Assoc1,Unit_def_l,Unit_def_r,Inv_def_l,Inv_def_r,Comm1,Assoc,Mul_distr_l,Mul_distr_r,Comm,Unitary,NonTrivialRing,Refl,Trans,Antisymm,Total,ZeroLessOne,CompatOrderAdd,CompatOrderMult,Abs_le,Abs_pos,Div_mod,Mod_bound,Div_unique,Div_bound,Mod_1,Div_1,Div_inf,Div_inf_neg,Mod_0,Div_1_left,Div_minus1_left,Mod_1_left,Mod_minus1_left,Div_mult,Mod_mult,Div_mod1,Div_bound1,Mod_bound1,Div_sign_pos,Div_sign_neg,Mod_sign_pos,Mod_sign_neg,Rounds_toward_zero,Div_11,Mod_11,Div_inf1,Mod_inf,Div_mult1,Mod_mult1,to_int_in_bounds,extensionality,max_int&#39;def,min_int&#39;def,even_or_odd,even_not_odd,odd_not_even,even_odd,odd_even,even_even,odd_odd,even_2k,odd_2k1,even_mod2,divides&#39;spec,divides_refl,divides_1_n,divides_0,divides_left,divides_right,divides_oppr,divides_oppl,divides_oppr_rev,divides_oppl_rev,divides_plusr,divides_minusr,divides_multl,divides_multr,divides_factorl,divides_factorr,divides_n_1,divides_antisym,divides_trans,divides_bounds,mod_divides_euclidean,divides_mod_euclidean,mod_divides_computer,divides_mod_computer,even_divides,odd_divides,not_prime_1,prime_2,prime_3,prime_divisors,small_divisors,even_prime,odd_prime,mult_croissance_locale,mult_croissance,comp_mult_2,div_croissance_locale1,div_croissance1,div_croissance_locale2,div_croissance2,div_mult_1,mult_borne_sous_exp,sq_ineq,divides_div,divides_inf,not_prime_divider_limits,no_prod_impl_no_divider,not_prime_impl_divisor_under_sqrt,length_nonnegative,empty&#39;def,set&#39;def,singleton&#39;spec,cons&#39;spec,snoc&#39;spec,([..])&#39;spec,([..])&#39;def,([_..])&#39;def,([.._])&#39;def,(++)&#39;spec,exchange_set,conservation_inv_marked_nexts_on_marked_change,conservation_inv_marked_nexts_on_nexts_change,array63&#39;invariant,conservation_inv_arr_on_mark,H7,H6">
   <goal name="conservation_inv_arr_on_jump&#39;vc.4.0" expl="postcondition" proved="true">
   <proof prover="5" timelimit="1"><result status="valid" time="0.24" steps="166"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="t&#39;vc" expl="VC for t" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="t&#39;vc.0" expl="array creation size" proved="true">
  <proof prover="2"><result status="valid" time="0.06" steps="21330"/></proof>
  </goal>
  <goal name="t&#39;vc.1" expl="index in array bounds" proved="true">
  <proof prover="5" timelimit="1"><result status="valid" time="0.01" steps="12"/></proof>
  </goal>
  <goal name="t&#39;vc.2" expl="precondition" proved="true">
  <proof prover="5" timelimit="1"><result status="valid" time="0.01" steps="16"/></proof>
  </goal>
  <goal name="t&#39;vc.3" expl="precondition" proved="true">
  <proof prover="0" timelimit="1"><result status="valid" time="0.02" steps="11"/></proof>
  </goal>
  <goal name="t&#39;vc.4" expl="type invariant" proved="true">
  <proof prover="5" timelimit="1"><result status="valid" time="0.01" steps="24"/></proof>
  </goal>
  <goal name="t&#39;vc.5" expl="type invariant" proved="true">
  <proof prover="5"><result status="valid" time="0.01" steps="26"/></proof>
  </goal>
  <goal name="t&#39;vc.6" expl="type invariant" proved="true">
  <proof prover="5" timelimit="1"><result status="valid" time="0.01" steps="28"/></proof>
  </goal>
  <goal name="t&#39;vc.7" expl="type invariant" proved="true">
  <proof prover="5" timelimit="10"><result status="valid" time="0.02" steps="29"/></proof>
  </goal>
  <goal name="t&#39;vc.8" expl="type invariant" proved="true">
  <proof prover="5"><result status="valid" time="0.04" steps="170"/></proof>
  </goal>
  <goal name="t&#39;vc.9" expl="type invariant" proved="true">
  <proof prover="5"><result status="valid" time="0.04" steps="136"/></proof>
  </goal>
  <goal name="t&#39;vc.10" expl="type invariant" proved="true">
  <proof prover="5" timelimit="1"><result status="valid" time="0.01" steps="38"/></proof>
  </goal>
  <goal name="t&#39;vc.11" expl="type invariant" proved="true">
  <proof prover="5"><result status="valid" time="0.02" steps="36"/></proof>
  </goal>
  <goal name="t&#39;vc.12" expl="type invariant" proved="true">
  <proof prover="5"><result status="valid" time="0.03" steps="135"/></proof>
  </goal>
  <goal name="t&#39;vc.13" expl="type invariant" proved="true">
  <proof prover="5"><result status="valid" time="4.99" steps="2465"/></proof>
  <transf name="remove" proved="true" arg1="zero1,one1,(-),(&gt;),(&lt;=),(&gt;=),abs,int63&#39;maxInt,int63&#39;minInt,min_int63,max_int63,in_bounds,zero,one,even,odd,divides,prime,([]),singleton,cons,snoc,(++),exchange,inv_nexts,inv_marked_nexts,inv_marked_old_nexts1,inv_marked_old_nexts2,inv_marked_marked_old,inv_marked_old_nexts2_partial,all_primes,all_products_marked,previously_marked_products,only_products_marked,prime_products_marked,inv_remove_products,all_differents,all_inf_or_eq,marked,nexts,Assoc1,Unit_def_l,Unit_def_r,Inv_def_l,Inv_def_r,Comm1,Assoc,Mul_distr_l,Mul_distr_r,Comm,Unitary,NonTrivialRing,Refl,Trans,Antisymm,Total,ZeroLessOne,CompatOrderAdd,CompatOrderMult,Abs_le,Div_mod,Mod_bound,Div_unique,Div_bound,Mod_1,Div_1,Div_inf,Div_inf_neg,Mod_0,Div_1_left,Div_minus1_left,Mod_1_left,Mod_minus1_left,Div_mult,Mod_mult,Div_mod1,Div_bound1,Mod_bound1,Div_sign_pos,Div_sign_neg,Mod_sign_pos,Mod_sign_neg,Rounds_toward_zero,Div_11,Mod_11,Div_inf1,Mod_inf,Div_mult1,Mod_mult1,to_int_in_bounds,extensionality,max_int&#39;def,min_int&#39;def,even_or_odd,even_not_odd,odd_not_even,even_odd,odd_even,even_even,odd_odd,even_2k,odd_2k1,even_mod2,divides&#39;spec,divides_refl,divides_1_n,divides_0,divides_left,divides_right,divides_oppr,divides_oppl,divides_oppr_rev,divides_oppl_rev,divides_plusr,divides_minusr,divides_multl,divides_multr,divides_factorl,divides_factorr,divides_n_1,divides_antisym,divides_trans,divides_bounds,mod_divides_euclidean,divides_mod_euclidean,mod_divides_computer,divides_mod_computer,even_divides,odd_divides,not_prime_1,prime_2,prime_3,prime_divisors,small_divisors,even_prime,odd_prime,mult_croissance_locale,mult_croissance,comp_mult_2,div_croissance_locale1,div_croissance1,div_croissance_locale2,div_croissance2,div_mult_1,mult_borne_sous_exp,sq_ineq,divides_div,divides_inf,not_prime_divider_limits,no_prod_impl_no_divider,not_prime_impl_divisor_under_sqrt,length_nonnegative,(==)&#39;spec,create&#39;spec,empty&#39;def,set&#39;def,singleton&#39;spec,cons&#39;spec,snoc&#39;spec,([..])&#39;spec,([..])&#39;def,([_..])&#39;def,([.._])&#39;def,(++)&#39;spec,exchange_set,conservation_inv_marked_nexts_on_marked_change,conservation_inv_marked_nexts_on_nexts_change,array63&#39;invariant,conservation_inv_arr_on_mark,conservation_inv_arr_on_jump,Ensures6,Ensures3,Ensures2,Ensures1,Ensures,LoopInvariant8,LoopInvariant7,LoopInvariant6,LoopInvariant4,LoopInvariant3,LoopInvariant2,LoopInvariant1,LoopInvariant">
   <goal name="t&#39;vc.13.0" expl="type invariant" proved="true">
   <proof prover="5" timelimit="1"><result status="valid" time="0.01" steps="26"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="t&#39;vc.14" expl="type invariant" proved="true">
  <proof prover="5"><result status="valid" time="1.18" steps="825"/></proof>
  </goal>
  <goal name="t&#39;vc.15" expl="type invariant" proved="true">
  <proof prover="5"><result status="valid" time="0.05" steps="135"/></proof>
  </goal>
  <goal name="t&#39;vc.16" expl="type invariant" proved="true">
  <proof prover="5"><result status="valid" time="1.20" steps="883"/></proof>
  </goal>
  <goal name="t&#39;vc.17" expl="type invariant" proved="true">
  <proof prover="0" timelimit="1"><result status="valid" time="0.13" steps="161"/></proof>
  </goal>
  <goal name="t&#39;vc.18" expl="type invariant" proved="true">
  <proof prover="5"><result status="valid" time="0.60" steps="1112"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="create&#39;vc" expl="VC for create" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="create&#39;vc.0" expl="integer overflow" proved="true">
  <proof prover="5" timelimit="1"><result status="valid" time="0.02" steps="16"/></proof>
  </goal>
  <goal name="create&#39;vc.1" expl="division by zero" proved="true">
  <proof prover="5" timelimit="1"><result status="valid" time="0.02" steps="16"/></proof>
  </goal>
  <goal name="create&#39;vc.2" expl="integer overflow" proved="true">
  <proof prover="5" timelimit="1"><result status="valid" time="0.13" steps="70"/></proof>
  </goal>
  <goal name="create&#39;vc.3" expl="integer overflow" proved="true">
  <proof prover="5" timelimit="1"><result status="valid" time="0.03" steps="81"/></proof>
  </goal>
  <goal name="create&#39;vc.4" expl="precondition" proved="true">
  <proof prover="5" timelimit="1"><result status="valid" time="0.06" steps="20"/></proof>
  </goal>
  <goal name="create&#39;vc.5" expl="precondition" proved="true">
  <proof prover="5" timelimit="1"><result status="valid" time="0.03" steps="30"/></proof>
  </goal>
  <goal name="create&#39;vc.6" expl="precondition" proved="true">
  <proof prover="5" timelimit="1"><result status="valid" time="0.04" steps="24"/></proof>
  </goal>
  <goal name="create&#39;vc.7" expl="array creation size" proved="true">
  <proof prover="5" timelimit="1"><result status="valid" time="0.02" steps="30"/></proof>
  </goal>
  <goal name="create&#39;vc.8" expl="integer overflow" proved="true">
  <proof prover="5" timelimit="1"><result status="valid" time="0.02" steps="32"/></proof>
  </goal>
  <goal name="create&#39;vc.9" expl="loop invariant init" proved="true">
  <proof prover="5"><result status="valid" time="0.05" steps="141"/></proof>
  </goal>
  <goal name="create&#39;vc.10" expl="integer overflow" proved="true">
  <proof prover="5"><result status="valid" time="0.03" steps="42"/></proof>
  </goal>
  <goal name="create&#39;vc.11" expl="integer overflow" proved="true">
  <proof prover="5"><result status="valid" time="0.03" steps="46"/></proof>
  </goal>
  <goal name="create&#39;vc.12" expl="integer overflow" proved="true">
  <proof prover="5"><result status="valid" time="0.06" steps="48"/></proof>
  </goal>
  <goal name="create&#39;vc.13" expl="integer overflow" proved="true">
  <proof prover="5"><result status="valid" time="0.03" steps="50"/></proof>
  </goal>
  <goal name="create&#39;vc.14" expl="index in array bounds" proved="true">
  <proof prover="5"><result status="valid" time="0.04" steps="47"/></proof>
  </goal>
  <goal name="create&#39;vc.15" expl="loop invariant preservation" proved="true">
  <proof prover="5"><result status="valid" time="2.38" steps="2543"/></proof>
  </goal>
  <goal name="create&#39;vc.16" expl="integer overflow" proved="true">
  <proof prover="5"><result status="valid" time="0.03" steps="38"/></proof>
  </goal>
  <goal name="create&#39;vc.17" expl="division by zero" proved="true">
  <proof prover="5"><result status="valid" time="0.01" steps="38"/></proof>
  </goal>
  <goal name="create&#39;vc.18" expl="integer overflow" proved="true">
  <proof prover="5"><result status="valid" time="0.03" steps="41"/></proof>
  </goal>
  <goal name="create&#39;vc.19" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.01" steps="40"/></proof>
  </goal>
  <goal name="create&#39;vc.20" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.02" steps="40"/></proof>
  </goal>
  <goal name="create&#39;vc.21" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.05" steps="43"/></proof>
  </goal>
  <goal name="create&#39;vc.22" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.05" steps="45"/></proof>
  </goal>
  <goal name="create&#39;vc.23" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="5.66" steps="1717"/></proof>
  </goal>
  <goal name="create&#39;vc.24" expl="precondition" proved="true">
  <proof prover="0" timelimit="5"><result status="valid" time="1.88" steps="513"/></proof>
  </goal>
  <goal name="create&#39;vc.25" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.08" steps="57"/></proof>
  </goal>
  <goal name="create&#39;vc.26" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.11" steps="227"/></proof>
  </goal>
  <goal name="create&#39;vc.27" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.61" steps="497"/></proof>
  </goal>
  <goal name="create&#39;vc.28" expl="precondition" proved="true">
  <proof prover="0" timelimit="5"><result status="valid" time="0.59" steps="325"/></proof>
  </goal>
  <goal name="create&#39;vc.29" expl="precondition" proved="true">
  <proof prover="5" timelimit="1"><result status="valid" time="0.67" steps="846"/></proof>
  </goal>
  <goal name="create&#39;vc.30" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="1.11" steps="1144"/></proof>
  </goal>
  <goal name="create&#39;vc.31" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="1.10" steps="1208"/></proof>
  </goal>
  <goal name="create&#39;vc.32" expl="precondition" proved="true">
  <proof prover="6" timelimit="5"><result status="valid" time="0.22" steps="44836"/></proof>
  </goal>
  <goal name="create&#39;vc.33" expl="precondition" proved="true">
  <proof prover="6" timelimit="5"><result status="valid" time="0.24" steps="46756"/></proof>
  </goal>
  <goal name="create&#39;vc.34" expl="postcondition" proved="true">
  <proof prover="5"><result status="valid" time="0.02" steps="58"/></proof>
  </goal>
  <goal name="create&#39;vc.35" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.21" steps="193"/></proof>
  </goal>
  <goal name="create&#39;vc.36" expl="postcondition" proved="true">
  <proof prover="5"><result status="valid" time="0.49" steps="264"/></proof>
  </goal>
  <goal name="create&#39;vc.37" expl="postcondition" proved="true">
  <proof prover="5"><result status="valid" time="0.05" steps="72"/></proof>
  </goal>
  <goal name="create&#39;vc.38" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="1.04" steps="546"/></proof>
  </goal>
  <goal name="create&#39;vc.39" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.61" steps="374"/></proof>
  </goal>
  <goal name="create&#39;vc.40" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="70"/></proof>
  </goal>
  <goal name="create&#39;vc.41" expl="out of loop bounds" proved="true">
  <proof prover="5"><result status="valid" time="0.04" steps="35"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="set_next&#39;vc" expl="VC for set_next" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="set_next&#39;vc.0" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.03" steps="35"/></proof>
  </goal>
  <goal name="set_next&#39;vc.1" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.03" steps="37"/></proof>
  </goal>
  <goal name="set_next&#39;vc.2" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.03" steps="39"/></proof>
  </goal>
  <goal name="set_next&#39;vc.3" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.03" steps="41"/></proof>
  </goal>
  <goal name="set_next&#39;vc.4" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.05" steps="43"/></proof>
  </goal>
  <goal name="set_next&#39;vc.5" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.04" steps="49"/></proof>
  </goal>
  <goal name="set_next&#39;vc.6" expl="division by zero" proved="true">
  <proof prover="5"><result status="valid" time="0.03" steps="34"/></proof>
  </goal>
  <goal name="set_next&#39;vc.7" expl="integer overflow" proved="true">
  <proof prover="5"><result status="valid" time="0.09" steps="188"/></proof>
  </goal>
  <goal name="set_next&#39;vc.8" expl="index in array bounds" proved="true">
  <proof prover="5"><result status="valid" time="0.03" steps="98"/></proof>
  </goal>
  <goal name="set_next&#39;vc.9" expl="precondition" proved="true">
  <proof prover="0" timelimit="1"><result status="valid" time="0.03" steps="31"/></proof>
  <proof prover="5"><result status="valid" time="0.03" steps="43"/></proof>
  </goal>
  <goal name="set_next&#39;vc.10" expl="type invariant" proved="true">
  <proof prover="5"><result status="valid" time="0.01" steps="46"/></proof>
  </goal>
  <goal name="set_next&#39;vc.11" expl="type invariant" proved="true">
  <proof prover="5"><result status="valid" time="0.03" steps="52"/></proof>
  </goal>
  <goal name="set_next&#39;vc.12" expl="type invariant" proved="true">
  <proof prover="5"><result status="valid" time="0.05" steps="55"/></proof>
  </goal>
  <goal name="set_next&#39;vc.13" expl="type invariant" proved="true">
  <proof prover="0" timelimit="1"><result status="valid" time="0.02" steps="37"/></proof>
  <proof prover="5"><result status="valid" time="0.05" steps="57"/></proof>
  </goal>
  <goal name="set_next&#39;vc.14" expl="type invariant" proved="true">
  <proof prover="0" timelimit="5"><result status="valid" time="5.69" steps="1082"/></proof>
  </goal>
  <goal name="set_next&#39;vc.15" expl="type invariant" proved="true">
  <proof prover="5"><result status="valid" time="0.03" steps="61"/></proof>
  </goal>
  <goal name="set_next&#39;vc.16" expl="type invariant" proved="true">
  <proof prover="5"><result status="valid" time="0.06" steps="69"/></proof>
  </goal>
  <goal name="set_next&#39;vc.17" expl="type invariant" proved="true">
  <proof prover="5"><result status="valid" time="1.28" steps="1205"/></proof>
  </goal>
  <goal name="set_next&#39;vc.18" expl="type invariant" proved="true">
  <proof prover="5"><result status="valid" time="0.47" steps="574"/></proof>
  </goal>
  <goal name="set_next&#39;vc.19" expl="type invariant" proved="true">
  <transf name="split_premise_right" proved="true" >
   <goal name="set_next&#39;vc.19.0" expl="type invariant" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="set_next&#39;vc.19.0.0" expl="type invariant" proved="true">
    <proof prover="6" timelimit="5"><result status="valid" time="0.63" steps="62587"/></proof>
    </goal>
    <goal name="set_next&#39;vc.19.0.1" expl="type invariant" proved="true">
    <proof prover="6" timelimit="5"><result status="valid" time="0.52" steps="62495"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="set_next&#39;vc.20" expl="type invariant" proved="true">
  <transf name="split_premise_right" proved="true" >
   <goal name="set_next&#39;vc.20.0" expl="type invariant" proved="true">
   <proof prover="6"><result status="valid" time="0.88" steps="87692"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="set_next&#39;vc.21" expl="type invariant" proved="true">
  <transf name="split_premise_right" proved="true" >
   <goal name="set_next&#39;vc.21.0" expl="type invariant" proved="true">
   <proof prover="6" timelimit="5"><result status="valid" time="0.62" steps="67961"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="set_next&#39;vc.22" expl="type invariant" proved="true">
  <transf name="split_premise_right" proved="true" >
   <goal name="set_next&#39;vc.22.0" expl="type invariant" proved="true">
   <proof prover="6"><result status="valid" time="0.58" steps="66535"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="set_next&#39;vc.23" expl="type invariant" proved="true">
  <transf name="split_premise_right" proved="true" >
   <goal name="set_next&#39;vc.23.0" expl="type invariant" proved="true">
   <proof prover="6"><result status="valid" time="0.24" steps="48842"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="set_next&#39;vc.24" expl="type invariant" proved="true">
  <transf name="split_premise_right" proved="true" >
   <goal name="set_next&#39;vc.24.0" expl="type invariant" proved="true">
   <proof prover="6"><result status="valid" time="0.31" steps="49863"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="set_next&#39;vc.25" expl="postcondition" proved="true">
  <proof prover="5" timelimit="1"><result status="valid" time="0.05" steps="54"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="get_next&#39;vc" expl="VC for get_next" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="get_next&#39;vc.0" expl="division by zero" proved="true">
  <proof prover="5" timelimit="1"><result status="valid" time="0.03" steps="26"/></proof>
  </goal>
  <goal name="get_next&#39;vc.1" expl="integer overflow" proved="true">
  <proof prover="5" timelimit="1"><result status="valid" time="0.06" steps="114"/></proof>
  </goal>
  <goal name="get_next&#39;vc.2" expl="index in array bounds" proved="true">
  <proof prover="5" timelimit="1"><result status="valid" time="0.03" steps="83"/></proof>
  </goal>
  <goal name="get_next&#39;vc.3" expl="index in array bounds" proved="true">
  <proof prover="5" timelimit="1"><result status="valid" time="0.03" steps="90"/></proof>
  </goal>
  <goal name="get_next&#39;vc.4" expl="integer overflow" proved="true">
  <proof prover="5" timelimit="1"><result status="valid" time="0.05" steps="140"/></proof>
  </goal>
  <goal name="get_next&#39;vc.5" expl="index in array bounds" proved="true">
  <proof prover="5"><result status="valid" time="0.04" steps="90"/></proof>
  </goal>
  <goal name="get_next&#39;vc.6" expl="postcondition" proved="true">
  <proof prover="5" timelimit="1"><result status="valid" time="0.61" steps="724"/></proof>
  </goal>
  <goal name="get_next&#39;vc.7" expl="postcondition" proved="true">
  <proof prover="5"><result status="valid" time="0.08" steps="221"/></proof>
  </goal>
  <goal name="get_next&#39;vc.8" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="(i &gt;= 3)">
   <goal name="get_next&#39;vc.8.0" expl="asserted formula" proved="true">
   <proof prover="5" timelimit="1"><result status="valid" time="0.02" steps="36"/></proof>
   </goal>
   <goal name="get_next&#39;vc.8.1" expl="postcondition" proved="true">
   <transf name="case" proved="true" arg1="(i &lt; max t - 1)">
    <goal name="get_next&#39;vc.8.1.0" expl="true case (postcondition)" proved="true">
    <proof prover="5" timelimit="1"><result status="valid" time="0.08" steps="45"/></proof>
    </goal>
    <goal name="get_next&#39;vc.8.1.1" expl="false case (postcondition)" proved="true">
    <transf name="case" proved="true" arg1="(i = max t)">
     <goal name="get_next&#39;vc.8.1.1.0" expl="false case (true case. postcondition)" proved="true">
     <proof prover="5" timelimit="1"><result status="valid" time="0.06" steps="47"/></proof>
     </goal>
     <goal name="get_next&#39;vc.8.1.1.1" expl="false case (postcondition)" proved="true">
     <proof prover="5" timelimit="1"><result status="valid" time="0.10" steps="190"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="set_mark&#39;vc" expl="VC for set_mark" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="set_mark&#39;vc.0" expl="division by zero" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="14"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.1" expl="integer overflow" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="28"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.2" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.05" steps="30"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.3" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.05" steps="32"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.4" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="25"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.5" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.02" steps="24"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.6" expl="index in array bounds" proved="true">
  <proof prover="5"><result status="valid" time="0.05" steps="87"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.7" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.05" steps="44"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.8" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.05" steps="197"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.9" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="149"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.10" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.02" steps="38"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.11" expl="index in array bounds" proved="true">
  <proof prover="5"><result status="valid" time="0.06" steps="94"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.12" expl="integer overflow" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="32"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.13" expl="index in array bounds" proved="true">
  <proof prover="5"><result status="valid" time="0.04" steps="105"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.14" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.04" steps="44"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.15" expl="type invariant" proved="true">
  <proof prover="5"><result status="valid" time="0.02" steps="47"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.16" expl="type invariant" proved="true">
  <proof prover="5"><result status="valid" time="0.03" steps="125"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.17" expl="type invariant" proved="true">
  <proof prover="5"><result status="valid" time="0.06" steps="56"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.18" expl="type invariant" proved="true">
  <proof prover="5"><result status="valid" time="0.06" steps="58"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.19" expl="type invariant" proved="true">
  <proof prover="5"><result status="valid" time="0.06" steps="60"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.20" expl="type invariant" proved="true">
  <proof prover="5"><result status="valid" time="0.05" steps="62"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.21" expl="type invariant" proved="true">
  <proof prover="5"><result status="valid" time="0.42" steps="260"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.22" expl="type invariant" proved="true">
  <proof prover="5"><result status="valid" time="0.07" steps="72"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.23" expl="type invariant" proved="true">
  <proof prover="5"><result status="valid" time="0.07" steps="63"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.24" expl="type invariant" proved="true">
  <transf name="split_premise_right" proved="true" >
   <goal name="set_mark&#39;vc.24.0" expl="type invariant" proved="true">
   <proof prover="6"><result status="valid" time="0.35" steps="53848"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="set_mark&#39;vc.25" expl="type invariant" proved="true">
  <transf name="split_premise_right" proved="true" >
   <goal name="set_mark&#39;vc.25.0" expl="type invariant" proved="true">
   <proof prover="6"><result status="valid" time="0.42" steps="64106"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="set_mark&#39;vc.26" expl="type invariant" proved="true">
  <transf name="split_premise_right" proved="true" >
   <goal name="set_mark&#39;vc.26.0" expl="type invariant" proved="true">
   <proof prover="6"><result status="valid" time="0.36" steps="56653"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="set_mark&#39;vc.27" expl="type invariant" proved="true">
  <transf name="split_premise_right" proved="true" >
   <goal name="set_mark&#39;vc.27.0" expl="type invariant" proved="true">
   <proof prover="6"><result status="valid" time="0.49" steps="59174"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="set_mark&#39;vc.28" expl="type invariant" proved="true">
  <transf name="split_premise_right" proved="true" >
   <goal name="set_mark&#39;vc.28.0" expl="type invariant" proved="true">
   <proof prover="6"><result status="valid" time="0.27" steps="48863"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="set_mark&#39;vc.29" expl="type invariant" proved="true">
  <proof prover="5" timelimit="1"><result status="valid" time="0.08" steps="76"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.30" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="29"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.31" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.05" steps="36"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.32" expl="type invariant" proved="true">
  <proof prover="5"><result status="valid" time="0.02" steps="39"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.33" expl="type invariant" proved="true">
  <proof prover="5"><result status="valid" time="0.03" steps="108"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.34" expl="type invariant" proved="true">
  <proof prover="5"><result status="valid" time="0.06" steps="48"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.35" expl="type invariant" proved="true">
  <proof prover="5"><result status="valid" time="0.03" steps="50"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.36" expl="type invariant" proved="true">
  <proof prover="5"><result status="valid" time="0.06" steps="52"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.37" expl="type invariant" proved="true">
  <proof prover="5"><result status="valid" time="0.11" steps="54"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.38" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.08" steps="92"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.39" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="49"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.40" expl="type invariant" proved="true">
  <proof prover="5" timelimit="1"><result status="valid" time="0.10" steps="55"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.41" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="39"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.42" expl="type invariant" proved="true">
  <proof prover="5" timelimit="1"><result status="valid" time="0.29" steps="354"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.43" expl="type invariant" proved="true">
  <proof prover="5" timelimit="1"><result status="valid" time="0.05" steps="66"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.44" expl="type invariant" proved="true">
  <proof prover="5" timelimit="1"><result status="valid" time="0.03" steps="66"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.45" expl="type invariant" proved="true">
  <proof prover="5" timelimit="1"><result status="valid" time="0.05" steps="63"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.46" expl="type invariant" proved="true">
  <proof prover="5" timelimit="1"><result status="valid" time="0.07" steps="68"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.47" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="25"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="get_mark&#39;vc" expl="VC for get_mark" proved="true">
 <proof prover="5"><result status="valid" time="0.19" steps="337"/></proof>
 </goal>
 <goal name="get_max&#39;vc" expl="VC for get_max" proved="true">
 <proof prover="5" timelimit="1"><result status="valid" time="0.02" steps="24"/></proof>
 </goal>
 <goal name="EulerSieve.t&#39;vc" expl="VC for t" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="t&#39;vc.0" expl="VC for t" proved="true">
  <proof prover="5"><result status="valid" time="0.02" steps="12"/></proof>
  </goal>
  <goal name="t&#39;vc.1" expl="VC for t" proved="true">
  <proof prover="5" timelimit="1"><result status="valid" time="0.02" steps="12"/></proof>
  </goal>
  <goal name="t&#39;vc.2" expl="VC for t" proved="true">
  <proof prover="1" timelimit="1"><result status="valid" time="0.05" steps="195896"/></proof>
  <proof prover="5" timelimit="1"><result status="valid" time="0.02" steps="12"/></proof>
  </goal>
  <goal name="t&#39;vc.3" expl="VC for t" proved="true">
  <proof prover="1" timelimit="1"><result status="valid" time="0.05" steps="168993"/></proof>
  <proof prover="5" timelimit="1"><result status="valid" time="0.02" steps="12"/></proof>
  </goal>
  <goal name="t&#39;vc.4" expl="VC for t" proved="true">
  <proof prover="5" timelimit="1"><result status="valid" time="0.02" steps="12"/></proof>
  </goal>
  <goal name="t&#39;vc.5" expl="VC for t" proved="true">
  <proof prover="5" timelimit="1"><result status="valid" time="0.03" steps="12"/></proof>
  </goal>
  <goal name="t&#39;vc.6" expl="VC for t" proved="true">
  <proof prover="1" timelimit="1"><result status="valid" time="0.05" steps="168523"/></proof>
  <proof prover="5" timelimit="1"><result status="valid" time="0.03" steps="18"/></proof>
  </goal>
  <goal name="t&#39;vc.7" expl="VC for t" proved="true">
  <proof prover="5" timelimit="1"><result status="valid" time="0.02" steps="20"/></proof>
  </goal>
  <goal name="t&#39;vc.8" expl="VC for t" proved="true">
  <proof prover="1" timelimit="1"><result status="valid" time="0.05" steps="165779"/></proof>
  <proof prover="5" timelimit="1"><result status="valid" time="0.01" steps="12"/></proof>
  </goal>
  <goal name="t&#39;vc.9" expl="VC for t" proved="true">
  <proof prover="5" timelimit="1"><result status="valid" time="0.02" steps="14"/></proof>
  </goal>
  <goal name="t&#39;vc.10" expl="VC for t" proved="true">
  <proof prover="5" timelimit="1"><result status="valid" time="0.02" steps="14"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="EulerSieve.create&#39;refn&#39;vc" expl="VC for create&#39;refn" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="create&#39;refn&#39;vc.0" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.02" steps="14"/></proof>
  </goal>
  <goal name="create&#39;refn&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="5" timelimit="1"><result status="valid" time="0.02" steps="32"/></proof>
  </goal>
  <goal name="create&#39;refn&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="5" timelimit="1"><result status="valid" time="0.02" steps="32"/></proof>
  </goal>
  <goal name="create&#39;refn&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="5" timelimit="1"><result status="valid" time="0.03" steps="38"/></proof>
  </goal>
  <goal name="create&#39;refn&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="5" timelimit="1"><result status="valid" time="0.05" steps="105"/></proof>
  </goal>
  <goal name="create&#39;refn&#39;vc.5" expl="postcondition" proved="true">
  <proof prover="5" timelimit="1"><result status="valid" time="0.05" steps="105"/></proof>
  </goal>
  <goal name="create&#39;refn&#39;vc.6" expl="postcondition" proved="true">
  <proof prover="5" timelimit="1"><result status="valid" time="0.01" steps="42"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="EulerSieve.set_next&#39;refn&#39;vc" expl="VC for set_next&#39;refn" proved="true">
 <proof prover="5"><result status="valid" time="0.08" steps="206"/></proof>
 </goal>
 <goal name="EulerSieve.get_next&#39;refn&#39;vc" expl="VC for get_next&#39;refn" proved="true">
 <proof prover="5"><result status="valid" time="0.01" steps="26"/></proof>
 </goal>
 <goal name="EulerSieve.set_mark&#39;refn&#39;vc" expl="VC for set_mark&#39;refn" proved="true">
 <proof prover="5"><result status="valid" time="0.03" steps="40"/></proof>
 </goal>
 <goal name="EulerSieve.get_mark&#39;refn&#39;vc" expl="VC for get_mark&#39;refn" proved="true">
 <proof prover="5"><result status="valid" time="0.02" steps="26"/></proof>
 </goal>
 <goal name="EulerSieve.get_max&#39;refn&#39;vc" expl="VC for get_max&#39;refn" proved="true">
 <proof prover="5"><result status="valid" time="0.02" steps="20"/></proof>
 </goal>
 <goal name="euler_sieve&#39;vc" expl="VC for euler_sieve">
 <transf name="split_vc" >
  <goal name="euler_sieve&#39;vc.0" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.02" steps="14"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.1" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.02" steps="58"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.2" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.02" steps="60"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.3" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.02" steps="60"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.4" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.02" steps="60"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.5" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.02" steps="60"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.6" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.02" steps="78"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.7" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.05" steps="207666"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.8" expl="division by zero" proved="true">
  <proof prover="5"><result status="valid" time="0.02" steps="84"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.9" expl="integer overflow" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="83"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.10" expl="assertion" proved="true">
  <proof prover="5" timelimit="1"><result status="valid" time="0.45" steps="403"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.11" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="euler_sieve&#39;vc.11.0" expl="precondition" proved="true">
   <proof prover="5"><result status="valid" time="0.02" steps="68"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.11.1" expl="precondition" proved="true">
   <proof prover="5"><result status="valid" time="0.07" steps="72"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.11.2" expl="precondition" proved="true">
   <transf name="unfold" proved="true" arg1="inv_marked_old_nexts2" arg2="in" arg3="Ensures5">
    <goal name="euler_sieve&#39;vc.11.2.0" expl="precondition" proved="true">
    <transf name="split_premise_right" proved="true" >
     <goal name="euler_sieve&#39;vc.11.2.0.0" expl="precondition" proved="true">
     <transf name="assert" proved="true" arg1="(int63&#39;int nn &lt;= div (int63&#39;int (max1 t)) (int63&#39;int nn))">
      <goal name="euler_sieve&#39;vc.11.2.0.0.0" expl="asserted formula" proved="true">
      <proof prover="5"><result status="valid" time="0.11" steps="76"/></proof>
      </goal>
      <goal name="euler_sieve&#39;vc.11.2.0.0.1" expl="precondition" proved="true">
      <proof prover="1" timelimit="5"><result status="valid" time="0.09" steps="321446"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.12" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.02" steps="95"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.13" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="euler_sieve&#39;vc.13.0" expl="assertion" proved="true">
   <proof prover="0" timelimit="5" obsolete="true"><result status="timeout" time="5.00"/></proof>
   <proof prover="1" timelimit="5"><result status="valid" time="0.07" steps="263688"/></proof>
   <proof prover="2" timelimit="5" obsolete="true"><result status="timeout" time="5.00" steps="566528"/></proof>
   <proof prover="5" obsolete="true"><result status="timeout" time="5.00"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.13.1" expl="VC for euler_sieve" proved="true">
   <transf name="unfold" proved="true" arg1="only_products_marked" arg2="in" arg3="Ensures4">
    <goal name="euler_sieve&#39;vc.13.1.0" expl="VC for euler_sieve" proved="true">
    <proof prover="3" timelimit="5"><result status="valid" time="5.74"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="euler_sieve&#39;vc.13.2" expl="VC for euler_sieve" proved="true">
   <proof prover="3"><result status="valid" time="5.94"/></proof>
   <transf name="remove" proved="true" arg1="zero1,one1,(-),int63&#39;maxInt,int63&#39;minInt,min_int63,max_int63,to_int,in_bounds,zero,one,even,odd,([]),cons,snoc,(++),exchange,inv_marked_nexts,inv_marked_old_nexts1,all_products_marked,previously_marked_products,only_products_marked,prime_products_marked,inv_remove_products,all_differents,all_inf_or_eq,inv_count,Assoc1,Unit_def_l,Unit_def_r,Inv_def_r,Assoc,Mul_distr_l,Refl,Trans,CompatOrderAdd,CompatOrderMult,Abs_pos,Div_mod,Mod_bound,Div_unique,Div_bound,Mod_1,Div_1,Mod_minus1_left,Div_mult,Div_mod1,Div_bound1,Rounds_toward_zero,Div_11,Mod_11,Div_inf1,Div_mult1,Mod_mult1,to_int_in_bounds,extensionality,max_int&#39;def,min_int&#39;def,even_or_odd,even_not_odd,odd_not_even,even_odd,odd_even,even_even,even_2k,odd_2k1,even_mod2,divides_right,divides_factorl,divides_trans,divides_bounds,mod_divides_euclidean,divides_mod_euclidean,mod_divides_computer,divides_mod_computer,even_divides,prime_2,even_prime,mult_croissance,div_croissance1,div_croissance_locale2,div_croissance2,mult_borne_sous_exp,sq_ineq,divides_div,no_prod_impl_no_divider,length_nonnegative,(==)&#39;spec,set&#39;spec,set&#39;def,cons&#39;spec,snoc&#39;spec,([..])&#39;spec,([..])&#39;def,([_..])&#39;def,([.._])&#39;def,(++)&#39;spec,exchange_set,conservation_inv_marked_nexts_on_marked_change,conservation_inv_marked_nexts_on_nexts_change,array63&#39;invariant,conservation_inv_arr_on_mark,conservation_inv_arr_on_jump,t&#39;invariant,marked_impl_all_products_marked,prev_and_new_impl_all_products_marked,conservation_only_products_marked,conservation_previously_marked_products,conservation_previously_marked_products_on_marked_change,conservation_inv_marked_old_nexts2,unchanged_other_elements,previously_marked_products_impl_prime,only_products_marked_impl_not_marked,H18,H17,Ensures13,H16,H15,H14,Ensures12,Ensures11,Ensures10,Ensures9,Ensures8,H13,Requires4,Requires3,H8,Ensures6,Ensures5,Ensures4,H5,H4,Ensures3,Ensures1,H3,Assert,Ensures,H12,H11,H7,H6">
    <goal name="euler_sieve&#39;vc.13.2.0" expl="VC for euler_sieve" proved="true">
    <proof prover="3" timelimit="1"><result status="valid" time="0.95"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.14" expl="variant decrease" proved="true">
  <proof prover="1"><result status="valid" time="0.07" steps="229518"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.15" expl="precondition" proved="true">
  <proof prover="1" timelimit="5"><result status="valid" time="0.06" steps="200892"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.16" expl="precondition" proved="true">
  <proof prover="5" timelimit="1"><result status="valid" time="0.08" steps="94"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.17" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.01" steps="94"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.18" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.03" steps="95"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.19" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="euler_sieve&#39;vc.19.0" expl="precondition" proved="true">
   <transf name="inline_goal" proved="true" >
    <goal name="euler_sieve&#39;vc.19.0.0" expl="precondition" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="euler_sieve&#39;vc.19.0.0.0" expl="VC for euler_sieve" proved="true">
     <proof prover="5"><result status="valid" time="0.07" steps="78"/></proof>
     </goal>
     <goal name="euler_sieve&#39;vc.19.0.0.1" expl="VC for euler_sieve" proved="true">
     <proof prover="5" timelimit="1"><result status="valid" time="0.07" steps="78"/></proof>
     </goal>
     <goal name="euler_sieve&#39;vc.19.0.0.2" expl="VC for euler_sieve" proved="true">
     <proof prover="2"><result status="valid" time="0.12" steps="35276"/></proof>
     </goal>
     <goal name="euler_sieve&#39;vc.19.0.0.3" expl="VC for euler_sieve" proved="true">
     <proof prover="1"><result status="valid" time="0.11" steps="373544"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.20" expl="precondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="euler_sieve&#39;vc.20.0" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="euler_sieve&#39;vc.20.0.0" expl="precondition" proved="true">
    <proof prover="5"><result status="valid" time="0.06" steps="79"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.20.0.1" expl="precondition" proved="true">
    <proof prover="5"><result status="valid" time="0.06" steps="79"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.20.0.2" expl="precondition" proved="true">
    <transf name="inline_goal" proved="true" >
     <goal name="euler_sieve&#39;vc.20.0.2.0" expl="precondition" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="euler_sieve&#39;vc.20.0.2.0.0" expl="precondition" proved="true">
      <proof prover="1"><result status="valid" time="0.30" steps="780723"/></proof>
      </goal>
      <goal name="euler_sieve&#39;vc.20.0.2.0.1" expl="precondition" proved="true">
      <proof prover="1" timelimit="5"><result status="valid" time="0.09" steps="274813"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="euler_sieve&#39;vc.20.0.3" expl="precondition" proved="true">
    <proof prover="5"><result status="valid" time="0.02" steps="75"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.20.0.4" expl="precondition" proved="true">
    <transf name="unfold" proved="true" arg1="inv_marked_old_nexts2" arg2="in" arg3="Requires">
     <goal name="euler_sieve&#39;vc.20.0.4.0" expl="precondition" proved="true">
     <transf name="split_premise_right" proved="true" >
      <goal name="euler_sieve&#39;vc.20.0.4.0.0" expl="precondition" proved="true">
      <transf name="assert" proved="true" arg1="(int63&#39;int nn &lt;= div (int63&#39;int (max1 t)) (int63&#39;int nn))">
       <goal name="euler_sieve&#39;vc.20.0.4.0.0.0" expl="asserted formula" proved="true">
       <proof prover="5"><result status="valid" time="0.11" steps="83"/></proof>
       </goal>
       <goal name="euler_sieve&#39;vc.20.0.4.0.0.1" expl="precondition" proved="true">
       <proof prover="1" timelimit="5"><result status="valid" time="0.09" steps="332296"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="euler_sieve&#39;vc.20.0.5" expl="precondition" proved="true">
    <proof prover="5"><result status="valid" time="0.07" steps="79"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.21" expl="postcondition" proved="true">
  <proof prover="5"><result status="valid" time="0.07" steps="359"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.22" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.03" steps="88"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.23" expl="assertion" proved="true">
  <transf name="inline_all" proved="true" >
   <goal name="euler_sieve&#39;vc.23.0" expl="assertion" proved="true">
   <proof prover="3"><result status="valid" time="8.22"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.24" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.03" steps="88"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.25" expl="assertion">
  <transf name="split_vc" >
   <goal name="euler_sieve&#39;vc.25.0" expl="assertion" proved="true">
   <proof prover="5"><result status="valid" time="0.07" steps="81"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.25.1" expl="assertion" proved="true">
   <proof prover="5"><result status="valid" time="0.67" steps="543"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.25.2" expl="assertion" proved="true">
   <proof prover="5"><result status="valid" time="1.11" steps="316"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.25.3" expl="VC for euler_sieve" proved="true">
   <proof prover="1" timelimit="5"><result status="valid" time="0.07" steps="232903"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.25.4" expl="VC for euler_sieve" proved="true">
   <proof prover="1"><result status="valid" time="0.05" steps="190506"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.25.5" expl="VC for euler_sieve" proved="true">
   <proof prover="5"><result status="valid" time="0.09" steps="83"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.25.6" expl="VC for euler_sieve" proved="true">
   <proof prover="5"><result status="valid" time="0.03" steps="84"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.25.7" expl="VC for euler_sieve" proved="true">
   <proof prover="5"><result status="valid" time="0.08" steps="83"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.25.8" expl="VC for euler_sieve" proved="true">
   <proof prover="5"><result status="valid" time="0.76" steps="319"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.25.9" expl="VC for euler_sieve" proved="true">
   <proof prover="5"><result status="valid" time="0.07" steps="91"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.25.10" expl="VC for euler_sieve" proved="true">
   <proof prover="5"><result status="valid" time="1.03" steps="330"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.25.11" expl="VC for euler_sieve">
   <transf name="inline_goal" >
    <goal name="euler_sieve&#39;vc.25.11.0" expl="VC for euler_sieve">
    <transf name="instantiate" arg1="H" arg2="i">
     <goal name="euler_sieve&#39;vc.25.11.0.0" expl="VC for euler_sieve">
     <transf name="split_vc" >
      <goal name="euler_sieve&#39;vc.25.11.0.0.0" expl="VC for euler_sieve" proved="true">
      <proof prover="5"><result status="valid" time="0.03" steps="74"/></proof>
      </goal>
      <goal name="euler_sieve&#39;vc.25.11.0.0.1" expl="VC for euler_sieve">
      <proof prover="0" timelimit="5" obsolete="true"><result status="timeout" time="5.00"/></proof>
      <proof prover="1" timelimit="5" obsolete="true"><result status="timeout" time="5.00" steps="8235339"/></proof>
      <proof prover="2" timelimit="5" obsolete="true"><result status="timeout" time="5.00" steps="599715"/></proof>
      <proof prover="3" timelimit="5" obsolete="true"><result status="timeout" time="5.00"/></proof>
      <proof prover="4" obsolete="true"><result status="timeout" time="5.00"/></proof>
      <proof prover="5" obsolete="true"><result status="failure" time="0.00"/></proof>
      <proof prover="6" timelimit="5" obsolete="true"><result status="timeout" time="5.00" steps="320473"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.26" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="euler_sieve&#39;vc.26.0" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.31" steps="154"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.26.1" expl="postcondition" proved="true">
   <transf name="assert" proved="true" arg1="(forall j k. 2 &lt;= j &lt; (nexts t)[n] -&gt; 2 &lt;= k &lt; length (marked t) -&gt; j * k &lt;&gt; i)">
    <goal name="euler_sieve&#39;vc.26.1.0" expl="asserted formula" proved="true">
    <proof prover="5"><result status="valid" time="0.59" steps="293"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.26.1.1" expl="postcondition" proved="true">
    <proof prover="0" timelimit="5"><result status="valid" time="0.05" steps="82"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.27" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.02" steps="34"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.28" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.03" steps="35"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.29" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.14" steps="169"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.30" expl="precondition" proved="true">
  <proof prover="0" timelimit="5"><result status="valid" time="0.94" steps="634"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.31" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="5.75" steps="3167"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.32" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.76" steps="943"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.33" expl="assertion" proved="true">
  <proof prover="5"><result status="valid" time="0.10" steps="223"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.34" expl="assertion" proved="true">
  <transf name="case" proved="true" arg1="(mod i 2 = 0)">
   <goal name="euler_sieve&#39;vc.34.0" expl="true case (assertion)" proved="true">
   <proof prover="5"><result status="valid" time="0.18" steps="206"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.34.1" expl="false case (assertion)" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="euler_sieve&#39;vc.34.1.0" expl="VC for euler_sieve" proved="true">
    <proof prover="5"><result status="valid" time="0.03" steps="56"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.34.1.1" expl="VC for euler_sieve" proved="true">
    <proof prover="5"><result status="valid" time="0.02" steps="56"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.34.1.2" expl="VC for euler_sieve" proved="true">
    <proof prover="0"><result status="valid" time="0.53" steps="310"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.35" expl="assertion" proved="true">
  <proof prover="5"><result status="valid" time="4.58" steps="1437"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.36" expl="index in array bounds" proved="true">
  <proof prover="5"><result status="valid" time="0.05" steps="48"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.37" expl="loop invariant init" proved="true">
  <proof prover="5"><result status="valid" time="0.04" steps="52"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.38" expl="loop invariant init" proved="true">
  <proof prover="5"><result status="valid" time="0.06" steps="53"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.39" expl="loop invariant init" proved="true">
  <proof prover="5"><result status="valid" time="0.17" steps="270"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.40" expl="loop invariant init" proved="true">
  <proof prover="5"><result status="valid" time="0.02" steps="55"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.41" expl="loop invariant init" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="euler_sieve&#39;vc.41.0" expl="loop invariant init" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="euler_sieve&#39;vc.41.0.0" expl="loop invariant init" proved="true">
    <transf name="assert" proved="true" arg1="(forall i. 1 &lt;= i &lt; length (arr t)[0 &lt;- 2] -&gt; (arr t)[i] = (arr t)[0 &lt;- 2][i])">
     <goal name="euler_sieve&#39;vc.41.0.0.0" expl="asserted formula" proved="true">
     <proof prover="5"><result status="valid" time="0.05" steps="50"/></proof>
     </goal>
     <goal name="euler_sieve&#39;vc.41.0.0.1" expl="loop invariant init" proved="true">
     <proof prover="5"><result status="valid" time="0.40" steps="177"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="euler_sieve&#39;vc.41.0.1" expl="loop invariant init" proved="true">
    <proof prover="1" timelimit="1"><result status="valid" time="0.08" steps="263492"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.41.0.2" expl="loop invariant init" proved="true">
    <proof prover="5"><result status="valid" time="0.23" steps="275"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.41.0.3" expl="loop invariant init" proved="true">
    <proof prover="5"><result status="valid" time="0.12" steps="153"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.41.0.4" expl="loop invariant init" proved="true">
    <transf name="assert" proved="true" arg1="(forall i. 1 &lt;= i &lt; length (arr t)[0 &lt;- 2] -&gt; (arr t)[i] = (arr t)[0 &lt;- 2][i])">
     <goal name="euler_sieve&#39;vc.41.0.4.0" expl="asserted formula" proved="true">
     <proof prover="5"><result status="valid" time="0.06" steps="54"/></proof>
     </goal>
     <goal name="euler_sieve&#39;vc.41.0.4.1" expl="loop invariant init" proved="true">
     <proof prover="5"><result status="valid" time="1.07" steps="570"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="euler_sieve&#39;vc.41.0.5" expl="loop invariant init" proved="true">
    <proof prover="5"><result status="valid" time="0.39" steps="430"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.42" expl="loop invariant init" proved="true">
  <proof prover="5"><result status="valid" time="0.03" steps="156"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.43" expl="loop invariant init" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="euler_sieve&#39;vc.43.0" expl="loop invariant init" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="euler_sieve&#39;vc.43.0.0" expl="loop invariant init" proved="true">
    <proof prover="5"><result status="valid" time="0.18" steps="344"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.44" expl="loop invariant init" proved="true">
  <proof prover="5"><result status="valid" time="0.05" steps="206"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.45" expl="loop invariant init" proved="true">
  <proof prover="1"><result status="valid" time="0.06" steps="240959"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.46" expl="loop invariant init" proved="true">
  <proof prover="1"><result status="valid" time="0.10" steps="313701"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.47" expl="integer overflow" proved="true">
  <proof prover="5"><result status="valid" time="0.08" steps="69"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.48" expl="integer overflow" proved="true">
  <proof prover="5"><result status="valid" time="0.05" steps="71"/></proof>
  <transf name="split_vc" proved="true" >
   <goal name="euler_sieve&#39;vc.48.0" expl="integer overflow" proved="true">
   <proof prover="5" timelimit="1"><result status="valid" time="0.06" steps="55"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.49" expl="index in array bounds" proved="true">
  <proof prover="5"><result status="valid" time="0.12" steps="78"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.50" expl="division by zero" proved="true">
  <proof prover="5"><result status="valid" time="0.13" steps="74"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.51" expl="integer overflow" proved="true">
  <proof prover="5"><result status="valid" time="0.11" steps="293"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.52" expl="assertion" proved="true">
  <proof prover="5"><result status="valid" time="0.08" steps="189"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.53" expl="index in array bounds" proved="true">
  <proof prover="5"><result status="valid" time="0.06" steps="192"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.54" expl="index in array bounds" proved="true">
  <proof prover="5"><result status="valid" time="0.08" steps="200"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.55" expl="integer overflow" proved="true">
  <proof prover="5"><result status="valid" time="0.28" steps="339"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.56" expl="index in array bounds" proved="true">
  <proof prover="5" timelimit="1"><result status="valid" time="0.02" steps="94"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.57" expl="index in array bounds" proved="true">
  <proof prover="5" timelimit="1"><result status="valid" time="0.06" steps="218"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.58" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.07" steps="224"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.59" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.71" steps="1018"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.60" expl="assertion">
  <transf name="inline_goal" >
   <goal name="euler_sieve&#39;vc.60.0" expl="assertion">
   <transf name="split_vc" >
    <goal name="euler_sieve&#39;vc.60.0.0" expl="assertion">
    <proof prover="5"><result status="timeout" time="5.00"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.177.0.3" expl="loop invariant preservation">
    <proof prover="1"><result status="valid" time="0.09" steps="264834"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.177.0.2" expl="loop invariant preservation">
    <transf name="unfold" arg1="inv_count" arg2="in" arg3="LoopInvariant7">
     <goal name="euler_sieve&#39;vc.177.0.2.0" expl="loop invariant preservation">
     <transf name="split_premise_right" >
      <goal name="euler_sieve&#39;vc.177.0.2.0.0" expl="loop invariant preservation">
      <transf name="assert" arg1="(t_arr[cnt1 &lt;- ((2 * p1) + 1)][i] = t_arr[i])">
       <goal name="euler_sieve&#39;vc.177.0.2.0.0.0" expl="asserted formula">
       <proof prover="5"><result status="valid" time="0.15" steps="68"/></proof>
       </goal>
       <goal name="euler_sieve&#39;vc.177.0.2.0.0.1" expl="loop invariant preservation">
       <proof prover="5"><result status="valid" time="0.81" steps="238"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="euler_sieve&#39;vc.177.0.0" expl="loop invariant preservation">
    <proof prover="5"><result status="valid" time="0.87" steps="221"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  <transf name="split_vc" >
   <goal name="euler_sieve&#39;vc.60.0" expl="assertion">
   <transf name="unfold" arg1="inv_count" arg2="in" arg3="LoopInvariant5">
    <goal name="euler_sieve&#39;vc.60.0.0" expl="assertion">
    <transf name="instantiate" arg1="LoopInvariant5" arg2="(int63&#39;int p)">
     <goal name="euler_sieve&#39;vc.60.0.0.0" expl="assertion">
     <transf name="instantiate" arg1="LoopInvariant5" arg2="(int63&#39;int next)">
      <goal name="euler_sieve&#39;vc.60.0.0.0.0" expl="assertion">
      <proof prover="0" timelimit="5"><result status="timeout" time="5.00"/></proof>
      <proof prover="1" timelimit="5"><result status="timeout" time="5.00" steps="8701526"/></proof>
      <proof prover="2" timelimit="5"><result status="timeout" time="5.00" steps="439767"/></proof>
      <proof prover="3" timelimit="5"><result status="timeout" time="5.00"/></proof>
      <proof prover="4"><result status="timeout" time="5.00"/></proof>
      <proof prover="5"><result status="timeout" time="5.00"/></proof>
      <proof prover="6" timelimit="5"><result status="timeout" time="5.00" steps="250924"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.61" expl="assertion" proved="true">
  <transf name="inline_goal" >
   <goal name="euler_sieve&#39;vc.61.0" expl="assertion">
   <transf name="split_vc" >
    <goal name="euler_sieve&#39;vc.61.0.0" expl="assertion">
    </goal>
    <goal name="euler_sieve&#39;vc.61.0.1" expl="assertion">
    </goal>
    <goal name="euler_sieve&#39;vc.61.0.2" expl="assertion">
    <transf name="unfold" arg1="all_inf_or_eq" arg2="in" arg3="LoopInvariant7">
     <goal name="euler_sieve&#39;vc.61.0.2.0" expl="assertion">
     <transf name="instantiate" arg1="LoopInvariant7" arg2="i">
      <goal name="euler_sieve&#39;vc.164.0.0.0.0" expl="loop invariant preservation">
      <transf name="unfold" arg1="inv_count" arg2="in" arg3="LoopInvariant1">
       <goal name="euler_sieve&#39;vc.164.0.0.0.0.0" expl="loop invariant preservation">
       <transf name="split_premise_right" >
        <goal name="euler_sieve&#39;vc.164.0.0.0.0.0.0" expl="loop invariant preservation">
        <transf name="instantiate" arg1="LoopInvariant4" arg2="p1">
         <goal name="euler_sieve&#39;vc.164.0.0.0.0.0.0.0" expl="loop invariant preservation">
         <proof prover="5"><result status="valid" time="0.73" steps="511"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  <transf name="split_vc" proved="true" >
   <goal name="euler_sieve&#39;vc.61.0" expl="assertion" proved="true">
   <proof prover="1"><result status="valid" time="0.13" steps="368174"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.61.1" expl="assertion" proved="true">
   <proof prover="5"><result status="valid" time="1.67" steps="1109"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.61.2" expl="assertion" proved="true">
   <proof prover="1"><result status="valid" time="0.08" steps="302688"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.62" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.03" steps="104"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.63" expl="precondition" proved="true">
  <proof prover="1" timelimit="5"><result status="valid" time="0.10" steps="344003"/></proof>
  <transf name="split_vc" >
   <goal name="euler_sieve&#39;vc.63.0" expl="precondition">
   <transf name="inline_goal" >
    <goal name="euler_sieve&#39;vc.63.0.0" expl="precondition">
    <transf name="split_all_full" >
     <goal name="euler_sieve&#39;vc.63.0.0.0" expl="precondition">
     <proof prover="5"><result status="timeout" time="6.00"/></proof>
     </goal>
     <goal name="euler_sieve&#39;vc.17.0.0.1" expl="VC for euler_sieve">
     <proof prover="5" timelimit="1"><result status="valid" time="0.09" steps="70"/></proof>
     </goal>
     <goal name="euler_sieve&#39;vc.17.0.0.2" expl="VC for euler_sieve">
     <proof prover="2"><result status="valid" time="0.14" steps="35240"/></proof>
     </goal>
     <goal name="euler_sieve&#39;vc.17.0.0.0" expl="VC for euler_sieve">
     <transf name="inline_goal" >
      <goal name="euler_sieve&#39;vc.17.0.0.0.0" expl="VC for euler_sieve">
      <transf name="split_all_full" >
       <goal name="euler_sieve&#39;vc.17.0.0.0.0.0" expl="VC for euler_sieve">
       <proof prover="3"><result status="valid" time="0.04"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.64" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="1.51" steps="525"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.65" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.09" steps="107"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.66" expl="precondition" proved="true">
  <proof prover="1" timelimit="1"><result status="timeout" time="1.00" steps="2119708"/></proof>
  <proof prover="5"><result status="valid" time="0.11" steps="109"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.67" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.42" steps="184"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.68" expl="assertion" proved="true">
  <proof prover="5"><result status="valid" time="0.57" steps="410"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.69" expl="assertion">
  <transf name="split_vc" >
   <goal name="euler_sieve&#39;vc.69.0" expl="assertion">
   </goal>
   <goal name="euler_sieve&#39;vc.69.1" expl="assertion">
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.70" expl="loop variant decrease" proved="true">
  <proof prover="5" timelimit="1"><result status="valid" time="0.03" steps="111"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.71" expl="loop invariant preservation" proved="true">
  <proof prover="5" timelimit="1"><result status="valid" time="0.04" steps="108"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.72" expl="loop invariant preservation" proved="true">
  <proof prover="5"><result status="valid" time="0.08" steps="108"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.73" expl="loop invariant preservation" proved="true">
  <proof prover="5" timelimit="1"><result status="valid" time="0.09" steps="110"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.74" expl="loop invariant preservation" proved="true">
  <proof prover="5"><result status="valid" time="0.06" steps="111"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.75" expl="loop invariant preservation">
  <proof prover="5"><result status="failure" time="0.00"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.76" expl="loop invariant preservation">
  <proof prover="5" timelimit="1"><result status="timeout" time="1.00"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.77" expl="loop invariant preservation">
  <proof prover="5" timelimit="10"><result status="failure" time="0.00"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.78" expl="loop invariant preservation">
  <proof prover="6" timelimit="5"><result status="failure" time="0.00"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.79" expl="loop invariant preservation">
  <proof prover="5" timelimit="1"><result status="failure" time="0.00"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.80" expl="loop invariant preservation">
  <proof prover="5"><result status="failure" time="0.00"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.81" expl="integer overflow">
  <transf name="inline_goal" >
   <goal name="euler_sieve&#39;vc.81.0" expl="integer overflow">
   <transf name="split_vc" >
    <goal name="euler_sieve&#39;vc.81.0.0" expl="integer overflow">
    </goal>
    <goal name="euler_sieve&#39;vc.81.0.1" expl="integer overflow">
    <transf name="unfold" arg1="all_inf_or_eq" arg2="in" arg3="LoopInvariant7">
     <goal name="euler_sieve&#39;vc.81.0.1.0" expl="integer overflow">
     <transf name="instantiate" arg1="LoopInvariant7" arg2="i">
      <goal name="euler_sieve&#39;vc.86.0.0.0.0" expl="loop invariant preservation">
      <transf name="unfold" arg1="inv_count" arg2="in" arg3="LoopInvariant1">
       <goal name="euler_sieve&#39;vc.86.0.0.0.0.0" expl="loop invariant preservation">
       <transf name="split_premise_right" >
        <goal name="euler_sieve&#39;vc.86.0.0.0.0.0.0" expl="loop invariant preservation">
        <transf name="instantiate" arg1="LoopInvariant4" arg2="p1">
         <goal name="euler_sieve&#39;vc.86.0.0.0.0.0.0.0" expl="loop invariant preservation">
         <proof prover="5"><result status="valid" time="0.82" steps="725"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.82" expl="integer overflow">
  <proof prover="5" timelimit="1"><result status="failure" time="0.00"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.83" expl="index in array bounds">
  <proof prover="5" timelimit="1"><result status="failure" time="0.00"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.84" expl="precondition">
  </goal>
  <goal name="euler_sieve&#39;vc.85" expl="precondition">
  <proof prover="5" timelimit="1"><result status="failure" time="0.00"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.86" expl="integer overflow">
  <proof prover="1"><result status="failure" time="0.00"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.87" expl="assertion">
  <proof prover="5"><result status="failure" time="0.00"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.88" expl="loop variant decrease">
  <proof prover="5" timelimit="1"><result status="failure" time="0.00"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.89" expl="loop invariant preservation">
  <transf name="case" arg1="(mod i 2 = 0)">
   <goal name="euler_sieve&#39;vc.32.0" expl="true case (assertion)">
   <proof prover="5" timelimit="1"><result status="valid" time="0.04" steps="52"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.32.1" expl="false case (assertion)">
   <transf name="split_vc" >
    <goal name="euler_sieve&#39;vc.32.1.0" expl="VC for euler_sieve">
    <proof prover="5" timelimit="1"><result status="valid" time="0.06" steps="54"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.32.1.1" expl="VC for euler_sieve">
    <proof prover="5" timelimit="1"><result status="valid" time="0.06" steps="56"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.32.1.2" expl="VC for euler_sieve">
    <proof prover="5" timelimit="10"><result status="valid" time="0.80" steps="906"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.90" expl="loop invariant preservation">
  <proof prover="5"><result status="failure" time="0.00"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.91" expl="loop invariant preservation">
  <transf name="instantiate" arg1="LoopInvariant9" arg2="i">
   <goal name="euler_sieve&#39;vc.152.0" expl="loop invariant preservation">
   <proof prover="5"><result status="valid" time="0.90" steps="414"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.92" expl="loop invariant preservation">
  <proof prover="5"><result status="failure" time="0.00"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.93" expl="loop invariant preservation">
  <transf name="inline_all" >
   <goal name="euler_sieve&#39;vc.93.0" expl="loop invariant preservation">
   <proof prover="3"><result status="failure" time="0.00"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.94" expl="loop invariant preservation">
  <proof prover="5" timelimit="1"><result status="failure" time="0.00"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.95" expl="loop invariant preservation">
  <proof prover="5"><result status="failure" time="0.00"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.96" expl="loop invariant preservation">
  <proof prover="0" timelimit="1"><result status="failure" time="0.00"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.97" expl="loop invariant preservation">
  <proof prover="5" timelimit="1"><result status="failure" time="0.00"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.98" expl="loop invariant preservation">
  <transf name="split_vc" >
   <goal name="euler_sieve&#39;vc.98.0" expl="loop invariant preservation">
   <transf name="unfold" arg1="inv_count" arg2="in" arg3="LoopInvariant5">
    <goal name="euler_sieve&#39;vc.98.0.0" expl="loop invariant preservation">
    <transf name="instantiate" arg1="LoopInvariant5" arg2="p">
     <goal name="euler_sieve&#39;vc.54.0.0.0" expl="assertion">
     <transf name="instantiate" arg1="LoopInvariant5" arg2="next">
      <goal name="euler_sieve&#39;vc.54.0.0.0.0" expl="assertion">
      <proof prover="0" timelimit="5"><result status="valid" time="1.22" steps="325"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.99" expl="integer overflow">
  <transf name="inline_goal" >
   <goal name="euler_sieve&#39;vc.99.0" expl="integer overflow">
   <proof prover="0" timelimit="5"><result status="failure" time="0.00"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.100" expl="integer overflow">
  <proof prover="0" timelimit="1"><result status="failure" time="0.00"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.101" expl="index in array bounds">
  <transf name="split_vc" >
   <goal name="euler_sieve&#39;vc.101.0" expl="index in array bounds">
   <proof prover="5" timelimit="1"><result status="failure" time="0.00"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.101.1" expl="index in array bounds">
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.102" expl="precondition">
  <proof prover="1" timelimit="1"><result status="failure" time="0.00"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.103" expl="precondition">
  <proof prover="2"><result status="failure" time="0.00"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.104" expl="integer overflow">
  <proof prover="5" timelimit="1"><result status="failure" time="0.00"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.105" expl="integer overflow">
  <transf name="split_vc" >
   <goal name="euler_sieve&#39;vc.105.0" expl="integer overflow">
   <proof prover="1"><result status="failure" time="0.00"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.106" expl="assertion">
  <proof prover="5"><result status="failure" time="0.00"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.107" expl="loop variant decrease">
  <proof prover="0" timelimit="1"><result status="failure" time="0.00"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.108" expl="loop invariant preservation">
  <proof prover="5" timelimit="1"><result status="failure" time="0.00"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.109" expl="loop invariant preservation">
  <transf name="case" arg1="(mod i 2 = 0)">
   <goal name="euler_sieve&#39;vc.110.0" expl="true case (assertion)">
   <proof prover="5" timelimit="1"><result status="valid" time="0.04" steps="40"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.110.1" expl="false case (assertion)">
   <transf name="assert" arg1="(get1 (nexts t) (2 * p + 1) = (arr t)[p])">
    <goal name="euler_sieve&#39;vc.110.1.0" expl="asserted formula">
    <proof prover="5" timelimit="1"><result status="valid" time="0.04" steps="40"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.110.1.1" expl="false case (assertion)">
    <transf name="assert" arg1="(get1 (marked t) i = True)">
     <goal name="euler_sieve&#39;vc.110.1.1.0" expl="asserted formula">
     <proof prover="0" timelimit="5"><result status="valid" time="0.58" steps="225"/></proof>
     </goal>
     <goal name="euler_sieve&#39;vc.110.1.1.1" expl="false case (assertion)">
     <proof prover="5" timelimit="1"><result status="valid" time="0.05" steps="44"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.110" expl="loop invariant preservation">
  <transf name="case" arg1="(i &lt; 2 * p1 + 1)">
   <goal name="euler_sieve&#39;vc.167.0" expl="true case (loop invariant preservation)">
   <transf name="instantiate" arg1="LoopInvariant9" arg2="i">
    <goal name="euler_sieve&#39;vc.167.0.0" expl="true case (loop invariant preservation)">
    <proof prover="5"><result status="valid" time="0.98" steps="539"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="euler_sieve&#39;vc.167.1" expl="false case (loop invariant preservation)">
   <transf name="case" arg1="(i = 2 * p1 + 1)">
    <goal name="euler_sieve&#39;vc.167.1.0" expl="false case (true case. loop invariant preservation)">
    <proof prover="5"><result status="valid" time="0.47" steps="314"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.167.1.1" expl="false case (loop invariant preservation)">
    <proof prover="5" timelimit="10"><result status="valid" time="7.48" steps="5572"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.111" expl="loop invariant preservation">
  <proof prover="5"><result status="failure" time="0.00"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.112" expl="loop invariant preservation">
  <transf name="split_vc" >
   <goal name="euler_sieve&#39;vc.112.0" expl="loop invariant preservation">
   <proof prover="5" timelimit="1"><result status="failure" time="0.00"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.23.2" expl="assertion">
   <proof prover="5" timelimit="1"><result status="valid" time="0.64" steps="258"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.23.1" expl="assertion">
   <proof prover="5" timelimit="1"><result status="valid" time="0.32" steps="356"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.23.0" expl="assertion">
   <proof prover="5" timelimit="1"><result status="valid" time="0.09" steps="73"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.23.5" expl="VC for euler_sieve">
   <proof prover="3"><result status="valid" time="1.24"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.23.3" expl="VC for euler_sieve">
   <proof prover="5" timelimit="1"><result status="valid" time="0.49" steps="258"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.23.4" expl="VC for euler_sieve">
   <proof prover="5" timelimit="1"><result status="valid" time="0.05" steps="83"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.113" expl="loop invariant preservation">
  <transf name="instantiate" arg1="LoopInvariant9" arg2="i">
   <goal name="euler_sieve&#39;vc.166.0" expl="loop invariant preservation">
   <proof prover="5"><result status="valid" time="0.17" steps="274"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.114" expl="loop invariant preservation">
  <transf name="split_vc" >
   <goal name="euler_sieve&#39;vc.114.0" expl="loop invariant preservation">
   <proof prover="5"><result status="failure" time="0.00"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.141.0" expl="assertion">
   <proof prover="1"><result status="valid" time="0.07" steps="228959"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.115" expl="loop invariant preservation">
  <transf name="split_vc" >
   <goal name="euler_sieve&#39;vc.115.0" expl="loop invariant preservation">
   <transf name="assert" arg1="(forall j k. 2 &lt;= j &lt; get1 (nexts t) n -&gt; 2 &lt;= k &lt; length1 (marked t) -&gt; j * k &lt;&gt; i)">
    <goal name="euler_sieve&#39;vc.24.1.0" expl="asserted formula">
    <proof prover="5"><result status="valid" time="0.38" steps="235"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.24.1.1" expl="postcondition">
    <proof prover="0" timelimit="5"><result status="valid" time="0.03" steps="78"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="euler_sieve&#39;vc.115.1" expl="loop invariant preservation">
   <proof prover="0"><result status="failure" time="0.00"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.116" expl="loop invariant preservation">
  <proof prover="5" timelimit="1"><result status="failure" time="0.00"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.117" expl="loop invariant preservation">
  <transf name="split_vc" >
   <goal name="euler_sieve&#39;vc.117.0" expl="loop invariant preservation">
   <proof prover="2" timelimit="5"><result status="failure" time="0.00"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.11.0" expl="assertion">
   <proof prover="1"><result status="valid" time="0.05" steps="238011"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.11.2" expl="VC for euler_sieve">
   <proof prover="3" timelimit="5"><result status="valid" time="3.54"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.118" expl="precondition">
  <proof prover="5" timelimit="1"><result status="failure" time="0.00"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.119" expl="postcondition">
  <proof prover="5" timelimit="1"><result status="failure" time="0.00"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.120" expl="postcondition">
  <proof prover="5" timelimit="1"><result status="failure" time="0.00"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.121" expl="postcondition">
  <proof prover="5"><result status="failure" time="0.00"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.122" expl="assertion">
  <transf name="inline_goal" >
   <goal name="euler_sieve&#39;vc.122.0" expl="assertion">
   <transf name="split_vc" >
    <goal name="euler_sieve&#39;vc.122.0.0" expl="assertion">
    <proof prover="1"><result status="failure" time="0.00"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.122.0.1" expl="assertion">
    <proof prover="5"><result status="failure" time="0.00"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.122.0.2" expl="assertion">
    <proof prover="5"><result status="failure" time="0.00"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.162.0.2" expl="loop invariant preservation">
    <transf name="unfold" arg1="inv_count" arg2="in" arg3="LoopInvariant7">
     <goal name="euler_sieve&#39;vc.162.0.2.0" expl="loop invariant preservation">
     <transf name="split_premise_right" >
      <goal name="euler_sieve&#39;vc.162.0.2.0.0" expl="loop invariant preservation">
      <transf name="assert" arg1="(t_arr[cnt1 &lt;- ((2 * p1) + 1)][i] = t_arr[i])">
       <goal name="euler_sieve&#39;vc.162.0.2.0.0.0" expl="asserted formula">
       <proof prover="5"><result status="valid" time="0.13" steps="73"/></proof>
       </goal>
       <goal name="euler_sieve&#39;vc.162.0.2.0.0.1" expl="loop invariant preservation">
       <proof prover="5"><result status="valid" time="1.20" steps="328"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.123" expl="assertion">
  <transf name="inline_goal" >
   <goal name="euler_sieve&#39;vc.123.0" expl="assertion">
   <transf name="split_vc" >
    <goal name="euler_sieve&#39;vc.123.0.0" expl="assertion">
    <proof prover="5"><result status="failure" time="0.00"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.123.0.1" expl="VC for euler_sieve">
    <proof prover="5"><result status="failure" time="0.00"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.123.0.2" expl="VC for euler_sieve">
    <proof prover="5"><result status="failure" time="0.00"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.117.0.2" expl="loop invariant init">
    <proof prover="5"><result status="valid" time="0.75" steps="323"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.124" expl="assertion">
  <proof prover="5"><result status="failure" time="0.00"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.125" expl="index in array bounds">
  <proof prover="5" timelimit="1"><result status="failure" time="0.00"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.126" expl="loop invariant init">
  <proof prover="5" timelimit="1"><result status="failure" time="0.00"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.127" expl="loop invariant init">
  <proof prover="5" timelimit="1"><result status="failure" time="0.00"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.128" expl="loop invariant init">
  <proof prover="5" timelimit="1"><result status="failure" time="0.00"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.129" expl="loop invariant init">
  <proof prover="5" timelimit="1"><result status="failure" time="0.00"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.130" expl="loop invariant init">
  <proof prover="5" timelimit="1"><result status="failure" time="0.00"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.131" expl="loop invariant init">
  <proof prover="5"><result status="failure" time="0.00"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.132" expl="loop invariant init">
  <proof prover="5" timelimit="1"><result status="failure" time="0.00"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.133" expl="loop invariant init">
  <proof prover="5" timelimit="1"><result status="failure" time="0.00"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.134" expl="loop invariant init">
  <proof prover="5" timelimit="1"><result status="failure" time="0.00"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.135" expl="loop invariant init">
  <proof prover="5" timelimit="1"><result status="failure" time="0.00"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.136" expl="integer overflow">
  <proof prover="0" timelimit="5"><result status="failure" time="0.00"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.137" expl="integer overflow">
  <proof prover="1" timelimit="1"><result status="failure" time="0.00"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.138" expl="index in array bounds">
  <transf name="inline_goal" >
   <goal name="euler_sieve&#39;vc.138.0" expl="index in array bounds">
   <transf name="split_vc" >
    <goal name="euler_sieve&#39;vc.138.0.0" expl="index in array bounds">
    <proof prover="0" timelimit="5"><result status="failure" time="0.00"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.138.0.1" expl="index in array bounds">
    <proof prover="5"><result status="failure" time="0.00"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.39.0.2" expl="loop invariant init">
    <transf name="assert" arg1="(forall i. 1 &lt;= i &lt; length (arr t)[0 &lt;- 2] -&gt; (arr t)[i] = (arr t)[0 &lt;- 2][i])">
     <goal name="euler_sieve&#39;vc.39.0.2.0" expl="asserted formula">
     <proof prover="5" timelimit="1"><result status="valid" time="0.09" steps="48"/></proof>
     </goal>
     <goal name="euler_sieve&#39;vc.39.0.2.1" expl="loop invariant init">
     <proof prover="5"><result status="valid" time="1.01" steps="560"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="euler_sieve&#39;vc.39.0.0" expl="loop invariant init">
    <transf name="assert" arg1="(forall i. 1 &lt;= i &lt; length (arr t)[0 &lt;- 2] -&gt; (arr t)[i] = (arr t)[0 &lt;- 2][i])">
     <goal name="euler_sieve&#39;vc.39.0.0.0" expl="asserted formula">
     <proof prover="5" timelimit="1"><result status="valid" time="0.03" steps="44"/></proof>
     </goal>
     <goal name="euler_sieve&#39;vc.39.0.0.1" expl="loop invariant init">
     <proof prover="5" timelimit="1"><result status="valid" time="0.42" steps="134"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.139" expl="division by zero">
  <proof prover="1" timelimit="1"><result status="failure" time="0.00"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.140" expl="integer overflow">
  <proof prover="5"><result status="failure" time="0.00"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.141" expl="assertion">
  <proof prover="5" timelimit="1"><result status="failure" time="0.00"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.142" expl="index in array bounds">
  <proof prover="0" timelimit="1"><result status="failure" time="0.00"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.143" expl="index in array bounds">
  <proof prover="0" timelimit="1"><result status="failure" time="0.00"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.144" expl="integer overflow">
  <proof prover="0" timelimit="1"><result status="failure" time="0.00"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.145" expl="index in array bounds">
  <proof prover="5" timelimit="1"><result status="failure" time="0.00"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.146" expl="index in array bounds">
  <transf name="inline_goal" >
   <goal name="euler_sieve&#39;vc.146.0" expl="index in array bounds">
   <transf name="split_vc" >
    <goal name="euler_sieve&#39;vc.146.0.0" expl="index in array bounds">
    <transf name="case" arg1="(i = p)">
     <goal name="euler_sieve&#39;vc.147.0.0.0" expl="true case (loop invariant preservation)">
     <proof prover="1"><result status="valid" time="0.31" steps="738055"/></proof>
     </goal>
     <goal name="euler_sieve&#39;vc.147.0.0.1" expl="false case (loop invariant preservation)">
     <proof prover="5"><result status="valid" time="2.26" steps="228"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="euler_sieve&#39;vc.146.0.1" expl="index in array bounds">
    <proof prover="5" timelimit="10"><result status="failure" time="0.00"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.147.0.3" expl="loop invariant preservation">
    <proof prover="5" timelimit="10"><result status="valid" time="4.42" steps="1601"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.147.0.2" expl="loop invariant preservation">
    <proof prover="5"><result status="valid" time="0.11" steps="75"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.147" expl="precondition">
  </goal>
  <goal name="euler_sieve&#39;vc.148" expl="precondition">
  <proof prover="2"><result status="failure" time="0.00"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.149" expl="assertion">
  <proof prover="5" timelimit="1"><result status="failure" time="0.00"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.150" expl="assertion">
  <proof prover="1" timelimit="1"><result status="failure" time="0.00"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.151" expl="precondition">
  </goal>
  <goal name="euler_sieve&#39;vc.152" expl="precondition">
  <transf name="inline_goal" >
   <goal name="euler_sieve&#39;vc.152.0" expl="precondition">
   <transf name="split_vc" >
    <goal name="euler_sieve&#39;vc.152.0.0" expl="precondition">
    <proof prover="5" timelimit="1"><result status="failure" time="0.00"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.18.0.1" expl="precondition">
    <proof prover="5" timelimit="1"><result status="valid" time="0.08" steps="71"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.18.0.0" expl="precondition">
    <proof prover="5" timelimit="1"><result status="valid" time="0.09" steps="71"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.18.0.3" expl="precondition">
    <proof prover="5" timelimit="10"><result status="valid" time="0.02" steps="67"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.18.0.4" expl="precondition">
    <proof prover="0"><result status="valid" time="4.62" steps="355"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.18.0.2" expl="precondition">
    <transf name="inline_goal" >
     <goal name="euler_sieve&#39;vc.18.0.2.0" expl="precondition">
     <transf name="split_vc" >
      <goal name="euler_sieve&#39;vc.18.0.2.0.0" expl="precondition">
      <proof prover="1" timelimit="5"><result status="valid" time="0.25" steps="386105"/></proof>
      </goal>
      <goal name="euler_sieve&#39;vc.18.0.2.0.1" expl="precondition">
      <proof prover="0" timelimit="5"><result status="valid" time="3.55" steps="328"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.153" expl="precondition">
  <proof prover="5"><result status="failure" time="0.00"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.154" expl="precondition">
  <proof prover="1" timelimit="1"><result status="failure" time="0.00"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.155" expl="precondition">
  <proof prover="1" timelimit="1"><result status="failure" time="0.00"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.156" expl="precondition">
  <transf name="split_vc" >
   <goal name="euler_sieve&#39;vc.156.0" expl="precondition">
   <proof prover="0"><result status="failure" time="0.00"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.9.0" expl="precondition">
   <proof prover="5" timelimit="1"><result status="valid" time="0.02" steps="60"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.9.1" expl="precondition">
   <proof prover="5" timelimit="1"><result status="valid" time="0.06" steps="63"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.157" expl="assertion">
  <proof prover="5" timelimit="1"><result status="failure" time="0.00"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.158" expl="assertion">
  <proof prover="5" timelimit="1"><result status="failure" time="0.00"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.159" expl="loop variant decrease">
  <proof prover="5"><result status="failure" time="0.00"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.160" expl="loop invariant preservation">
  <transf name="split_vc" >
   <goal name="euler_sieve&#39;vc.160.0" expl="loop invariant preservation">
   <proof prover="5"><result status="failure" time="0.00"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.160.1" expl="loop invariant preservation">
   <proof prover="0" timelimit="5"><result status="failure" time="0.00"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.55.0" expl="assertion">
   <proof prover="5"><result status="valid" time="0.06" steps="62"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.161" expl="loop invariant preservation">
  <proof prover="5"><result status="failure" time="0.00"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.162" expl="loop invariant preservation">
  <transf name="case" arg1="(i &lt; 2 * p1 + 1)">
   <goal name="euler_sieve&#39;vc.182.0" expl="true case (loop invariant preservation)">
   <transf name="instantiate" arg1="LoopInvariant9" arg2="i">
    <goal name="euler_sieve&#39;vc.182.0.0" expl="true case (loop invariant preservation)">
    <proof prover="5"><result status="valid" time="0.41" steps="246"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="euler_sieve&#39;vc.182.1" expl="false case (loop invariant preservation)">
   <transf name="case" arg1="(i = 2 * p1 + 1)">
    <goal name="euler_sieve&#39;vc.182.1.0" expl="false case (true case. loop invariant preservation)">
    <proof prover="5"><result status="valid" time="0.31" steps="231"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.182.1.1" expl="false case (loop invariant preservation)">
    <transf name="unfold" arg1="inv_count" arg2="in" arg3="LoopInvariant14">
     <goal name="euler_sieve&#39;vc.182.1.1.0" expl="false case (loop invariant preservation)">
     <transf name="split_premise_right" >
      <goal name="euler_sieve&#39;vc.182.1.1.0.0" expl="false case (loop invariant preservation)">
      <proof prover="5"><result status="valid" time="0.68" steps="525"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.163" expl="loop invariant preservation">
  <proof prover="5"><result status="failure" time="0.00"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.164" expl="loop invariant preservation">
  <transf name="instantiate" arg1="LoopInvariant9" arg2="i">
   <goal name="euler_sieve&#39;vc.74.0" expl="loop invariant preservation">
   <proof prover="5"><result status="valid" time="0.72" steps="291"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.165" expl="loop invariant preservation">
  <proof prover="5"><result status="failure" time="0.00"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.166" expl="loop invariant preservation">
  <proof prover="5" timelimit="1"><result status="failure" time="0.00"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.167" expl="loop invariant preservation">
  <proof prover="5" timelimit="1"><result status="failure" time="0.00"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.168" expl="loop invariant preservation">
  <proof prover="5" timelimit="1"><result status="failure" time="0.00"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.169" expl="loop invariant preservation">
  <transf name="split_vc" >
   <goal name="euler_sieve&#39;vc.169.0" expl="loop invariant preservation">
   <transf name="unfold" arg1="inv_count" arg2="in" arg3="LoopInvariant5">
    <goal name="euler_sieve&#39;vc.169.0.0" expl="loop invariant preservation">
    <transf name="instantiate" arg1="LoopInvariant5" arg2="p">
     <goal name="euler_sieve&#39;vc.132.0.0.0" expl="assertion">
     <transf name="instantiate" arg1="LoopInvariant5" arg2="next">
      <goal name="euler_sieve&#39;vc.132.0.0.0.0" expl="assertion">
      <proof prover="0" timelimit="5"><result status="valid" time="0.94" steps="271"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.170" expl="integer overflow">
  <proof prover="5"><result status="failure" time="0.00"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.171" expl="integer overflow">
  <proof prover="5" timelimit="1"><result status="failure" time="0.00"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.172" expl="index in array bounds">
  <proof prover="1"><result status="failure" time="0.00"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.173" expl="precondition">
  <proof prover="2"><result status="failure" time="0.00"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.174" expl="precondition">
  <proof prover="2"><result status="failure" time="0.00"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.175" expl="integer overflow">
  <proof prover="5"><result status="failure" time="0.00"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.176" expl="assertion">
  <proof prover="0" timelimit="5"><result status="failure" time="0.00"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.177" expl="loop variant decrease">
  <proof prover="0" timelimit="1"><result status="failure" time="0.00"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.178" expl="loop invariant preservation">
  <proof prover="5"><result status="failure" time="0.00"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.179" expl="loop invariant preservation">
  <proof prover="5"><result status="failure" time="0.00"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.180" expl="loop invariant preservation">
  <transf name="inline_goal" >
   <goal name="euler_sieve&#39;vc.180.0" expl="loop invariant preservation">
   <transf name="split_vc" >
    <goal name="euler_sieve&#39;vc.180.0.0" expl="loop invariant preservation">
    <proof prover="5" timelimit="1"><result status="failure" time="0.00"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.181" expl="loop invariant preservation">
  <proof prover="5"><result status="failure" time="0.00"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.182" expl="loop invariant preservation">
  <transf name="case" arg1="(i &lt; 2 * p1 + 1)">
   <goal name="euler_sieve&#39;vc.89.0" expl="true case (loop invariant preservation)">
   <transf name="instantiate" arg1="LoopInvariant9" arg2="i">
    <goal name="euler_sieve&#39;vc.89.0.0" expl="true case (loop invariant preservation)">
    <proof prover="5"><result status="valid" time="0.69" steps="380"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="euler_sieve&#39;vc.89.1" expl="false case (loop invariant preservation)">
   <transf name="case" arg1="(i = 2 * p1 + 1)">
    <goal name="euler_sieve&#39;vc.89.1.0" expl="false case (true case. loop invariant preservation)">
    <proof prover="5"><result status="valid" time="0.77" steps="365"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.89.1.1" expl="false case (loop invariant preservation)">
    <transf name="unfold" arg1="inv_count" arg2="in" arg3="LoopInvariant14">
     <goal name="euler_sieve&#39;vc.89.1.1.0" expl="false case (loop invariant preservation)">
     <transf name="split_premise_right" >
      <goal name="euler_sieve&#39;vc.89.1.1.0.0" expl="false case (loop invariant preservation)">
      <proof prover="5"><result status="valid" time="3.32" steps="1427"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.183" expl="loop invariant preservation">
  <proof prover="5" timelimit="1"><result status="failure" time="0.00"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.184" expl="loop invariant preservation">
  <transf name="instantiate" arg1="LoopInvariant9" arg2="i">
   <goal name="euler_sieve&#39;vc.88.0" expl="loop invariant preservation">
   <proof prover="5"><result status="valid" time="0.28" steps="314"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.185" expl="loop invariant preservation">
  <proof prover="5"><result status="failure" time="0.00"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.186" expl="loop invariant preservation">
  <proof prover="5"><result status="failure" time="0.00"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.187" expl="loop invariant preservation">
  <proof prover="1" timelimit="1"><result status="failure" time="0.00"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.188" expl="integer overflow">
  <proof prover="5"><result status="failure" time="0.00"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.189" expl="integer overflow">
  <proof prover="5"><result status="failure" time="0.00"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.190" expl="index in array bounds">
  <proof prover="5"><result status="failure" time="0.00"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.191" expl="precondition">
  <proof prover="1" timelimit="1"><result status="failure" time="0.00"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.192" expl="precondition">
  <proof prover="2"><result status="failure" time="0.00"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.193" expl="integer overflow">
  <transf name="inline_goal" >
   <goal name="euler_sieve&#39;vc.193.0" expl="integer overflow">
   <transf name="split_vc" >
    <goal name="euler_sieve&#39;vc.193.0.0" expl="integer overflow">
    <proof prover="5"><result status="failure" time="0.00"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.193.0.1" expl="integer overflow">
    <proof prover="5"><result status="failure" time="0.00"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.84.0.2" expl="loop invariant preservation">
    <transf name="unfold" arg1="inv_count" arg2="in" arg3="LoopInvariant7">
     <goal name="euler_sieve&#39;vc.84.0.2.0" expl="loop invariant preservation">
     <transf name="split_premise_right" >
      <goal name="euler_sieve&#39;vc.84.0.2.0.0" expl="loop invariant preservation">
      <transf name="assert" arg1="(t_arr[cnt1 &lt;- ((2 * p1) + 1)][i] = t_arr[i])">
       <goal name="euler_sieve&#39;vc.84.0.2.0.0.0" expl="asserted formula">
       <proof prover="5"><result status="valid" time="0.22" steps="79"/></proof>
       </goal>
       <goal name="euler_sieve&#39;vc.84.0.2.0.0.1" expl="loop invariant preservation">
       <proof prover="5" timelimit="10"><result status="valid" time="2.37" steps="785"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="euler_sieve&#39;vc.84.0.3" expl="loop invariant preservation">
    <proof prover="1"><result status="valid" time="0.10" steps="300949"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.194" expl="integer overflow">
  <proof prover="1"><result status="failure" time="0.00"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.195" expl="assertion">
  <proof prover="0" timelimit="5"><result status="failure" time="0.00"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.196" expl="loop variant decrease">
  <proof prover="0" timelimit="1"><result status="failure" time="0.00"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.197" expl="loop invariant preservation">
  <transf name="split_vc" >
   <goal name="euler_sieve&#39;vc.197.0" expl="loop invariant preservation">
   <proof prover="1"><result status="failure" time="0.00"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.197.1" expl="loop invariant preservation">
   <proof prover="1" timelimit="5"><result status="failure" time="0.00"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.198" expl="loop invariant preservation">
  <proof prover="5" timelimit="1"><result status="failure" time="0.00"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.199" expl="loop invariant preservation">
  <proof prover="5"><result status="failure" time="0.00"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.200" expl="loop invariant preservation">
  <proof prover="6" timelimit="5"><result status="failure" time="0.00"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.201" expl="loop invariant preservation">
  <transf name="case" arg1="(i &lt; 2 * p1 + 1)">
   <goal name="euler_sieve&#39;vc.104.0" expl="true case (loop invariant preservation)">
   <transf name="instantiate" arg1="LoopInvariant9" arg2="i">
    <goal name="euler_sieve&#39;vc.104.0.0" expl="true case (loop invariant preservation)">
    <proof prover="5"><result status="valid" time="0.61" steps="285"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="euler_sieve&#39;vc.104.1" expl="false case (loop invariant preservation)">
   <transf name="case" arg1="(i = 2 * p1 + 1)">
    <goal name="euler_sieve&#39;vc.104.1.0" expl="false case (true case. loop invariant preservation)">
    <proof prover="5"><result status="valid" time="0.60" steps="270"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.104.1.1" expl="false case (loop invariant preservation)">
    <transf name="unfold" arg1="inv_count" arg2="in" arg3="LoopInvariant14">
     <goal name="euler_sieve&#39;vc.104.1.1.0" expl="false case (loop invariant preservation)">
     <transf name="split_premise_right" >
      <goal name="euler_sieve&#39;vc.104.1.1.0.0" expl="false case (loop invariant preservation)">
      <proof prover="5"><result status="valid" time="0.90" steps="604"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.202" expl="loop invariant preservation">
  <proof prover="5" timelimit="1"><result status="failure" time="0.00"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.203" expl="loop invariant preservation">
  <proof prover="5"><result status="failure" time="0.00"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.204" expl="loop invariant preservation">
  <proof prover="5"><result status="failure" time="0.00"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.205" expl="loop invariant preservation">
  <proof prover="5"><result status="failure" time="0.00"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.206" expl="loop invariant preservation">
  <proof prover="5"><result status="failure" time="0.00"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.207" expl="precondition">
  <proof prover="5" timelimit="1"><result status="failure" time="0.00"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.208" expl="postcondition">
  <proof prover="5" timelimit="1"><result status="failure" time="0.00"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.209" expl="postcondition">
  <proof prover="5" timelimit="1"><result status="failure" time="0.00"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.210" expl="postcondition">
  <proof prover="5" timelimit="1"><result status="failure" time="0.00"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="unchanged_other_elements_arr&#39;vc" expl="VC for unchanged_other_elements_arr">
 <proof prover="5" obsolete="true"><result status="valid" time="0.03" steps="45"/></proof>
 </goal>
</theory>
</file>
</why3session>
